<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN">
<html><head><meta http-equiv="Content-Type" content="text/html;charset=iso-8859-1">
<title>wxPropertyGrid: propgrid.h Source File</title>
<link href="doxygen.css" rel="stylesheet" type="text/css">
</head><body>
<!-- Generated by Doxygen 1.3.6 -->
<div class="qindex"><a class="qindex" href="index.htm">Main&nbsp;Page</a> | <a class="qindex" href="modules.htm">Modules</a> | <a class="qindex" href="hierarchy.htm">Class&nbsp;Hierarchy</a> | <a class="qindex" href="annotated.htm">Class&nbsp;List</a> | <a class="qindex" href="files.htm">File&nbsp;List</a> | <a class="qindex" href="functions.htm">Class&nbsp;Members</a></div>
<h1>propgrid.h</h1><div class="fragment"><pre>00001 
00002 <span class="comment">// Name:        propgrid.h</span>
00003 <span class="comment">// Purpose:     wxPropertyGrid</span>
00004 <span class="comment">// Author:      Jaakko Salli</span>
00005 <span class="comment">// Modified by:</span>
00006 <span class="comment">// Created:     Sep-25-2004</span>
00007 <span class="comment">// RCS-ID:      $Id:</span>
00008 <span class="comment">// Copyright:   (c) Jaakko Salli</span>
00009 <span class="comment">// Licence:     wxWindows license</span>
00011 <span class="comment"></span>
00012 <span class="preprocessor">#ifndef __WX_PROPGRID_H__</span>
00013 <span class="preprocessor"></span><span class="preprocessor">#define __WX_PROPGRID_H__</span>
00014 <span class="preprocessor"></span>
00015 <span class="preprocessor">#if defined(__GNUG__) &amp;&amp; !defined(NO_GCC_PRAGMA)</span>
00016 <span class="preprocessor"></span><span class="preprocessor">    #pragma interface "propgrid.cpp"</span>
00017 <span class="preprocessor"></span><span class="preprocessor">#endif</span>
00018 <span class="preprocessor"></span>
00019 <span class="comment">/*</span>
00020 <span class="comment"></span>
00021 <span class="comment">  -- IMPORTANT API NOTES --</span>
00022 <span class="comment"></span>
00023 <span class="comment">  * Intermediate property classes that should only be inherited from</span>
00024 <span class="comment">    have names that begin with wxPG (for example, wxPGProperty and</span>
00025 <span class="comment">    wxPGPropertyWithChildren).</span>
00026 <span class="comment"></span>
00027 <span class="comment">*/</span>
00028 
00029 <span class="preprocessor">#include &lt;wx/dynarray.h&gt;</span>
00030 
00031 <span class="preprocessor">#include &lt;wx/hashmap.h&gt;</span>
00032 
00033 <span class="preprocessor">#include &lt;wx/variant.h&gt;</span>
00034 
00035 <span class="preprocessor">#include &lt;wx/tooltip.h&gt;</span>
00036 
00037 <span class="comment">//#include &lt;wx/validate.h&gt;</span>
00038 
00039 <span class="comment">// Doxygen special</span>
00040 <span class="preprocessor">#if !defined(_WX_WINDOW_H_BASE_) &amp;&amp; !defined(SWIG)</span>
00041 <span class="preprocessor"></span><span class="preprocessor"># include "pg_dox_mainpage.h"</span>
00042 <span class="preprocessor">#endif</span>
00043 <span class="preprocessor"></span>
00044 <span class="comment">// Custom version information (takes CVS(i.e. subrelease) into account)</span>
00045 <span class="preprocessor">#define wxPG_WX_VERSION ((wxMAJOR_VERSION*100)+(wxMINOR_VERSION*10)+(wxRELEASE_NUMBER+wxSUBRELEASE_NUMBER))</span>
00046 <span class="preprocessor"></span>
00047 <span class="comment">// -----------------------------------------------------------------------</span>
00048 
00049 
00050 <span class="comment">//</span>
00051 <span class="comment">// Here are some platform dependent defines</span>
00052 <span class="comment">// NOTE: More in propertygrid.cpp</span>
00053 <span class="comment">//</span>
00054 
00055 <span class="preprocessor">#ifndef SWIG</span>
00056 <span class="preprocessor"></span><span class="preprocessor">#if defined(__WXMSW__)</span>
00057 <span class="preprocessor"></span>    <span class="comment">// tested</span>
00058 
00059 <span class="preprocessor">    #define wxPG_XBEFORETEXT            5 // space between vertical line and value text</span>
00060 <span class="preprocessor"></span><span class="preprocessor">    #define wxPG_XBEFOREWIDGET          1 // space between vertical line and value editor control</span>
00061 <span class="preprocessor"></span>
00062 <span class="preprocessor">    #define wxPG_ICON_WIDTH             9 // comment to use bitmap buttons</span>
00063 <span class="preprocessor"></span><span class="preprocessor">    #define wxPG_USE_RENDERER_NATIVE    0 // 1 if wxRendererNative should be employed</span>
00064 <span class="preprocessor"></span>
00065 <span class="preprocessor"># if defined(__WXWINCE__)</span>
00066 <span class="preprocessor"></span><span class="preprocessor">    #define wxPG_DOUBLE_BUFFER          0 // 1 to use double-buffer that guarantees flicker-free painting</span>
00067 <span class="preprocessor"></span><span class="preprocessor"># else</span>
00068 <span class="preprocessor"></span><span class="preprocessor">    #define wxPG_DOUBLE_BUFFER          1 // 1 to use double-buffer that guarantees flicker-free painting</span>
00069 <span class="preprocessor"></span><span class="preprocessor"># endif</span>
00070 <span class="preprocessor"></span>
00071 <span class="preprocessor">    #define wxPG_HEAVY_GFX              1 // 1 for prettier appearance</span>
00072 <span class="preprocessor"></span>
00073 <span class="preprocessor">#ifndef wxPG_USE_CUSTOM_CONTROLS</span>
00074 <span class="preprocessor"></span><span class="preprocessor">    #define wxPG_USE_CUSTOM_CONTROLS    0 // 1 to use wxCustomControls instead native ones (usually better)</span>
00075 <span class="preprocessor"></span><span class="preprocessor">#endif</span>
00076 <span class="preprocessor"></span>
00077 <span class="preprocessor">    #define wxPG_SUPPORT_TOOLTIPS       1  // Enable tooltips</span>
00078 <span class="preprocessor"></span>
00079 <span class="preprocessor">#elif defined(__WXGTK__)</span>
00080 <span class="preprocessor"></span>    <span class="comment">// tested</span>
00081 
00082 <span class="preprocessor">    #define wxPG_XBEFORETEXT            6 // space between vertical line and value text</span>
00083 <span class="preprocessor"></span><span class="preprocessor">    #define wxPG_XBEFOREWIDGET          1 // space between vertical line and value editor control</span>
00084 <span class="preprocessor"></span>
00085 <span class="preprocessor">    #define wxPG_ICON_WIDTH             9 // comment to use bitmap buttons</span>
00086 <span class="preprocessor"></span><span class="preprocessor">    #define wxPG_USE_RENDERER_NATIVE    0 // 1 if wxRendererNative should be employed</span>
00087 <span class="preprocessor"></span>
00088 <span class="preprocessor">    #define wxPG_DOUBLE_BUFFER          1 // 1 to use double-buffer that guarantees flicker-free painting</span>
00089 <span class="preprocessor"></span>
00090 <span class="preprocessor">    #define wxPG_HEAVY_GFX              1 // 1 for prettier appearance</span>
00091 <span class="preprocessor"></span>
00092 <span class="preprocessor">#ifndef wxPG_USE_CUSTOM_CONTROLS</span>
00093 <span class="preprocessor"></span><span class="preprocessor">    #define wxPG_USE_CUSTOM_CONTROLS    0 // 1 to use wxCustomControls instead native ones (usually better)</span>
00094 <span class="preprocessor"></span><span class="preprocessor">#endif</span>
00095 <span class="preprocessor"></span>
00096 <span class="preprocessor">    #define wxPG_SUPPORT_TOOLTIPS       1  // Enable tooltips</span>
00097 <span class="preprocessor"></span>
00098 <span class="preprocessor">#elif defined(__WXMAC__)</span>
00099 <span class="preprocessor"></span>    <span class="comment">// *not* tested</span>
00100 
00101 <span class="preprocessor">    #define wxPG_XBEFORETEXT            5 // space between vertical line and value text</span>
00102 <span class="preprocessor"></span><span class="preprocessor">    #define wxPG_XBEFOREWIDGET          1 // space between vertical line and value editor widget</span>
00103 <span class="preprocessor"></span>
00104 <span class="preprocessor">    #define wxPG_ICON_WIDTH             11  // comment to use bitmap buttons</span>
00105 <span class="preprocessor"></span><span class="preprocessor">    #define wxPG_USE_RENDERER_NATIVE    1 // 1 if wxRendererNative should be employed</span>
00106 <span class="preprocessor"></span>
00107 <span class="preprocessor">    #define wxPG_DOUBLE_BUFFER          0 // 1 to use double-buffer that guarantees flicker-free painting</span>
00108 <span class="preprocessor"></span>
00109 <span class="preprocessor">    #define wxPG_HEAVY_GFX              1 // 1 for prettier appearance</span>
00110 <span class="preprocessor"></span>
00111 <span class="preprocessor">#ifndef wxPG_USE_CUSTOM_CONTROLS</span>
00112 <span class="preprocessor"></span><span class="preprocessor">    #define wxPG_USE_CUSTOM_CONTROLS    0 // 1 to use wxCustomControls instead native ones (usually better)</span>
00113 <span class="preprocessor"></span><span class="preprocessor">#endif</span>
00114 <span class="preprocessor"></span>
00115 <span class="preprocessor">    #define wxPG_SUPPORT_TOOLTIPS       1  // Enable tooltips</span>
00116 <span class="preprocessor"></span>
00117 <span class="preprocessor">#else</span>
00118 <span class="preprocessor"></span>    <span class="comment">// defaults</span>
00119     <span class="comment">// tested on: none.</span>
00120 
00121 <span class="preprocessor">    #define wxPG_XBEFORETEXT            6 // space between vertical line and value text</span>
00122 <span class="preprocessor"></span><span class="preprocessor">    #define wxPG_XBEFOREWIDGET          1 // space between vertical line and value editor widget</span>
00123 <span class="preprocessor"></span>
00124 <span class="preprocessor">    #define wxPG_ICON_WIDTH             9 // comment to use bitmap buttons</span>
00125 <span class="preprocessor"></span><span class="preprocessor">    #define wxPG_USE_RENDERER_NATIVE    0 // 1 if wxRendererNative should be employed</span>
00126 <span class="preprocessor"></span>
00127 <span class="preprocessor">    #define wxPG_DOUBLE_BUFFER          0 // 1 to use double-buffer that guarantees flicker-free painting</span>
00128 <span class="preprocessor"></span>
00129 <span class="preprocessor">    #define wxPG_HEAVY_GFX              0 // 1 for prettier appearance</span>
00130 <span class="preprocessor"></span>
00131 <span class="preprocessor">#ifndef wxPG_USE_CUSTOM_CONTROLS</span>
00132 <span class="preprocessor"></span><span class="preprocessor">    #define wxPG_USE_CUSTOM_CONTROLS    1 // 1 to use wxCustomControls instead native ones (usually better)</span>
00133 <span class="preprocessor"></span><span class="preprocessor">#endif</span>
00134 <span class="preprocessor"></span>
00135 <span class="preprocessor">    #define wxPG_SUPPORT_TOOLTIPS       0  // Enable tooltips</span>
00136 <span class="preprocessor"></span>
00137 <span class="preprocessor">#endif</span>
00138 <span class="preprocessor"></span>
00139 <span class="preprocessor">#endif // SWIG</span>
00140 <span class="preprocessor"></span>
00141 <span class="comment">// Undefine wxPG_ICON_WIDTH to use supplied xpm bitmaps instead</span>
00142 <span class="comment">// (for tree buttons)</span>
00143 <span class="comment">//#undef wxPG_ICON_WIDTH</span>
00144 
00145 <span class="comment">// Need to force disable tooltips?</span>
00146 <span class="preprocessor">#if !wxUSE_TOOLTIPS</span>
00147 <span class="preprocessor"></span><span class="preprocessor"># undef wxPG_SUPPORT_TOOLTIPS</span>
00148 <span class="preprocessor"></span><span class="preprocessor"># define wxPG_SUPPORT_TOOLTIPS       0</span>
00149 <span class="preprocessor"></span><span class="preprocessor">#endif</span>
00150 <span class="preprocessor"></span>
00151 <span class="comment">// Set 1 to include basic properties ( ~48k in 0.9.9.2 )</span>
00152 <span class="preprocessor">#define wxPG_INCLUDE_BASICPROPS         1</span>
00153 <span class="preprocessor"></span>
00154 <span class="comment">// Set 1 to include advanced properties (wxFontProperty, wxColourProperty, etc.) ( ~32k in 0.9.9.2 )</span>
00155 <span class="preprocessor">#define wxPG_INCLUDE_ADVPROPS           1</span>
00156 <span class="preprocessor"></span>
00157 <span class="comment">// Set 1 include wxPropertyGridManager ( ~36k in 0.9.9.1 )</span>
00158 <span class="comment">//#define wxPG_INCLUDE_MANAGER            1</span>
00159 
00160 <span class="comment">// Set 1 to include checkbox editor class ( ~4k in 0.9.9.1 )</span>
00161 <span class="preprocessor">#define wxPG_INCLUDE_CHECKBOX           1</span>
00162 <span class="preprocessor"></span>
00163 <span class="comment">// 1 to allow user data for each property</span>
00164 <span class="preprocessor">#define wxPG_USE_USERDATA               1</span>
00165 <span class="preprocessor"></span>
00166 <span class="comment">// 1 to allow per-property validators</span>
00167 <span class="preprocessor">#define wxPG_USE_VALIDATORS             0</span>
00168 <span class="preprocessor"></span>
00169 <span class="comment">// NOTE: Use this only if you really need wxDynamicCast etc. Property class name</span>
00170 <span class="comment">//   can be acquired with wxPropertyGrid::GetPropertyClassName() anyway.</span>
00171 <span class="comment">// ALSO NOTE: Causes quite a code size increase (~20k in main object file) considering what</span>
00172 <span class="comment">//   it does.</span>
00173 <span class="preprocessor">#define wxPG_INCLUDE_WXOBJECT           0 // 1 if inherit wxPGProperty from wxObject</span>
00174 <span class="preprocessor"></span>
00175 <span class="comment">// -----------------------------------------------------------------------</span>
00176 
00177 <span class="preprocessor">#if defined(_WX_WINDOW_H_BASE_) // !DOXYGEN</span>
00178 <span class="preprocessor"></span><span class="preprocessor">    #define wxPG_COMPATIBILITY_1_0_0</span>
00179 <span class="preprocessor"></span><span class="preprocessor">#endif</span>
00180 <span class="preprocessor"></span>
00181 <span class="preprocessor">#ifdef wxPG_COMPATIBILITY_1_0_0</span>
00182 <span class="preprocessor"></span>
00183 <span class="preprocessor">    #define wxRECURSE           wxPG_RECURSE</span>
00184 <span class="preprocessor"></span><span class="preprocessor">    #define wxKEEP_STRUCTURE    wxPG_KEEP_STRUCTURE</span>
00185 <span class="preprocessor"></span><span class="preprocessor">    #define wxPGConstants       wxPGChoices</span>
00186 <span class="preprocessor"></span>
00187 <span class="preprocessor">#endif</span>
00188 <span class="preprocessor"></span>
00189 <span class="comment">// -----------------------------------------------------------------------</span>
00190 
00191 <span class="comment">// Our very custom dynamic object macros. Should only be used</span>
00192 <span class="comment">// directly in an abstract (typeless etc.) base property classes.</span>
00193 <span class="preprocessor">#if wxPG_INCLUDE_WXOBJECT</span>
00194 <span class="preprocessor"></span><span class="preprocessor"># error "wxPG_INCLUDE_WXOBJECT is not currently supported (as of 1.0.0b)."</span>
00195 <span class="preprocessor"></span><span class="comment">//# define _WX_PG_DECLARE_PROPERTY_CLASS(A)       DECLARE_CLASS(A)</span>
00196 <span class="comment">//# define _WX_PG_IMPLEMENT_PROPERTY_CLASS(A,B)   IMPLEMENT_CLASS(A,B)</span>
00197 <span class="preprocessor"># define WX_PG_DECLARE_GETCLASSNAME()</span>
00198 <span class="preprocessor"></span><span class="preprocessor"># define WX_PG_DECLARE_GETCLASSINFO()</span>
00199 <span class="preprocessor"></span><span class="preprocessor">#else</span>
00200 <span class="preprocessor"></span><span class="comment">//# define _WX_PG_DECLARE_PROPERTY_CLASS(A)</span>
00201 <span class="comment">//# define _WX_PG_IMPLEMENT_PROPERTY_CLASS(A,B)</span>
00202 <span class="preprocessor"># define WX_PG_DECLARE_GETCLASSNAME()   virtual const wxChar* GetClassName() const;</span>
00203 <span class="preprocessor"></span><span class="preprocessor"># define WX_PG_DECLARE_GETCLASSINFO()   virtual const wxPGPropertyClassInfo* GetClassInfo() const;</span>
00204 <span class="preprocessor"></span><span class="preprocessor">#endif</span>
00205 <span class="preprocessor"></span>
00206 <span class="comment">// -----------------------------------------------------------------------</span>
00207 
00208 <span class="preprocessor">#ifdef WXMAKINGDLL_PROPGRID</span>
00209 <span class="preprocessor"></span><span class="preprocessor">    #define WXDLLIMPEXP_PG WXEXPORT</span>
00210 <span class="preprocessor"></span><span class="preprocessor">#elif defined(WXUSINGDLL)</span>
00211 <span class="preprocessor"></span><span class="preprocessor">    #define WXDLLIMPEXP_PG WXIMPORT</span>
00212 <span class="preprocessor"></span><span class="preprocessor">#else // not making nor using DLL</span>
00213 <span class="preprocessor"></span><span class="preprocessor">    #define WXDLLIMPEXP_PG</span>
00214 <span class="preprocessor"></span><span class="preprocessor">#endif</span>
00215 <span class="preprocessor"></span>
00216 <span class="comment">// -----------------------------------------------------------------------</span>
00217 
00218 <span class="preprocessor">#if wxPG_USE_CUSTOM_CONTROLS</span>
00219 <span class="preprocessor"></span><span class="preprocessor"># include "wx/propgrid/custctrl.h"</span>
00220 <span class="preprocessor"># define wxPGCtrlClass wxCustomControl</span>
00221 <span class="preprocessor"></span><span class="preprocessor">#else</span>
00222 <span class="preprocessor"></span><span class="preprocessor"># define wxPGCtrlClass wxWindow</span>
00223 <span class="preprocessor"></span><span class="preprocessor"># if !wxPG_USE_GENERIC_TEXTCTRL</span>
00224 <span class="preprocessor"></span><span class="preprocessor">#  define wxCCustomTextCtrl wxTextCtrl</span>
00225 <span class="preprocessor"></span><span class="preprocessor"># else</span>
00226 <span class="preprocessor"></span><span class="preprocessor">#  include "wx/propgrid/custctrl.h"</span>
00227 <span class="preprocessor">#  define wxCCustomTextCtrl wxGenericTextCtrl</span>
00228 <span class="preprocessor"></span><span class="preprocessor"># endif</span>
00229 <span class="preprocessor"></span><span class="comment">//# define wxCCustomComboBox wxComboBox</span>
00230 <span class="keyword">class </span>WXDLLEXPORT wxOwnerDrawnComboBox;
00231 <span class="preprocessor"># define wxCCustomComboBox wxOwnerDrawnComboBox</span>
00232 <span class="preprocessor"></span><span class="preprocessor"># define wxCCustomButton wxButton</span>
00233 <span class="preprocessor"></span><span class="preprocessor">#endif</span>
00234 <span class="preprocessor"></span>
00235 <span class="comment">// -----------------------------------------------------------------------</span>
00236 
00237 <span class="preprocessor">#ifndef SWIG</span>
00238 <span class="preprocessor"></span><span class="keyword">class  </span>WXDLLIMPEXP_PG wxPGVariant;
00239 <span class="keyword">class  </span>WXDLLIMPEXP_PG wxPGValueType;
00240 <span class="keyword">class  </span>WXDLLIMPEXP_PG wxPGEditor;
00241 <span class="keyword">class  </span>WXDLLIMPEXP_PG wxPGProperty;
00242 <span class="keyword">class  </span>WXDLLIMPEXP_PG wxPGPropertyWithChildren;
00243 <span class="keyword">class  </span>WXDLLIMPEXP_PG wxPropertyCategoryClass;
00244 <span class="keyword">class  </span>WXDLLIMPEXP_PG wxPGChoices;
00245 <span class="keyword">class  </span>WXDLLIMPEXP_PG wxPropertyGridState;
00246 <span class="keyword">class  </span>WXDLLIMPEXP_PG wxPropertyGrid;
00247 <span class="keyword">class  </span>WXDLLIMPEXP_PG wxPropertyGridEvent;
00248 <span class="keyword">class  </span>WXDLLIMPEXP_PG wxPropertyGridManager;
00249 <span class="preprocessor">#endif</span>
00250 <span class="preprocessor"></span>
00251 <span class="keyword">struct </span><a class="code" href="structwxPGPaintData.htm">wxPGPaintData</a>;
00252 
00253 <span class="keyword">extern</span> WXDLLIMPEXP_PG <span class="keyword">const</span> wxChar *wxPropertyGridNameStr;
00254 
<a name="l00261"></a><a class="code" href="group__miscellaneous.htm#ga2">00261</a> <span class="preprocessor">#define wxPG_LABEL (*((const wxString*)NULL))</span>
00262 <span class="preprocessor"></span>
<a name="l00265"></a><a class="code" href="group__miscellaneous.htm#ga3">00265</a> <span class="preprocessor">#define wxPG_COLOUR(R,G,B) ((wxUint32)(R+(G&lt;&lt;8)+(B&lt;&lt;16)))</span>
00266 <span class="preprocessor"></span>
<a name="l00272"></a><a class="code" href="group__miscellaneous.htm#ga4">00272</a> <span class="preprocessor">#define wxPG_FLEXIBLE_SIZE(PREFWID,PREFHEI) wxSize(-(PREFWID),-(PREFHEI))</span>
00273 <span class="preprocessor"></span>
<a name="l00287"></a><a class="code" href="group__miscellaneous.htm#ga0">00287</a> <span class="keyword">typedef</span> bool (*<a class="code" href="group__miscellaneous.htm#ga0">wxPropertyGridCallback</a>)(wxPropertyGrid* propGrid,
00288                                        wxPGProperty* property,
00289                                        wxPGCtrlClass* ctrl,
00290                                        <span class="keywordtype">int</span> data);
00291 
<a name="l00297"></a><a class="code" href="group__miscellaneous.htm#ga1">00297</a> <span class="keyword">typedef</span> void (*<a class="code" href="group__miscellaneous.htm#ga1">wxPGPaintCallback</a>)(wxPGProperty* property,
00298                                   wxDC&amp; dc,
00299                                   <span class="keyword">const</span> wxRect&amp; rect,
00300                                   <a class="code" href="structwxPGPaintData.htm">wxPGPaintData</a>&amp; paintdata);
00301 
<a name="l00307"></a><a class="code" href="group__miscellaneous.htm#ga5">00307</a> <span class="preprocessor">#define WX_PG_CLASSINFO(NAME) NAME##ClassInfo</span>
00308 <span class="preprocessor"></span>
00312 <span class="comment">// -----------------------------------------------------------------------</span>
00313 
<a name="l00323"></a><a class="code" href="group__wndflags.htm#ga0">00323</a> <span class="preprocessor">#define wxPG_AUTO_SORT              0x00000010</span>
00324 <span class="preprocessor"></span>
<a name="l00330"></a><a class="code" href="group__wndflags.htm#ga1">00330</a> <span class="preprocessor">#define wxPG_HIDE_CATEGORIES          0x00000020</span>
00331 <span class="preprocessor"></span>
00332 <span class="comment">/* This style combines non-categoric mode and automatic sorting.</span>
00333 <span class="comment">*/</span>
00334 <span class="preprocessor">#define wxPG_ALPHABETIC_MODE        (wxPG_HIDE_CATEGORIES|wxPG_AUTO_SORT)</span>
00335 <span class="preprocessor"></span>
<a name="l00339"></a><a class="code" href="group__wndflags.htm#ga3">00339</a> <span class="preprocessor">#define wxPG_BOLD_MODIFIED           0x00000040</span>
00340 <span class="preprocessor"></span>
<a name="l00344"></a><a class="code" href="group__wndflags.htm#ga4">00344</a> <span class="preprocessor">#define wxPG_SPLITTER_AUTO_CENTER   0x00000080</span>
00345 <span class="preprocessor"></span>
<a name="l00349"></a><a class="code" href="group__wndflags.htm#ga5">00349</a> <span class="preprocessor">#define wxPG_TOOLTIPS               0x00000100</span>
00350 <span class="preprocessor"></span>
<a name="l00355"></a><a class="code" href="group__wndflags.htm#ga6">00355</a> <span class="preprocessor">#define wxPG_HIDE_MARGIN            0x00000200</span>
00356 <span class="preprocessor"></span>
<a name="l00359"></a><a class="code" href="group__wndflags.htm#ga7">00359</a> <span class="preprocessor">#define wxPG_STATIC_SPLITTER        0x00000400</span>
00360 <span class="preprocessor"></span>
<a name="l00364"></a><a class="code" href="group__wndflags.htm#ga8">00364</a> <span class="preprocessor">#define wxPG_STATIC_LAYOUT          (wxPG_HIDE_MARGIN|wxPG_STATIC_SPLITTER)</span>
00365 <span class="preprocessor"></span>
<a name="l00370"></a><a class="code" href="group__wndflags.htm#ga9">00370</a> <span class="preprocessor">#define wxPG_LIMITED_EDITING        0x00000800</span>
00371 <span class="preprocessor"></span>
<a name="l00373"></a><a class="code" href="group__wndflags.htm#ga10">00373</a> <span class="preprocessor">#define wxPG_TOOLBAR                0x00001000</span>
00374 <span class="preprocessor"></span>
<a name="l00378"></a><a class="code" href="group__wndflags.htm#ga11">00378</a> <span class="preprocessor">#define wxPG_DESCRIPTION            0x00002000</span>
00379 <span class="preprocessor"></span>
<a name="l00383"></a><a class="code" href="group__wndflags.htm#ga12">00383</a> <span class="preprocessor">#define wxPG_COMPACTOR              0x00004000</span>
00384 <span class="preprocessor"></span>
<a name="l00392"></a><a class="code" href="group__wndflags.htm#ga13">00392</a> <span class="preprocessor">#define wxPG_EX_INIT_NOCAT          0x00001000</span>
00393 <span class="preprocessor"></span>
<a name="l00397"></a><a class="code" href="group__wndflags.htm#ga14">00397</a> <span class="preprocessor">#define wxPG_EX_NO_FLAT_TOOLBAR     0x00002000</span>
00398 <span class="preprocessor"></span>
<a name="l00402"></a><a class="code" href="group__wndflags.htm#ga15">00402</a> <span class="preprocessor">#define wxPG_EX_CLASSIC_SPACING     0x00004000</span>
00403 <span class="preprocessor"></span>
<a name="l00406"></a><a class="code" href="group__wndflags.htm#ga16">00406</a> <span class="preprocessor">#define wxPG_EX_NO_MODE_BUTTONS     0x00008000</span>
00407 <span class="preprocessor"></span>
<a name="l00410"></a><a class="code" href="group__wndflags.htm#ga17">00410</a> <span class="preprocessor">#define wxPG_DEFAULT_STYLE              (wxNO_FULL_REPAINT_ON_RESIZE)</span>
00411 <span class="preprocessor"></span>
<a name="l00414"></a><a class="code" href="group__wndflags.htm#ga18">00414</a> <span class="preprocessor">#define wxPGMAN_DEFAULT_STYLE       (wxNO_FULL_REPAINT_ON_RESIZE)</span>
00415 <span class="preprocessor"></span>
00420 <span class="preprocessor">#ifndef wxPG_KEEP_STRUCTURE</span>
00421 <span class="preprocessor"></span><span class="preprocessor"># define wxPG_KEEP_STRUCTURE               0x00000010</span>
00422 <span class="preprocessor"></span><span class="preprocessor">#endif</span>
00423 <span class="preprocessor"></span>
00425 <span class="preprocessor">#ifndef wxPG_RECURSE</span>
00426 <span class="preprocessor"></span><span class="preprocessor"># define wxPG_RECURSE                      0x00000020</span>
00427 <span class="preprocessor"></span><span class="preprocessor">#endif</span>
00428 <span class="preprocessor"></span>
00429 <span class="comment">// -----------------------------------------------------------------------</span>
00430 
00431 <span class="comment">// Property priorities</span>
00432 <span class="preprocessor">#define wxPG_LOW                    1</span>
00433 <span class="preprocessor"></span><span class="preprocessor">#define wxPG_HIGH                   2</span>
00434 <span class="preprocessor"></span>
00435 <span class="comment">// -----------------------------------------------------------------------</span>
00436 
00437 <span class="comment">// Misc argument flags.</span>
00438 <span class="preprocessor">#define wxPG_FULL_VALUE             0x00000001 // Get/Store full value instead of displayed value.</span>
00439 <span class="preprocessor"></span><span class="preprocessor">#define wxPG_REPORT_ERROR           0x00000002</span>
00440 <span class="preprocessor"></span>
00441 <span class="comment">// -----------------------------------------------------------------------</span>
00442 
00443 <span class="comment">// Simple class to hold the wxPGProperty pointer.</span>
00444 <span class="keyword">class </span>WXDLLIMPEXP_PG wxPGId
00445 {
00446 <span class="keyword">public</span>:
00447     <span class="keyword">inline</span> wxPGId() { m_ptr = (wxPGProperty*) NULL; }
00448     <span class="keyword">inline</span> wxPGId ( wxPGProperty* ptr ) { m_ptr = ptr; }
00449     <span class="keyword">inline</span> wxPGId ( wxPGProperty&amp; ref ) { m_ptr = &amp;ref; }
00450     ~wxPGId() {}
00451 
00452     <span class="keywordtype">bool</span> IsOk ()<span class="keyword"> const </span>{ <span class="keywordflow">return</span> ( m_ptr != NULL ); }
00453 
00454     <span class="keywordtype">bool</span> operator == (<span class="keyword">const</span> wxPGId&amp; other)
00455     {
00456         <span class="keywordflow">return</span> m_ptr == other.m_ptr;
00457     }
00458 
00459     operator wxPGProperty* ()
00460     {
00461         <span class="keywordflow">return</span> m_ptr;
00462     }
00463 
00464     wxPGProperty&amp; GetProperty ()<span class="keyword"> const </span>{ <span class="keywordflow">return</span> *m_ptr; }
00465     wxPGProperty* GetPropertyPtr ()<span class="keyword"> const </span>{ <span class="keywordflow">return</span> m_ptr; }
00466 <span class="keyword">private</span>:
00467     wxPGProperty* m_ptr;
00468 };
00469 
00470 <span class="preprocessor">#define wxPGIdGen(PTR) wxPGId(PTR)</span>
00471 <span class="preprocessor"></span><span class="preprocessor">#define wxPGIdToPtr(ID) ID.GetPropertyPtr()</span>
00472 <span class="preprocessor"></span><span class="preprocessor">#define wxPGIdIsOk(ID) ID.IsOk()</span>
00473 <span class="preprocessor"></span>
00474 <span class="comment">// -----------------------------------------------------------------------</span>
00475 
00476 WXDLLIMPEXP_PG <span class="keywordtype">void</span> wxPGTypeOperationFailed ( <span class="keyword">const</span> wxPGProperty* p, <span class="keyword">const</span> wxChar* typestr, <span class="keyword">const</span> wxChar* op );
00477 WXDLLIMPEXP_PG <span class="keywordtype">void</span> wxPGGetFailed ( <span class="keyword">const</span> wxPGProperty* p, <span class="keyword">const</span> wxChar* typestr );
00478 
00479 <span class="comment">// -----------------------------------------------------------------------</span>
00480 
00481 <span class="comment">/*</span>
00482 <span class="comment">#define wxPG_CURSOR_FROM_FILE       0xFFFFFE</span>
00483 <span class="comment"></span>
00484 <span class="comment">#define wxPG_CURSOR_FROM_RESOURCE   0xFFFFFF</span>
00485 <span class="comment">*/</span>
00486 
00487 <span class="comment">// -----------------------------------------------------------------------</span>
00488 
00493 <span class="comment">// NOTE: Do not change order of these, and if you add</span>
00494 <span class="comment">//   any, remember also to update gs_property_flag_to_string</span>
00495 <span class="comment">//   in propgrid.cpp.</span>
00496 
<a name="l00499"></a><a class="code" href="group__propflags.htm#ga0">00499</a> <span class="preprocessor">#define wxPG_PROP_MODIFIED          0x0001</span>
00500 <span class="preprocessor"></span>
<a name="l00503"></a><a class="code" href="group__propflags.htm#ga1">00503</a> <span class="preprocessor">#define wxPG_PROP_DISABLED          0x0002</span>
00504 <span class="preprocessor"></span>
00507 <span class="comment">//#define wxPG_PROP_CUSTCOLBG         0x0004</span>
00508 
<a name="l00511"></a><a class="code" href="group__propflags.htm#ga2">00511</a> <span class="preprocessor">#define wxPG_PROP_HIDEABLE          0x0004</span>
00512 <span class="preprocessor"></span>
<a name="l00517"></a><a class="code" href="group__propflags.htm#ga3">00517</a> <span class="preprocessor">#define wxPG_PROP_CUSTOMIMAGE       0x0008</span>
00518 <span class="preprocessor"></span>
<a name="l00522"></a><a class="code" href="group__propflags.htm#ga4">00522</a> <span class="preprocessor">#define wxPG_PROP_NOEDITOR          0x0010</span>
00523 <span class="preprocessor"></span>
<a name="l00526"></a><a class="code" href="group__propflags.htm#ga5">00526</a> <span class="preprocessor">#define wxPG_PROP_UNSPECIFIED       0x0020</span>
00527 <span class="preprocessor"></span>
<a name="l00530"></a><a class="code" href="group__propflags.htm#ga6">00530</a> <span class="preprocessor">#define wxPG_PROP_CLASS_SPECIFIC_1  0x0040</span>
00531 <span class="preprocessor"></span>
<a name="l00534"></a><a class="code" href="group__propflags.htm#ga7">00534</a> <span class="preprocessor">#define wxPG_PROP_CLASS_SPECIFIC_2  0x0080</span>
00535 <span class="preprocessor"></span>
00539 <span class="comment">// -----------------------------------------------------------------------</span>
00540 
<a name="l00550"></a><a class="code" href="group__attrids.htm#ga0">00550</a> <span class="preprocessor">#define wxPG_BOOL_USE_CHECKBOX              64</span>
00551 <span class="preprocessor"></span>
00555 <span class="comment">//#define wxPG_BOOL_USE_DOUBLE_CLICK_CYCLING  65</span>
00556 
<a name="l00561"></a><a class="code" href="group__attrids.htm#ga1">00561</a> <span class="preprocessor">#define wxPG_FLOAT_PRECISION                66</span>
00562 <span class="preprocessor"></span>
<a name="l00565"></a><a class="code" href="group__attrids.htm#ga2">00565</a> <span class="preprocessor">#define wxPG_STRING_PASSWORD                67</span>
00566 <span class="preprocessor"></span>
<a name="l00571"></a><a class="code" href="group__attrids.htm#ga3">00571</a> <span class="preprocessor">#define wxPG_FILE_WILDCARD                  68</span>
00572 <span class="preprocessor"></span>
<a name="l00576"></a><a class="code" href="group__attrids.htm#ga4">00576</a> <span class="preprocessor">#define wxPG_FILE_SHOW_FULL_PATH            69</span>
00577 <span class="preprocessor"></span>
00578 
00579 <span class="preprocessor">#ifdef wxPG_COMPATIBILITY_1_0_0</span>
00580 <span class="preprocessor"></span>
00586 <span class="preprocessor">#define wxPG_CUSTOM_EDITOR                  128</span>
00587 <span class="preprocessor"></span>
00592 <span class="preprocessor">#define wxPG_CUSTOM_IMAGE                   129</span>
00593 <span class="preprocessor"></span>
00597 <span class="preprocessor">#define wxPG_CUSTOM_CALLBACK                130</span>
00598 <span class="preprocessor"></span>
00607 <span class="preprocessor">#define wxPG_CUSTOM_PAINT_CALLBACK          131</span>
00608 <span class="preprocessor"></span>
00609 <span class="preprocessor">#endif // wxPG_COMPATIBILITY_1_0_0</span>
00610 <span class="preprocessor"></span>
00611 
<a name="l00618"></a><a class="code" href="group__attrids.htm#ga5">00618</a> <span class="preprocessor">#define wxPG_CUSTOM_PRIVATE_CHILDREN        132</span>
00619 <span class="preprocessor"></span>
<a name="l00623"></a><a class="code" href="group__attrids.htm#ga6">00623</a> <span class="preprocessor">#define wxPG_USER_ATTRIBUTE                 192</span>
00624 <span class="preprocessor"></span>
00628 <span class="comment">// -----------------------------------------------------------------------</span>
00629 <span class="comment">// Value type.</span>
00630 
00631 <span class="comment">// Value type declarer, with optional declaration part.</span>
00632 <span class="preprocessor">#define WX_PG_DECLARE_VALUE_TYPE_WITH_DECL(VALUETYPE,DECL) \</span>
00633 <span class="preprocessor">    extern DECL const wxPGValueType *wxPGValueType_##VALUETYPE;</span>
00634 <span class="preprocessor"></span>
00635 <span class="comment">// Value type declarer.</span>
00636 <span class="preprocessor">#define WX_PG_DECLARE_VALUE_TYPE(VALUETYPE) \</span>
00637 <span class="preprocessor">    extern const wxPGValueType *wxPGValueType_##VALUETYPE;</span>
00638 <span class="preprocessor"></span>
00639 <span class="comment">// Value type accessor.</span>
00640 <span class="preprocessor">#define wxPG_VALUETYPE(T)       wxPGValueType_##T</span>
00641 <span class="preprocessor"></span>
00642 <span class="comment">// Like wxPG_VALUETYPE, but casts pointer to exact class.</span>
00643 <span class="preprocessor">#define wxPG_VALUETYPE_EXACT(T) ((wxPGValueType##VALUETYPE##Class)wxPGValueType##T)</span>
00644 <span class="preprocessor"></span>
00645 <span class="comment">// Declare builtin value types.</span>
00646 WX_PG_DECLARE_VALUE_TYPE_WITH_DECL(none,WXDLLIMPEXP_PG)
00647 WX_PG_DECLARE_VALUE_TYPE_WITH_DECL(wxString,WXDLLIMPEXP_PG)
00648 WX_PG_DECLARE_VALUE_TYPE_WITH_DECL(<span class="keywordtype">long</span>,WXDLLIMPEXP_PG)
00649 WX_PG_DECLARE_VALUE_TYPE_WITH_DECL(<span class="keywordtype">bool</span>,WXDLLIMPEXP_PG)
00650 WX_PG_DECLARE_VALUE_TYPE_WITH_DECL(<span class="keywordtype">double</span>,WXDLLIMPEXP_PG)
00651 WX_PG_DECLARE_VALUE_TYPE_WITH_DECL(<span class="keywordtype">void</span>,WXDLLIMPEXP_PG)
00652 WX_PG_DECLARE_VALUE_TYPE_WITH_DECL(wxArrayString,WXDLLIMPEXP_PG)
00653 
00654 #define WX_PG_DECLARE_VALUE_TYPE_VDC(VALUETYPE) \
00655 wxVariantData_##VALUETYPE : <span class="keyword">public</span> <a class="code" href="classwxPGVariantDataWxObj.htm">wxPGVariantDataWxObj</a> \
00656 { \
00657     DECLARE_DYNAMIC_CLASS(wxVariantData_##VALUETYPE) \
00658 <span class="keyword">protected</span>: \
00659     VALUETYPE   m_value; \
00660 <span class="keyword">public</span>: \
00661     wxVariantData_##VALUETYPE(); \
00662     wxVariantData_##VALUETYPE(<span class="keyword">const</span> VALUETYPE&amp; value); \
00663     <span class="keyword">virtual</span> <span class="keywordtype">void</span> Copy(wxVariantData&amp; data); \
00664     <span class="keyword">virtual</span> <span class="keywordtype">bool</span> Eq(wxVariantData&amp; data) <span class="keyword">const</span>; \
00665     <span class="keyword">virtual</span> wxString GetType() <span class="keyword">const</span>; \
00666     <span class="keyword">virtual</span> <span class="keywordtype">void</span>* GetValuePtr(); \
00667     <span class="keyword">inline</span> <span class="keyword">const</span> VALUETYPE&amp; GetValue ()<span class="keyword"> const </span>{ <span class="keywordflow">return</span> m_value; }
00668 
00669 <span class="comment">// Value type declarer for void* that need auto-generated .</span>
00670 <span class="preprocessor">#define WX_PG_DECLARE_VALUE_TYPE_VOIDP_WITH_DECL(VALUETYPE,DECL) \</span>
00671 <span class="preprocessor">class DECL WX_PG_DECLARE_VALUE_TYPE_VDC(VALUETYPE) \</span>
00672 <span class="preprocessor">}; \</span>
00673 <span class="preprocessor">extern DECL const wxPGValueType *wxPGValueType_##VALUETYPE;</span>
00674 <span class="preprocessor"></span>
00675 <span class="preprocessor">#define WX_PG_DECLARE_VALUE_TYPE_VOIDP(VALUETYPE) \</span>
00676 <span class="preprocessor">class WX_PG_DECLARE_VALUE_TYPE_VDC(VALUETYPE) \</span>
00677 <span class="preprocessor">}; \</span>
00678 <span class="preprocessor">WX_PG_DECLARE_VALUE_TYPE(VALUETYPE)</span>
00679 <span class="preprocessor"></span>
<a name="l00685"></a><a class="code" href="classwxPGVariantDataWxObj.htm">00685</a> <span class="keyword">class </span>WXDLLIMPEXP_PG wxPGVariantDataWxObj : <span class="keyword">public</span> wxVariantData
00686 {
00687 <span class="keyword">public</span>:
00688 <span class="preprocessor">#if wxUSE_STD_IOSTREAM</span>
00689 <span class="preprocessor"></span>    <span class="keyword">virtual</span> <span class="keywordtype">bool</span> Write(wxSTD ostream&amp; str) <span class="keyword">const</span>;
00690 <span class="preprocessor">#endif</span>
00691 <span class="preprocessor"></span>    <span class="keyword">virtual</span> <span class="keywordtype">bool</span> Write(wxString&amp; str) <span class="keyword">const</span>;
00692 <span class="preprocessor">#if wxUSE_STD_IOSTREAM</span>
00693 <span class="preprocessor"></span>    <span class="keyword">virtual</span> <span class="keywordtype">bool</span> Read(wxSTD istream&amp; str);
00694 <span class="preprocessor">#endif</span>
00695 <span class="preprocessor"></span>    <span class="keyword">virtual</span> <span class="keywordtype">bool</span> Read(wxString&amp; str);
00696 
00697     <span class="keyword">virtual</span> <span class="keywordtype">void</span>* GetValuePtr() = 0;
00698 };
00699 
00700 <span class="comment">// -----------------------------------------------------------------------</span>
00701 <span class="comment">// Editor class.</span>
00702 
00703 <span class="comment">// Editor accessor.</span>
00704 <span class="preprocessor">#define wxPG_EDITOR(T)          wxPGEditor_##T</span>
00705 <span class="preprocessor"></span>
00706 <span class="comment">// Declare editor class, with optional part.</span>
00707 <span class="preprocessor">#define WX_PG_DECLARE_EDITOR_CLASS_WITH_DECL(EDITOR,DECL) \</span>
00708 <span class="preprocessor">extern DECL wxPGEditor* wxPGEditor_##EDITOR; \</span>
00709 <span class="preprocessor">extern DECL wxPGEditor* wxPGConstruct##EDITOR##EditorClass();</span>
00710 <span class="preprocessor"></span>
00711 <span class="comment">// Declare editor class.</span>
00712 <span class="preprocessor">#define WX_PG_DECLARE_EDITOR_CLASS(EDITOR) \</span>
00713 <span class="preprocessor">extern wxPGEditor* wxPGEditor_##EDITOR; \</span>
00714 <span class="preprocessor">extern wxPGEditor* wxPGConstruct##EDITOR##EditorClass();</span>
00715 <span class="preprocessor"></span>
00716 <span class="comment">// Declare builtin editor classes.</span>
00717 WX_PG_DECLARE_EDITOR_CLASS_WITH_DECL(TextCtrl,WXDLLIMPEXP_PG)
00718 WX_PG_DECLARE_EDITOR_CLASS_WITH_DECL(Choice,WXDLLIMPEXP_PG)
00719 WX_PG_DECLARE_EDITOR_CLASS_WITH_DECL(TextCtrlAndButton,WXDLLIMPEXP_PG)
00720 #<span class="keywordflow">if</span> wxPG_INCLUDE_CHECKBOX
00721 WX_PG_DECLARE_EDITOR_CLASS_WITH_DECL(CheckBox,WXDLLIMPEXP_PG)
00722 #endif
00723 WX_PG_DECLARE_EDITOR_CLASS_WITH_DECL(ChoiceAndButton,WXDLLIMPEXP_PG)
00724 
00725 <span class="comment">// -----------------------------------------------------------------------</span>
00726 
00727 
<a name="l00732"></a><a class="code" href="classwxPGValueType.htm">00732</a> <span class="keyword">class </span>WXDLLIMPEXP_PG wxPGValueType
00733 {
00734 <span class="keyword">public</span>:
00735 
00736     <span class="keyword">virtual</span> ~wxPGValueType() = 0;
00737 
00740     <span class="keyword">virtual</span> <span class="keyword">const</span> wxChar* GetTypeName() <span class="keyword">const</span> = 0;
00741 
00746     <span class="keyword">virtual</span> <span class="keyword">const</span> wxChar* GetCustomTypeName() <span class="keyword">const</span>;
00747 
00750     <span class="keyword">virtual</span> wxPGVariant GetDefaultValue () <span class="keyword">const</span> = 0;
00751 
00754     <span class="keyword">virtual</span> wxVariant GenerateVariant ( wxPGVariant value, <span class="keyword">const</span> wxString&amp; name ) <span class="keyword">const</span> = 0;
00755 
00759     <span class="keyword">virtual</span> wxPGProperty* GenerateProperty ( <span class="keyword">const</span> wxString&amp; label, <span class="keyword">const</span> wxString&amp; name ) <span class="keyword">const</span> = 0;
00760 
00763     <span class="keyword">virtual</span> <span class="keywordtype">void</span> SetValueFromVariant ( wxPGProperty* property, wxVariant&amp; value ) <span class="keyword">const</span> = 0;
00764 
<a name="l00767"></a><a class="code" href="classwxPGValueType.htm#wxPGValueTypea4">00767</a>     <span class="keyword">inline</span> <span class="keyword">const</span> wxChar* GetType()<span class="keyword"> const</span>
00768 <span class="keyword">    </span>{
00769         <span class="keywordflow">return</span> GetCustomTypeName();
00770     }
00771 
00772 <span class="keyword">protected</span>:
00773 };
00774 
00775 <span class="comment">// -----------------------------------------------------------------------</span>
00776 
00777 <span class="preprocessor">#if wxPG_USE_VALIDATORS</span>
00778 <span class="preprocessor"></span>
00821 <span class="keyword">class </span>WXDLLIMPEXP_PG wxPropertyValidator
00822 {
00823 <span class="keyword">public</span>:
00824     wxPropertyValidator();
00825     <span class="keyword">virtual</span> ~wxPropertyValidator();
00826 
00829     <span class="keyword">virtual</span> wxPropertyValidator* Clone() <span class="keyword">const</span> = 0;
00830 
00843     <span class="keyword">virtual</span> <span class="keywordtype">bool</span> Validate ( wxPGVariant&amp; value, wxString&amp; showmsg ) <span class="keyword">const</span> = 0;
00844 
00845 <span class="preprocessor">#ifdef __WXDEBUG__</span>
00846 <span class="preprocessor"></span>    <span class="keyword">virtual</span> <span class="keywordtype">void</span> AssertDataType ( <span class="keyword">const</span> wxChar* typestr ) <span class="keyword">const</span>;
00847 <span class="preprocessor">#else</span>
00848 <span class="preprocessor"></span>
00852     <span class="keyword">inline</span> <span class="keywordtype">void</span> AssertDataType ( <span class="keyword">const</span> wxChar* ) { }
00853 <span class="preprocessor">#endif</span>
00854 <span class="preprocessor"></span>
00857     wxPropertyValidator* Ref();
00858 
00861     <span class="keywordtype">bool</span> UnRef();
00862 
00863 <span class="keyword">private</span>:
00864     wxPropertyValidator* m_refObject;
00865     <span class="keywordtype">int</span> m_refCount;
00866 };
00867 
00874 <span class="keyword">class </span>WXDLLIMPEXP_PG wxStringPropertyValidator : <span class="keyword">public</span> wxPropertyValidator
00875 {
00876 <span class="keyword">public</span>:
00880     wxStringPropertyValidator( <span class="keyword">const</span> wxString&amp; excludeList );
00881     <span class="keyword">virtual</span> ~wxStringPropertyValidator();
00882 
00883     <span class="keyword">virtual</span> wxPropertyValidator* Clone() <span class="keyword">const</span>;
00884     <span class="keyword">virtual</span> <span class="keywordtype">bool</span> Validate ( wxPGVariant&amp; value, wxString&amp; showmsg ) <span class="keyword">const</span>;
00885 <span class="preprocessor">#ifdef __WXDEBUG__</span>
00886 <span class="preprocessor"></span>    <span class="keyword">virtual</span> <span class="keywordtype">void</span> AssertDataType ( <span class="keyword">const</span> wxChar* typestr ) <span class="keyword">const</span>;
00887 <span class="preprocessor">#endif</span>
00888 <span class="preprocessor"></span>
00889 <span class="keyword">protected</span>:
00890     wxString m_excludeList;
00891 };
00892 
00898 <span class="keyword">class </span>WXDLLIMPEXP_PG wxIntPropertyValidator : <span class="keyword">public</span> wxPropertyValidator
00899 {
00900 <span class="keyword">public</span>:
00901     wxIntPropertyValidator( <span class="keywordtype">long</span> min, <span class="keywordtype">long</span> max );
00902     <span class="keyword">virtual</span> ~wxIntPropertyValidator();
00903 
00904     <span class="keyword">virtual</span> wxPropertyValidator* Clone() <span class="keyword">const</span>;
00905     <span class="keyword">virtual</span> <span class="keywordtype">bool</span> Validate ( wxPGVariant&amp; value, wxString&amp; showmsg ) <span class="keyword">const</span>;
00906 <span class="preprocessor">#ifdef __WXDEBUG__</span>
00907 <span class="preprocessor"></span>    <span class="keyword">virtual</span> <span class="keywordtype">void</span> AssertDataType ( <span class="keyword">const</span> wxChar* typestr ) <span class="keyword">const</span>;
00908 <span class="preprocessor">#endif</span>
00909 <span class="preprocessor"></span>
00910 <span class="keyword">protected</span>:
00911     <span class="keywordtype">long</span> m_min, m_max;
00912 };
00913 
00919 <span class="keyword">class </span>WXDLLIMPEXP_PG wxFloatPropertyValidator : <span class="keyword">public</span> wxPropertyValidator
00920 {
00921 <span class="keyword">public</span>:
00922     wxFloatPropertyValidator( <span class="keywordtype">double</span> min, <span class="keywordtype">double</span> max );
00923     <span class="keyword">virtual</span> ~wxFloatPropertyValidator();
00924 
00925     <span class="keyword">virtual</span> wxPropertyValidator* Clone() <span class="keyword">const</span>;
00926     <span class="keyword">virtual</span> <span class="keywordtype">bool</span> Validate ( wxPGVariant&amp; value, wxString&amp; showmsg ) <span class="keyword">const</span>;
00927 <span class="preprocessor">#ifdef __WXDEBUG__</span>
00928 <span class="preprocessor"></span>    <span class="keyword">virtual</span> <span class="keywordtype">void</span> AssertDataType ( <span class="keyword">const</span> wxChar* typestr ) <span class="keyword">const</span>;
00929 <span class="preprocessor">#endif</span>
00930 <span class="preprocessor"></span>
00931 <span class="keyword">protected</span>:
00932     <span class="keywordtype">double</span> m_min, m_max;
00933 };
00934 
00935 <span class="preprocessor">#endif</span>
00936 <span class="preprocessor"></span>
00937 <span class="comment">// -----------------------------------------------------------------------</span>
00938 
00939 <span class="keyword">union </span>wxPGVariantUnion
00940 {
00941     <span class="keywordtype">long</span>        m_long;
00942     <span class="keywordtype">void</span>*       m_ptr;
00943     <span class="keywordtype">bool</span>        m_bool;
00944 };
00945 
00946 <span class="comment">// Very simple value wrapper.</span>
00947 <span class="keyword">class </span>wxPGVariant
00948 {
00949 <span class="keyword">public</span>:
00950 
00952     wxPGVariant ()
00953     {
00954         m_v.m_ptr = (<span class="keywordtype">void</span>*)NULL;
00955     }
00956 <span class="preprocessor">#ifndef SWIG</span>
00957 <span class="preprocessor"></span>
00958     wxPGVariant ( <span class="keywordtype">long</span> v_long )
00959     {
00960         m_v.m_long = v_long;
00961     }
00963     wxPGVariant ( <span class="keywordtype">int</span> v_long )
00964     {
00965         m_v.m_long = v_long;
00966     }
00968     wxPGVariant ( <span class="keywordtype">bool</span> value )
00969     {
00970         m_v.m_bool = value;
00971     }
00973     wxPGVariant ( <span class="keyword">const</span> <span class="keywordtype">double</span>&amp; v_ptr )
00974     {
00975         m_v.m_ptr = (<span class="keywordtype">void</span>*)&amp;v_ptr;
00976     }
00978     wxPGVariant ( <span class="keyword">const</span> wxString&amp; v_ptr )
00979     {
00980         m_v.m_ptr = (<span class="keywordtype">void</span>*)&amp;v_ptr;
00981     }
00983     wxPGVariant ( <span class="keyword">const</span> wxArrayString&amp; v_ptr )
00984     {
00985         m_v.m_ptr = (<span class="keywordtype">void</span>*)&amp;v_ptr;
00986     }
00988     wxPGVariant ( <span class="keyword">const</span> wxObject&amp; v_ptr )
00989     {
00990         m_v.m_ptr = (<span class="keywordtype">void</span>*)&amp;v_ptr;
00991     }
00993     wxPGVariant ( <span class="keyword">const</span> wxObject* v_ptr )
00994     {
00995         m_v.m_ptr = (<span class="keywordtype">void</span>*)v_ptr;
00996     }
00998     wxPGVariant ( <span class="keywordtype">void</span>* v_ptr )
00999     {
01000         m_v.m_ptr = v_ptr;
01001     }
01002 
01004     <span class="keyword">inline</span> <span class="keywordtype">long</span> GetLong ()<span class="keyword"> const</span>
01005 <span class="keyword">    </span>{
01006         <span class="keywordflow">return</span> m_v.m_long;
01007     }
01009     <span class="keyword">inline</span> <span class="keywordtype">bool</span> GetBool ()<span class="keyword"> const</span>
01010 <span class="keyword">    </span>{
01011         <span class="keywordflow">return</span> m_v.m_bool;
01012     }
01014     <span class="keyword">inline</span> <span class="keywordtype">double</span> GetDouble ()<span class="keyword"> const</span>
01015 <span class="keyword">    </span>{
01016         <span class="keywordflow">return</span> *((<span class="keywordtype">double</span>*)m_v.m_ptr);
01017     }
01019     <span class="keyword">inline</span> <span class="keywordtype">double</span>* GetDoublePtr ()<span class="keyword"> const</span>
01020 <span class="keyword">    </span>{
01021         <span class="keywordflow">return</span> (<span class="keywordtype">double</span>*) m_v.m_ptr;
01022     }
01024     <span class="keyword">inline</span> <span class="keyword">const</span> wxString&amp; GetString ()<span class="keyword"> const</span>
01025 <span class="keyword">    </span>{
01026         <span class="keywordflow">return</span> *((<span class="keyword">const</span> wxString*)m_v.m_ptr);
01027     }
01029     <span class="keyword">inline</span> wxArrayString&amp; GetArrayString ()<span class="keyword"> const</span>
01030 <span class="keyword">    </span>{
01031         wxArrayString* temp = (wxArrayString*)m_v.m_ptr;
01032         <span class="keywordflow">return</span> *temp;
01033     }
01034 
01035     <span class="keyword">inline</span> <span class="keyword">const</span> wxObject&amp; GetWxObject()<span class="keyword"> const</span>
01036 <span class="keyword">    </span>{
01037         <span class="keywordflow">return</span> *((<span class="keyword">const</span> wxObject*)m_v.m_ptr);
01038     }
01039 
01040     <span class="keyword">inline</span> wxObject* GetWxObjectPtr()<span class="keyword"> const</span>
01041 <span class="keyword">    </span>{
01042         <span class="keywordflow">return</span> (wxObject*)m_v.m_ptr;
01043     }
01044 
01046     <span class="keyword">inline</span> <span class="keywordtype">void</span>* GetVoidPtr ()<span class="keyword"> const</span>
01047 <span class="keyword">    </span>{
01048         <span class="keywordflow">return</span> m_v.m_ptr;
01049     }
01050 <span class="preprocessor">#endif</span>
01051 <span class="preprocessor"></span>
01053     <span class="keyword">inline</span> <span class="keywordtype">long</span> GetRawLong ()<span class="keyword"> const </span>{ <span class="keywordflow">return</span> m_v.m_long; }
01054 
01056     <span class="keyword">inline</span> <span class="keywordtype">void</span>* GetRawPtr ()<span class="keyword"> const </span>{ <span class="keywordflow">return</span> m_v.m_ptr; }
01057 
01058 <span class="preprocessor">#undef wxPG_ASSERT_VARIANT_GET</span>
01059 <span class="preprocessor"></span>
01061     wxPGVariantUnion          m_v;
01062 };
01063 
01064 <span class="preprocessor">#define wxPGVariantToString(A)      A.GetString()</span>
01065 <span class="preprocessor"></span><span class="preprocessor">#define wxPGVariantToLong(A)        A.GetLong()</span>
01066 <span class="preprocessor"></span><span class="preprocessor">#define wxPGVariantToBool(A)        A.GetBool()</span>
01067 <span class="preprocessor"></span><span class="preprocessor">#define wxPGVariantToDouble(A)      A.GetDouble()</span>
01068 <span class="preprocessor"></span><span class="preprocessor">#define wxPGVariantToArrayString(A) A.GetArrayString()</span>
01069 <span class="preprocessor"></span><span class="preprocessor">#define wxPGVariantToWxObject(A)        A.GetWxObject()</span>
01070 <span class="preprocessor"></span><span class="preprocessor">#define wxPGVariantToWxObjectPtr(A,B)   wxDynamicCast((wxObject*)A.GetRawPtr(),B);</span>
01071 <span class="preprocessor"></span><span class="preprocessor">#define wxPGVariantToVoidPtr(A)     A.GetVoidPtr()</span>
01072 <span class="preprocessor"></span>
01073 <span class="preprocessor">#define wxPGVariantFromString(A)        A</span>
01074 <span class="preprocessor"></span><span class="preprocessor">#define wxPGVariantFromLong(A)          A</span>
01075 <span class="preprocessor"></span><span class="preprocessor">#define wxPGVariantFromDouble(A)        A</span>
01076 <span class="preprocessor"></span><span class="preprocessor">#define wxPGVariantFromArrayString(A)   A</span>
01077 <span class="preprocessor"></span><span class="preprocessor">#define wxPGVariantFromBool(A)          A</span>
01078 <span class="preprocessor"></span><span class="preprocessor">#define wxPGVariantFromWxObject(A)      *((const wxObject*)A)</span>
01079 <span class="preprocessor"></span>
01080 <span class="comment">// -----------------------------------------------------------------------</span>
01081 
01082 <span class="comment">//</span>
01083 <span class="comment">// Property class declaration helper macros</span>
01084 <span class="comment">// (wxPGRootPropertyClass and wxPropertyCategory require this).</span>
01085 <span class="comment">//</span>
01086 
01087 <span class="preprocessor">#define WX_PG_DECLARE_PROPERTY_CLASS() \</span>
01088 <span class="preprocessor">public: \</span>
01089 <span class="preprocessor">    virtual const wxPGValueType* GetValueType () const; \</span>
01090 <span class="preprocessor">    virtual const wxPGEditor* DoGetEditorClass () const; \</span>
01091 <span class="preprocessor">    WX_PG_DECLARE_GETCLASSNAME() \</span>
01092 <span class="preprocessor">    WX_PG_DECLARE_GETCLASSINFO() \</span>
01093 <span class="preprocessor">private:</span>
01094 <span class="preprocessor"></span>
01095 <span class="comment">// -----------------------------------------------------------------------</span>
01096 <span class="comment">// wxPGPropertyClassInfo</span>
01097 
01098 
01099 <span class="keyword">typedef</span> wxPGProperty* (*wxPGPropertyConstructor) (<span class="keyword">const</span> wxString&amp;,<span class="keyword">const</span> wxString&amp;);
01100 
<a name="l01106"></a><a class="code" href="structwxPGPropertyClassInfo.htm">01106</a> <span class="keyword">struct </span><a class="code" href="structwxPGPropertyClassInfo.htm">wxPGPropertyClassInfo</a>
01107 {
<a name="l01109"></a><a class="code" href="structwxPGPropertyClassInfo.htm#wxPGPropertyClassInfoo2">01109</a>     <span class="keyword">const</span> wxChar*                   <a class="code" href="structwxPGPropertyClassInfo.htm#wxPGPropertyClassInfoo2">m_name</a>;
01110 
<a name="l01112"></a><a class="code" href="structwxPGPropertyClassInfo.htm#wxPGPropertyClassInfoo0">01112</a>     <span class="keyword">const</span> <a class="code" href="structwxPGPropertyClassInfo.htm">wxPGPropertyClassInfo</a>*    <a class="code" href="structwxPGPropertyClassInfo.htm#wxPGPropertyClassInfoo0">m_baseInfo</a>;
01113 
<a name="l01115"></a><a class="code" href="structwxPGPropertyClassInfo.htm#wxPGPropertyClassInfoo1">01115</a>     wxPGPropertyConstructor         <a class="code" href="structwxPGPropertyClassInfo.htm#wxPGPropertyClassInfoo1">m_constructor</a>;
01116 };
01117 
01118 
01119 <span class="comment">// Use this macro to register your custom property classes.</span>
01120 <span class="preprocessor">#define wxPGRegisterPropertyClass(NAME) \</span>
01121 <span class="preprocessor">    wxPropertyGrid::RegisterPropertyClass(wxT(#NAME),&amp;NAME##ClassInfo)</span>
01122 <span class="preprocessor"></span>
01123 
01124 <span class="comment">// -----------------------------------------------------------------------</span>
01125 
01126 
01127 <span class="comment">// Structure for relaying choice/list info.</span>
01128 <span class="keyword">struct </span>wxPGChoiceInfo
01129 {
01130     <span class="keyword">const</span> wxChar**  m_arrWxChars;
01131     wxString*       m_arrWxString;
01132     wxPGChoices** m_choices;
01133     <span class="keywordtype">int</span>             m_itemCount;
01134 };
01135 
01136 
01137 <span class="comment">// -----------------------------------------------------------------------</span>
01138 
01139 
<a name="l01144"></a><a class="code" href="classwxPGPropertyDataExt.htm">01144</a> <span class="keyword">class </span>WXDLLIMPEXP_PG wxPGPropertyDataExt
01145 {
01146 <span class="keyword">public</span>:
01147 
01148     wxPGPropertyDataExt()
01149     {
01150 <span class="preprocessor">#if wxUSE_VALIDATORS</span>
01151 <span class="preprocessor"></span>        m_validator = (wxValidator*) NULL;
01152 <span class="preprocessor">#endif</span>
01153 <span class="preprocessor"></span>        m_customEditor = (wxPGEditor*) NULL;
01154         m_valueBitmap = (wxBitmap*) NULL;
01155     }
01156 
01157     ~wxPGPropertyDataExt()
01158     {
01159         <span class="comment">// Do not delete m_customEditor</span>
01160 <span class="preprocessor">#if wxUSE_VALIDATORS</span>
01161 <span class="preprocessor"></span>        <span class="keyword">delete</span> m_validator;
01162 <span class="preprocessor">#endif</span>
01163 <span class="preprocessor"></span>        <span class="keyword">delete</span> m_valueBitmap;
01164     }
01165 
01166     <span class="comment">// For conviency, declare all members public.</span>
01167 
01168     wxString                    m_helpString; <span class="comment">// Help shown in statusbar or help box.</span>
01169 <span class="comment">/*#if wxPG_USE_VALIDATORS</span>
01170 <span class="comment">    wxPropertyValidator*        m_validator;</span>
01171 <span class="comment">#endif*/</span>
01172     <span class="keyword">const</span> wxPGEditor*           m_customEditor; <span class="comment">// Overrides editor returned by</span>
01173 
01174 <span class="preprocessor">#if wxUSE_VALIDATORS</span>
01175 <span class="preprocessor"></span>    <span class="comment">// NOTE: This is candidate for hash mapping.</span>
01176     wxValidator*                m_validator; <span class="comment">// Editor is going to get this validator</span>
01177 <span class="preprocessor">#endif</span>
01178 <span class="preprocessor"></span>
01179     wxBitmap*                   m_valueBitmap; <span class="comment">// Show this in front of the value</span>
01180 
01181 };
01182 
01183 
01184 <span class="comment">// -----------------------------------------------------------------------</span>
01185 
01197 <span class="preprocessor">#if wxPG_INCLUDE_WXOBJECT</span>
01198 <span class="preprocessor"></span><span class="keyword">class </span>WXDLLIMPEXP_PG wxPGProperty : <span class="keyword">public</span> wxObject
01199 #else
<a name="l01200"></a><a class="code" href="classwxPGProperty.htm">01200</a> class WXDLLIMPEXP_PG wxPGProperty
01201 #endif
01202 {
01203     <span class="keyword">friend</span> <span class="keyword">class </span>wxPGPropertyWithChildren;
01204     <span class="keyword">friend</span> <span class="keyword">class </span>wxPropertyGrid;
01205     <span class="keyword">friend</span> <span class="keyword">class </span>wxPropertyGridState;
01206     <span class="comment">//_WX_PG_DECLARE_PROPERTY_CLASS(wxPGProperty)</span>
01207 <span class="keyword">public</span>:
01208 
01211     <a class="code" href="classwxPGProperty.htm#wxPGPropertya56">wxPGProperty</a>();
01212 
01239     <a class="code" href="classwxPGProperty.htm#wxPGPropertya56">wxPGProperty</a>( <span class="keyword">const</span> wxString&amp; label, <span class="keyword">const</span> wxString&amp; name );
01240 
01242     <span class="keyword">virtual</span> <a class="code" href="classwxPGProperty.htm#wxPGPropertya57">~wxPGProperty</a>();
01243 
01278     <span class="keyword">virtual</span> <span class="keywordtype">void</span> <a class="code" href="classwxPGProperty.htm#wxPropertyCategoryClassa8">DoSetValue</a> ( wxPGVariant value );
01279 
01282     <span class="keyword">virtual</span> wxPGVariant <a class="code" href="classwxPGProperty.htm#wxPropertyCategoryClassa6">DoGetValue</a> () <span class="keyword">const</span>;
01283 
01286     <span class="keyword">inline</span> wxVariant <a class="code" href="classwxPGProperty.htm#wxPropertyCategoryClassa37">GetValueAsVariant</a> () <span class="keyword">const</span>;
01287 
01293     <span class="keyword">virtual</span> wxString <a class="code" href="classwxPGProperty.htm#wxPGPropertya28">GetValueAsString</a> ( <span class="keywordtype">int</span> arg_flags ) <span class="keyword">const</span>;
01294 
01304     <span class="keyword">virtual</span> <span class="keywordtype">bool</span> <a class="code" href="classwxPGProperty.htm#wxPGPropertya50">SetValueFromString</a> ( <span class="keyword">const</span> wxString&amp; text, <span class="keywordtype">int</span> flags );
01305 
01315     <span class="keyword">virtual</span> <span class="keywordtype">bool</span> <a class="code" href="classwxPGProperty.htm#wxPropertyCategoryClassa63">SetValueFromInt</a> ( <span class="keywordtype">long</span> value, <span class="keywordtype">int</span> flags );
01316 
01321     <span class="keyword">virtual</span> wxSize <a class="code" href="classwxPGProperty.htm#wxPropertyCategoryClassa26">GetImageSize</a>() <span class="keyword">const</span>;
01322 
01341     <span class="keyword">virtual</span> <span class="keywordtype">bool</span> <a class="code" href="classwxPGProperty.htm#wxPropertyCategoryClassa51">OnEvent</a> ( wxPropertyGrid* propgrid, wxPGCtrlClass* wnd_primary, wxEvent&amp; event );
01342 
01343 <span class="preprocessor">#if wxPG_INCLUDE_WXOBJECT</span>
01344 <span class="preprocessor"></span>    <span class="keyword">inline</span> <span class="keyword">const</span> wxChar* <a class="code" href="classwxPGProperty.htm#wxPropertyCategoryClassa16">GetClassName</a> ()<span class="keyword"> const</span>
01345 <span class="keyword">    </span>{
01346         <span class="keywordflow">return</span> <a class="code" href="classwxPGProperty.htm#wxPropertyCategoryClassa15">GetClassInfo</a>()-&gt;GetClassName();
01347     }
01348 <span class="preprocessor">#else</span>
01349 <span class="preprocessor"></span>
01352     <span class="keyword">virtual</span> <span class="keyword">const</span> wxChar* <a class="code" href="classwxPGProperty.htm#wxPropertyCategoryClassa16">GetClassName</a> () <span class="keyword">const</span> = 0;
01353 <span class="preprocessor">#endif</span>
01354 <span class="preprocessor"></span>
01366     <span class="keyword">virtual</span> <span class="keyword">const</span> wxPGValueType* <a class="code" href="classwxPGProperty.htm#wxPropertyCategoryClassa39">GetValueType</a> () <span class="keyword">const</span> = 0;
01367 
01370     <span class="keyword">virtual</span> <span class="keyword">const</span> wxPGEditor* <a class="code" href="classwxPGProperty.htm#wxPropertyCategoryClassa5">DoGetEditorClass</a> () <span class="keyword">const</span>;
01371 
01377     <span class="comment">//virtual int GetParentingType() const;</span>
<a name="l01378"></a><a class="code" href="classwxPGProperty.htm#wxPropertyCategoryClassa32">01378</a>     <span class="keyword">inline</span> <span class="keywordtype">signed</span> <span class="keywordtype">char</span> <a class="code" href="classwxPGProperty.htm#wxPropertyCategoryClassa32">GetParentingType</a>()<span class="keyword"> const </span>{ <span class="keywordflow">return</span> m_parentingType; }
01379 
01391     <span class="keyword">virtual</span> <span class="keywordtype">int</span> <a class="code" href="classwxPGProperty.htm#wxPropertyCategoryClassa14">GetChoiceInfo</a> ( wxPGChoiceInfo* choiceinfo );
01392 
01427     <span class="keyword">virtual</span> <span class="keywordtype">void</span> <a class="code" href="classwxPGProperty.htm#wxPropertyCategoryClassa50">OnCustomPaint</a> ( wxDC&amp; dc,
01428         <span class="keyword">const</span> wxRect&amp; rect, <a class="code" href="structwxPGPaintData.htm">wxPGPaintData</a>&amp; paintdata );
01429 
01438     <span class="keyword">virtual</span> <span class="keywordtype">void</span> <a class="code" href="classwxPGProperty.htm#wxPropertyCategoryClassa55">SetAttribute</a> ( <span class="keywordtype">int</span> <span class="keywordtype">id</span>, wxVariant&amp; value );
01439 
01440 <span class="preprocessor">#if !wxPG_INCLUDE_WXOBJECT</span>
01441 <span class="preprocessor"></span>
01443     <span class="keyword">virtual</span> <span class="keyword">const</span> <a class="code" href="structwxPGPropertyClassInfo.htm">wxPGPropertyClassInfo</a>* <a class="code" href="classwxPGProperty.htm#wxPropertyCategoryClassa15">GetClassInfo</a>() <span class="keyword">const</span> = 0;
01444 <span class="preprocessor">#endif</span>
01445 <span class="preprocessor"></span>
<a name="l01447"></a><a class="code" href="classwxPGProperty.htm#wxPropertyCategoryClassa29">01447</a>     <span class="keyword">inline</span> <span class="keyword">const</span> wxString&amp; <a class="code" href="classwxPGProperty.htm#wxPropertyCategoryClassa29">GetLabel</a>()<span class="keyword"> const </span>{ <span class="keywordflow">return</span> m_label; }
01448 
01450     wxPropertyGridState* <a class="code" href="classwxPGProperty.htm#wxPGPropertya26">GetParentState</a>() <span class="keyword">const</span>;
01451 
<a name="l01453"></a><a class="code" href="classwxPGProperty.htm#wxPropertyCategoryClassa30">01453</a>     <span class="keyword">inline</span> <span class="keyword">const</span> wxString&amp; <a class="code" href="classwxPGProperty.htm#wxPropertyCategoryClassa30">GetName</a>()<span class="keyword"> const </span>{ <span class="keywordflow">return</span> m_name; }
01454     <span class="keyword">inline</span> <span class="keywordtype">void</span> DoSetName(<span class="keyword">const</span> wxString&amp; str) { m_name = str; }
01455 
01459     <span class="keywordtype">bool</span> <a class="code" href="classwxPGProperty.htm#wxPropertyCategoryClassa10">EnsureDataExt</a> ();
01460 
<a name="l01465"></a><a class="code" href="classwxPGProperty.htm#wxPropertyCategoryClassa40">01465</a>     <span class="keyword">inline</span> <span class="keywordtype">int</span> <a class="code" href="classwxPGProperty.htm#wxPropertyCategoryClassa40">GetY</a>()<span class="keyword"> const </span>{ <span class="keywordflow">return</span> m_y; }
01466 
01467     <span class="keywordtype">void</span> UpdateControl ( wxPGCtrlClass* primary );
01468 
01469     <span class="keyword">inline</span> wxString GetDisplayedString ()<span class="keyword"> const</span>
01470 <span class="keyword">    </span>{
01471         <span class="keywordflow">return</span> <a class="code" href="classwxPGProperty.htm#wxPGPropertya28">GetValueAsString</a>(0);
01472     }
01473 
<a name="l01475"></a><a class="code" href="classwxPGProperty.htm#wxPropertyCategoryClassa25">01475</a>     <span class="keyword">inline</span> wxPGId <a class="code" href="classwxPGProperty.htm#wxPropertyCategoryClassa25">GetId</a>() { <span class="keywordflow">return</span> wxPGIdGen(<span class="keyword">this</span>); }
01476 
01478     <span class="keyword">inline</span> wxPropertyGrid* <a class="code" href="classwxPGProperty.htm#wxPropertyCategoryClassa23">GetGrid</a>() <span class="keyword">const</span>;
01479 
<a name="l01481"></a><a class="code" href="classwxPGProperty.htm#wxPropertyCategoryClassa31">01481</a>     <span class="keyword">inline</span> wxPGPropertyWithChildren* <a class="code" href="classwxPGProperty.htm#wxPropertyCategoryClassa31">GetParent</a>()<span class="keyword"> const </span>{ <span class="keywordflow">return</span> m_parent; }
01482 
<a name="l01486"></a><a class="code" href="classwxPGProperty.htm#wxPropertyCategoryClassa45">01486</a>     <span class="keyword">inline</span> <span class="keywordtype">bool</span> <a class="code" href="classwxPGProperty.htm#wxPropertyCategoryClassa45">IsOk</a>()<span class="keyword"> const</span>
01487 <span class="keyword">    </span>{
01488         <span class="keywordflow">return</span> (( m_y &gt;= -1 )?TRUE:FALSE);
01489     }
01490 
01491     <span class="keyword">inline</span> <span class="keywordtype">bool</span> IsFlagSet( <span class="keywordtype">unsigned</span> <span class="keywordtype">char</span> flag )<span class="keyword"> const</span>
01492 <span class="keyword">    </span>{
01493         <span class="keywordflow">return</span> ( m_flags &amp; flag ) ? TRUE : FALSE;
01494     }
01495 
<a name="l01499"></a><a class="code" href="classwxPGProperty.htm#wxPropertyCategoryClassa2">01499</a>     <span class="keyword">inline</span> <span class="keywordtype">bool</span> <a class="code" href="classwxPGProperty.htm#wxPropertyCategoryClassa2">CanHaveExtraChildren</a>()<span class="keyword"> const</span>
01500 <span class="keyword">    </span>{
01501         <span class="keywordflow">return</span> ( m_parentingType == 1 || m_parentingType == -2 );
01502     }
01503 
<a name="l01505"></a><a class="code" href="classwxPGProperty.htm#wxPropertyCategoryClassa18">01505</a>     <span class="keyword">inline</span> wxPGPropertyDataExt* <a class="code" href="classwxPGProperty.htm#wxPropertyCategoryClassa18">GetDataExt</a>() { <span class="keywordflow">return</span> m_dataExt; }
01506 
01507     <span class="keyword">inline</span> <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> GetFlags()<span class="keyword"> const</span>
01508 <span class="keyword">    </span>{
01509         <span class="keywordflow">return</span> (<span class="keywordtype">unsigned</span> <span class="keywordtype">int</span>)m_flags;
01510     }
01511 
01512     <span class="keyword">const</span> wxPGEditor* GetEditorClass () <span class="keyword">const</span>;
01513 
<a name="l01517"></a><a class="code" href="classwxPGProperty.htm#wxPropertyCategoryClassa35">01517</a>     <span class="keyword">inline</span> <span class="keyword">const</span> wxChar* <a class="code" href="classwxPGProperty.htm#wxPropertyCategoryClassa35">GetType</a>()<span class="keyword"> const</span>
01518 <span class="keyword">    </span>{
01519         <span class="keywordflow">return</span> <a class="code" href="classwxPGProperty.htm#wxPropertyCategoryClassa39">GetValueType</a>()-&gt;<a class="code" href="classwxPGValueType.htm#wxPGValueTypea4">GetType</a>();
01520     }
01521 
01522     <span class="keywordtype">bool</span> IsKindOf( <a class="code" href="structwxPGPropertyClassInfo.htm">wxPGPropertyClassInfo</a>&amp; info );
01523 
<a name="l01525"></a><a class="code" href="classwxPGProperty.htm#wxPropertyCategoryClassa47">01525</a>     <span class="keyword">inline</span> <span class="keywordtype">bool</span> <a class="code" href="classwxPGProperty.htm#wxPropertyCategoryClassa47">IsSubProperty</a>()<span class="keyword"> const</span>
01526 <span class="keyword">    </span>{
01527         wxPGProperty* parent = (wxPGProperty*)m_parent;
01528         <span class="keywordflow">if</span> ( parent &amp;&amp; parent-&gt;<a class="code" href="classwxPGProperty.htm#wxPropertyCategoryClassa32">GetParentingType</a>() &lt; 0 &amp;&amp; parent-&gt;<a class="code" href="classwxPGProperty.htm#wxPropertyCategoryClassp14">m_y</a> &gt; -2 )
01529             <span class="keywordflow">return</span> TRUE;
01530         <span class="keywordflow">return</span> FALSE;
01531     }
01532 
01533     <span class="keyword">inline</span> wxBitmap* GetValueImage ()<span class="keyword"> const</span>
01534 <span class="keyword">    </span>{
01535         <span class="keywordflow">if</span> ( m_dataExt )
01536             <span class="keywordflow">return</span> m_dataExt-&gt;m_valueBitmap;
01537         <span class="keywordflow">return</span> (wxBitmap*) NULL;
01538     }
01539 
01541     size_t <a class="code" href="classwxPGProperty.htm#wxPropertyCategoryClassa13">GetChildCount</a>() <span class="keyword">const</span>;
01542 
01543     <span class="keyword">inline</span> <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> GetArrIndex()<span class="keyword"> const </span>{ <span class="keywordflow">return</span> m_arrIndex; }
01544 
01545     <span class="keyword">inline</span> <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> GetDepth()<span class="keyword"> const </span>{ <span class="keywordflow">return</span> (<span class="keywordtype">unsigned</span> <span class="keywordtype">int</span>)m_depth; }
01546 
<a name="l01548"></a><a class="code" href="classwxPGProperty.htm#wxPropertyCategoryClassa27">01548</a>     <span class="keyword">inline</span> <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> <a class="code" href="classwxPGProperty.htm#wxPropertyCategoryClassa27">GetIndexInParent</a>()<span class="keyword"> const</span>
01549 <span class="keyword">    </span>{
01550         <span class="keywordflow">return</span> (<span class="keywordtype">unsigned</span> <span class="keywordtype">int</span>)m_arrIndex;
01551     }
01552 
01556     <span class="keywordtype">bool</span> <a class="code" href="classwxPGProperty.htm#wxPropertyCategoryClassa53">RecreateEditor</a>();
01557 
<a name="l01559"></a><a class="code" href="classwxPGProperty.htm#wxPropertyCategoryClassa58">01559</a>     <span class="keyword">inline</span> <span class="keywordtype">void</span> <a class="code" href="classwxPGProperty.htm#wxPropertyCategoryClassa58">SetEditor</a>( <span class="keyword">const</span> wxPGEditor* editor )
01560     {
01561         <a class="code" href="classwxPGProperty.htm#wxPropertyCategoryClassa10">EnsureDataExt</a>();
01562         m_dataExt-&gt;m_customEditor = editor;
01563     }
01564 
01568     <span class="keywordtype">void</span> <a class="code" href="classwxPGProperty.htm#wxPropertyCategoryClassa65">SetValueImage</a> ( wxBitmap&amp; bmp );
01569 
01573     <span class="keywordtype">void</span> <a class="code" href="classwxPGProperty.htm#wxPropertyCategoryClassa57">SetChoicesExclusive</a>();
01574 
01575     <span class="keyword">inline</span> <span class="keywordtype">void</span> SetFlag( <span class="keywordtype">unsigned</span> <span class="keywordtype">char</span> flag ) { m_flags |= flag; }
01576 
01577     <span class="keyword">inline</span> <span class="keywordtype">void</span> SetHelpString ( <span class="keyword">const</span> wxString&amp; help_string )
01578     {
01579         <a class="code" href="classwxPGProperty.htm#wxPropertyCategoryClassa10">EnsureDataExt</a>();
01580         m_dataExt-&gt;m_helpString = help_string;
01581     }
01582 
01583     <span class="keyword">inline</span> <span class="keywordtype">void</span> SetLabel( <span class="keyword">const</span> wxString&amp; label ) { m_label = label; }
01584 
01585 <span class="preprocessor">#if wxUSE_VALIDATORS</span>
01586 <span class="preprocessor"></span>
01587     <span class="keyword">inline</span> <span class="keywordtype">void</span> SetValidator ( wxValidator&amp; validator )
01588     {
01589         <a class="code" href="classwxPGProperty.htm#wxPropertyCategoryClassa10">EnsureDataExt</a>();
01590         m_dataExt-&gt;m_validator = wxDynamicCast(validator.Clone(),wxValidator);
01591     }
01592 
01594     <span class="keyword">inline</span> wxValidator* GetValidator ()<span class="keyword"> const</span>
01595 <span class="keyword">    </span>{
01596         <span class="keywordflow">if</span> ( m_dataExt )
01597             <span class="keywordflow">return</span> m_dataExt-&gt;m_validator;
01598         <span class="keywordflow">return</span> (wxValidator*) NULL;
01599     }
01600 <span class="preprocessor">#endif</span>
01601 <span class="preprocessor"></span>
01602 <span class="preprocessor">#if wxPG_USE_VALIDATORS</span>
01603 <span class="preprocessor"></span>
01604     <span class="comment">//void SetValidator ( wxPropertyValidator&amp; validator );</span>
01605 
01607     <span class="comment">//wxPropertyValidator&amp; GetValidator () const;</span>
01608 
01612     <span class="keywordtype">bool</span> StdValidationProcedure( wxPGVariant value );
01613 
01614 <span class="preprocessor">#else</span>
01615 <span class="preprocessor"></span>
01616     <span class="keyword">inline</span> <span class="keywordtype">bool</span> StdValidationProcedure( wxPGVariant value )
01617     {
01618         <a class="code" href="classwxPGProperty.htm#wxPropertyCategoryClassa8">DoSetValue</a>( value );
01619         <span class="keywordflow">return</span> TRUE;
01620     }
01621 
01622 <span class="preprocessor">#endif</span>
01623 <span class="preprocessor"></span>
01639     <span class="keywordtype">bool</span> <a class="code" href="classwxPGProperty.htm#wxPropertyCategoryClassa52">PrepareValueForDialogEditing</a>( wxPropertyGrid* propgrid );
01640 
01641 <span class="preprocessor">#if wxPG_USE_CLIENT_DATA</span>
01642 <span class="preprocessor"></span>    <span class="keyword">inline</span> <span class="keywordtype">void</span>* GetClientData ()<span class="keyword"> const </span>{ <span class="keywordflow">return</span> m_clientData; }
01643     <span class="keyword">inline</span> <span class="keywordtype">void</span> SetDataData ( <span class="keywordtype">void</span>* clientData ) { m_clientData = clientData; }
01644 <span class="preprocessor">#endif</span>
01645 <span class="preprocessor"></span>
01650     size_t <a class="code" href="classwxPGProperty.htm#wxPropertyCategoryClassa56">SetChoices</a>(size_t <span class="keywordtype">id</span>,
01651                       <span class="keyword">const</span> wxArrayString&amp; labels = *((<span class="keyword">const</span> wxArrayString*)NULL),
01652                       <span class="keyword">const</span> wxArrayInt&amp; values = *((<span class="keyword">const</span> wxArrayInt*)NULL));
01653 
01654     <span class="keyword">inline</span> wxString GetHelpString ()<span class="keyword"> const</span>
01655 <span class="keyword">    </span>{
01656         <span class="keywordflow">if</span> (m_dataExt)
01657             <span class="keywordflow">return</span> m_dataExt-&gt;m_helpString;
01658         <span class="keywordflow">return</span> wxEmptyString;
01659     }
01660 
01661     <span class="keyword">inline</span> <span class="keywordtype">void</span> ClearFlag( <span class="keywordtype">unsigned</span> <span class="keywordtype">char</span> flag ) { m_flags &amp;= ~(flag); }
01662 
01663     <span class="comment">// Use, for example, to detect if item is inside collapsed section.</span>
01664     <span class="keywordtype">bool</span> IsSomeParent ( wxPGProperty* candidate_parent ) <span class="keyword">const</span>;
01665 
01666     <span class="comment">// Shows error as a tooltip or something similar (depends on platform).</span>
01667     <span class="keywordtype">void</span> ShowError ( <span class="keyword">const</span> wxString&amp; msg );
01668 
01669 <span class="keyword">protected</span>:
01670 
01671     <span class="comment">// Called in constructors.</span>
01672     <span class="keywordtype">void</span> Init ();
01673 
01674     wxString                    m_label;
01675     wxString                    m_name;
01676     wxPGPropertyWithChildren*   m_parent;
01677 <span class="preprocessor">#if wxPG_USE_CLIENT_DATA</span>
01678 <span class="preprocessor"></span>    <span class="keywordtype">void</span>*                       m_clientData;
01679 <span class="preprocessor">#endif</span>
01680 <span class="preprocessor"></span>    wxPGPropertyDataExt*        m_dataExt; <span class="comment">// Optional data extension.</span>
01681     <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span>                m_arrIndex; <span class="comment">// Index in parent.</span>
01682     <span class="keywordtype">int</span>                         m_y; <span class="comment">// This could be short int.</span>
01683     <span class="keywordtype">unsigned</span> <span class="keywordtype">char</span>               m_flags; <span class="comment">// This could be short int.</span>
01684 
01685     <span class="comment">// 1 = category</span>
01686     <span class="comment">// 0 = no children</span>
01687     <span class="comment">// -1 = has fixed-set of sub-properties</span>
01688     <span class="comment">// -2 = this is wxCustomProperty (sub-properties can be added)</span>
01689     <span class="keywordtype">signed</span> <span class="keywordtype">char</span>                 m_parentingType;
01690 
01691     <span class="keywordtype">unsigned</span> <span class="keywordtype">char</span>               m_depth; <span class="comment">// Root has 0, categories etc. at that level 1, etc.</span>
01692 
01693     <span class="comment">// m_depthBgCol indicates width of background colour between margin and item</span>
01694     <span class="comment">// (essentially this is category's depth, if none then equals m_depth).</span>
01695     <span class="keywordtype">unsigned</span> <span class="keywordtype">char</span>               m_depthBgCol;
01696 
01697     <span class="keywordtype">unsigned</span> <span class="keywordtype">char</span>               m_bgColIndex; <span class="comment">// Cell background brush index.</span>
01698 
01699 };
01700 
01701 <span class="keyword">extern</span> WXDLLIMPEXP_PG <a class="code" href="structwxPGPropertyClassInfo.htm">wxPGPropertyClassInfo</a> wxBasePropertyClassInfo;
01702 
01703 <span class="comment">//</span>
01704 <span class="comment">// wxPGId comparison operators.</span>
01705 <span class="comment">// TODO: Are these really used?</span>
01706 <span class="comment">//</span>
01707 
01708 <span class="keyword">inline</span> <span class="keywordtype">bool</span> operator==(<span class="keyword">const</span> wxPGId&amp; <span class="keywordtype">id</span>, <span class="keyword">const</span> wxString&amp; b)
01709 {
01710     wxASSERT (wxPGIdIsOk(<span class="keywordtype">id</span>));
01711     <span class="keyword">const</span> wxString&amp; a = <span class="keywordtype">id</span>.GetProperty().GetName();
01712     <span class="keywordflow">return</span> (a.Len() == b.Len()) &amp;&amp; (a.Cmp(b) == 0);
01713 }
01714 
01715 <span class="keyword">inline</span> <span class="keywordtype">bool</span> operator==(<span class="keyword">const</span> wxPGId&amp; <span class="keywordtype">id</span>, <span class="keyword">const</span> wxChar* b)
01716 {
01717     wxASSERT (wxPGIdIsOk(<span class="keywordtype">id</span>));
01718     <span class="keywordflow">return</span> <span class="keywordtype">id</span>.GetProperty().GetName().Cmp(b) == 0;
01719 }
01720 
01721 
01722 <span class="comment">// For dual-pointer-usage reasons, we need to use this trickery</span>
01723 <span class="comment">// instead of wxObjArray. wxPGValueType hash map is declared</span>
01724 <span class="comment">// in propdev.h.</span>
01725 <span class="keyword">typedef</span> wxArrayPtrVoid wxPGArrayProperty;
01726 
01727 <span class="comment">// It was reported that the alternative does not work with GCC 4.1</span>
01728 <span class="preprocessor">#if wxUSE_UNICODE || wxCHECK_GCC_VERSION(4,0) || wxUSE_STL</span>
01729 <span class="preprocessor"></span>
01730 <span class="comment">// Always use wxString based hashmap with unicode</span>
01731 WX_DECLARE_STRING_HASH_MAP_WITH_DECL(<span class="keywordtype">void</span>*,
01732                                      wxPGHashMapS2P,
01733                                      <span class="keyword">class</span> WXDLLIMPEXP_PG);
01734 
01735 <span class="preprocessor"># define wxPGNameStr            const wxString&amp;</span>
01736 <span class="preprocessor"></span><span class="preprocessor"># define wxPGNameConv(STR)      STR</span>
01737 <span class="preprocessor"></span>
01738 <span class="preprocessor">#else</span>
01739 <span class="preprocessor"></span>
01740 WX_DECLARE_HASH_MAP_WITH_DECL(wxChar*,     <span class="comment">// type of the keys</span>
01741                               <span class="keywordtype">void</span>*,                 <span class="comment">// type of the values</span>
01742                               wxStringHash,          <span class="comment">// hasher</span>
01743                               wxStringEqual,         <span class="comment">// key equality predicate</span>
01744                               wxPGHashMapS2P,       <span class="comment">// name of the class</span>
01745                               <span class="keyword">class</span> WXDLLIMPEXP_PG);
01746 
01747 <span class="preprocessor"># define wxPGNameStr         const wxChar*       // Should be same as hashmap type</span>
01748 <span class="preprocessor"></span><span class="preprocessor"># define wxPGNameConv(STR)   ((char * const)STR.c_str())</span>
01749 <span class="preprocessor"></span>
01750 <span class="preprocessor">#endif</span>
01751 <span class="preprocessor"></span>
01752 <span class="comment">// -----------------------------------------------------------------------</span>
01753 
01754 <span class="comment">// Hash map for int-to-int mapping</span>
01755 WX_DECLARE_HASH_MAP_WITH_DECL(size_t,
01756                               size_t,
01757                               wxIntegerHash,
01758                               wxIntegerEqual,
01759                               wxPGHashMapI2I,
01760                               <span class="keyword">class</span> WXDLLIMPEXP_PG);
01761 
01762 <span class="comment">// -----------------------------------------------------------------------</span>
01763 
<a name="l01764"></a><a class="code" href="classwxPGProperty.htm#wxPropertyCategoryClassa37">01764</a> <span class="keyword">inline</span> wxVariant <a class="code" href="classwxPGProperty.htm#wxPropertyCategoryClassa37">wxPGProperty::GetValueAsVariant</a> ()<span class="keyword"> const</span>
01765 <span class="keyword"></span>{
01766     wxPGVariant value = <a class="code" href="classwxPGProperty.htm#wxPropertyCategoryClassa6">DoGetValue</a>();
01767     <span class="keyword">const</span> wxPGValueType* typeclass = <a class="code" href="classwxPGProperty.htm#wxPropertyCategoryClassa39">GetValueType</a>();
01768     wxASSERT_MSG ( typeclass, wxT(<span class="stringliteral">"Did you forgot to use wxPG_INIT_REQUIRED_TYPE(T) in constructor?"</span>) );
01769     <span class="keywordflow">return</span> typeclass-&gt;<a class="code" href="classwxPGValueType.htm#wxPGValueTypea1">GenerateVariant</a>(value,m_name);
01770 }
01771 
01772 <span class="comment">// -----------------------------------------------------------------------</span>
01773 
<a name="l01780"></a><a class="code" href="classwxPGPropertyWithChildren.htm">01780</a> <span class="keyword">class </span>WXDLLIMPEXP_PG wxPGPropertyWithChildren : <span class="keyword">public</span> wxPGProperty
01781 {
01782     <span class="keyword">friend</span> <span class="keyword">class </span>wxPGProperty;
01783     <span class="keyword">friend</span> <span class="keyword">class </span>wxPropertyGridState;
01784     <span class="keyword">friend</span> <span class="keyword">class </span>wxPropertyGrid;
01785     <span class="comment">//_WX_PG_DECLARE_PROPERTY_CLASS(wxPGPropertyWithChildren)</span>
01786 <span class="keyword">public</span>:
01787 
01789     wxPGPropertyWithChildren();
01790 
01795     wxPGPropertyWithChildren( <span class="keyword">const</span> wxString&amp; label, <span class="keyword">const</span> wxString&amp; name );
01796 
01798     <span class="keyword">virtual</span> ~wxPGPropertyWithChildren();
01799 
01800     <span class="comment">//virtual int GetParentingType() const;</span>
01801 
01805     <span class="comment">// Advanced version that gives property list and index to this item</span>
01806     <span class="keyword">virtual</span> wxString <a class="code" href="classwxPGProperty.htm#wxPGPropertya28">GetValueAsString</a> ( <span class="keywordtype">int</span> arg_flags = 0 ) <span class="keyword">const</span>;
01807 
01811     <span class="keyword">virtual</span> <span class="keywordtype">bool</span> <a class="code" href="classwxPGProperty.htm#wxPGPropertya50">SetValueFromString</a> ( <span class="keyword">const</span> wxString&amp; text, <span class="keywordtype">int</span> flags );
01812 
01815     <span class="keyword">virtual</span> <span class="keywordtype">void</span> RefreshChildren();
01816 
01820     <span class="keyword">virtual</span> <span class="keywordtype">void</span> ChildChanged ( wxPGProperty* p );
01821 
<a name="l01823"></a><a class="code" href="classwxPGPropertyWithChildren.htm#wxPropertyCategoryClassa17">01823</a>     <span class="keyword">inline</span> size_t GetCount()<span class="keyword"> const </span>{ <span class="keywordflow">return</span> m_children.GetCount(); }
01824 
<a name="l01826"></a><a class="code" href="classwxPGPropertyWithChildren.htm#wxPropertyCategoryClassa48">01826</a>     <span class="keyword">inline</span> wxPGProperty* Item ( size_t i )<span class="keyword"> const </span>{ <span class="keywordflow">return</span> (wxPGProperty*)m_children.Item(i); }
01827 
<a name="l01829"></a><a class="code" href="classwxPGPropertyWithChildren.htm#wxPropertyCategoryClassa49">01829</a>     <span class="keyword">inline</span> wxPGProperty* Last ()<span class="keyword"> const </span>{ <span class="keywordflow">return</span> (wxPGProperty*)m_children.Last(); }
01830 
<a name="l01832"></a><a class="code" href="classwxPGPropertyWithChildren.htm#wxPropertyCategoryClassa41">01832</a>     <span class="keyword">inline</span> <span class="keywordtype">int</span> Index ( <span class="keyword">const</span> wxPGProperty* p )<span class="keyword"> const </span>{ <span class="keywordflow">return</span> m_children.Index((<span class="keywordtype">void</span>*)p); }
01833 
01835     <span class="keywordtype">void</span> Empty();
01836 
01837     <span class="keyword">inline</span> <span class="keywordtype">bool</span> IsExpanded()<span class="keyword"> const</span>
01838 <span class="keyword">    </span>{
01839         <span class="keywordflow">return</span> ( m_expanded &gt; 0 ) ? TRUE : FALSE;
01840     }
01841 
<a name="l01842"></a><a class="code" href="classwxPGPropertyWithChildren.htm#wxPropertyCategoryClassa33">01842</a>     wxPropertyGridState* <a class="code" href="classwxPGProperty.htm#wxPGPropertya26">GetParentState</a>()<span class="keyword"> const </span>{ <span class="keywordflow">return</span> m_parentState; }
01843 
01844     <span class="comment">// Puts correct indexes to children</span>
01845     <span class="keywordtype">void</span> FixIndexesOfChildren ( size_t starthere = 0 );
01846 
01847     wxPGProperty* GetItemAtY ( <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> y, <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> lh );
01848 
01849     <span class="keywordtype">void</span> AddChild ( wxPGProperty* prop, <span class="keywordtype">int</span> index = -1, <span class="keywordtype">bool</span> correct_mode = TRUE );
01850 
01851     <span class="keyword">inline</span> <span class="keywordtype">void</span> SetParentState ( wxPropertyGridState* pstate ) { m_parentState = pstate; }
01852 
01853 <span class="keyword">protected</span>:
01854 
01855     wxPropertyGridState*    m_parentState;
01856 
01857     wxPGArrayProperty   m_children;
01858     <span class="keywordtype">unsigned</span> <span class="keywordtype">char</span>       m_expanded;
01859 };
01860 
01861 <span class="keyword">extern</span> WXDLLIMPEXP_PG <a class="code" href="structwxPGPropertyClassInfo.htm">wxPGPropertyClassInfo</a> wxBaseParentPropertyClassInfo;
01862 
01863 <span class="comment">// -----------------------------------------------------------------------</span>
01864 
<a name="l01869"></a><a class="code" href="classwxPGRootPropertyClass.htm">01869</a> <span class="keyword">class </span>WXDLLIMPEXP_PG wxPGRootPropertyClass : <span class="keyword">public</span> wxPGPropertyWithChildren
01870 {
01871     WX_PG_DECLARE_PROPERTY_CLASS()
01872 <span class="keyword">public</span>:
01873 
01875     wxPGRootPropertyClass();
01876     <span class="keyword">virtual</span> ~wxPGRootPropertyClass();
01877 
01879     <span class="comment">//virtual int GetParentingType() const;</span>
01880 
01881 <span class="keyword">protected</span>:
01882 };
01883 
01884 <span class="comment">// -----------------------------------------------------------------------</span>
01885 
<a name="l01890"></a><a class="code" href="classwxPropertyCategoryClass.htm">01890</a> <span class="keyword">class </span>WXDLLIMPEXP_PG wxPropertyCategoryClass : <span class="keyword">public</span> wxPGPropertyWithChildren
01891 {
01892     WX_PG_DECLARE_PROPERTY_CLASS()
01893 <span class="keyword">public</span>:
01894 
01896     wxPropertyCategoryClass();
01897 
01905     wxPropertyCategoryClass( <span class="keyword">const</span> wxString&amp; label, <span class="keyword">const</span> wxString&amp; name = <a class="code" href="group__miscellaneous.htm#ga2">wxPG_LABEL</a> );
01906     ~wxPropertyCategoryClass();
01907 
01909     <span class="keyword">virtual</span> wxString <a class="code" href="classwxPGPropertyWithChildren.htm#wxPGRootPropertyClassa34">GetValueAsString</a> ( <span class="keywordtype">int</span> arg_flags ) <span class="keyword">const</span>;
01910 
01911     <span class="comment">//virtual int GetParentingType() const;</span>
01912 
01913     <span class="keyword">inline</span> <span class="keywordtype">int</span> GetTextExtent()<span class="keyword"> const </span>{ <span class="keywordflow">return</span> m_textExtent; }
01914 
01915     <span class="keywordtype">void</span> CalculateTextExtent ( wxWindow* wnd, wxFont&amp; font );
01916 
01917 <span class="keyword">protected</span>:
01918     <span class="keywordtype">int</span> m_textExtent; <span class="comment">// pre-calculated length of text</span>
01919 };
01920 
01921 <span class="comment">// -----------------------------------------------------------------------</span>
01922 
01923 <span class="comment">// Used to indicate wxPGChoices::Add etc that the value shall not be added</span>
01924 <span class="preprocessor">#define wxPG_INVALID_VALUE      2147483647</span>
01925 <span class="preprocessor"></span>
<a name="l01930"></a><a class="code" href="classwxPGChoices.htm">01930</a> <span class="keyword">class </span>WXDLLIMPEXP_PG wxPGChoices
01931 {
01932 <span class="keyword">public</span>:
01933     
01935     wxPGChoices();
01936 
01938     wxPGChoices( <span class="keyword">const</span> wxChar** labels, <span class="keyword">const</span> <span class="keywordtype">long</span>* values = NULL, <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> itemcount = 0 );
01939 
01941     wxPGChoices( <span class="keyword">const</span> wxArrayString&amp; labels, <span class="keyword">const</span> wxArrayInt&amp; values = *((<span class="keyword">const</span> wxArrayInt*)NULL) );
01942 
01946     <span class="keywordtype">void</span> Add ( <span class="keyword">const</span> wxChar** labels, <span class="keyword">const</span> <span class="keywordtype">long</span>* values = NULL, <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> itemcount = 0 );
01947 
01949     <span class="keywordtype">void</span> Add ( <span class="keyword">const</span> wxArrayString&amp; arr, <span class="keyword">const</span> <span class="keywordtype">long</span>* values = NULL );
01950 
01952     <span class="keywordtype">void</span> Add ( <span class="keyword">const</span> wxArrayString&amp; arr, <span class="keyword">const</span> wxArrayInt&amp; arrint );
01953 
01955     <span class="keywordtype">void</span> Add ( <span class="keyword">const</span> wxChar* label, <span class="keywordtype">int</span> value = wxPG_INVALID_VALUE );
01956 
01958     <span class="keywordtype">void</span> AddAsSorted ( <span class="keyword">const</span> wxString&amp; label, <span class="keywordtype">int</span> value = wxPG_INVALID_VALUE );
01959 
<a name="l01962"></a><a class="code" href="classwxPGChoices.htm#wxPGChoicesa12">01962</a>     <span class="keyword">inline</span> wxArrayString&amp; GetLabels()
01963     {
01964         wxASSERT ( m_refCount != 0xFFFFFFF );
01965         <span class="keywordflow">return</span> m_arrLabels;
01966     }
01967 
<a name="l01970"></a><a class="code" href="classwxPGChoices.htm#wxPGChoicesa16">01970</a>     <span class="keyword">inline</span> wxArrayInt&amp; GetValues()
01971     {
01972         wxASSERT ( m_refCount != 0xFFFFFFF );
01973         <span class="keywordflow">return</span> m_arrValues;
01974     }
01975 
<a name="l01979"></a><a class="code" href="classwxPGChoices.htm#wxPGChoicesa18">01979</a>     <span class="keywordtype">bool</span> IsOk ()<span class="keyword"> const</span>
01980 <span class="keyword">    </span>{
01981         <span class="keywordflow">return</span> ( m_refCount != 0xFFFFFFF );
01982     }
01983 
<a name="l01986"></a><a class="code" href="classwxPGChoices.htm#wxPGChoicesa19">01986</a>     <span class="keywordtype">bool</span> IsTemporary ()<span class="keyword"> const</span>
01987 <span class="keyword">    </span>{
01988         <span class="keywordflow">return</span> ( m_refCount == 0 );
01989     }
01990 
<a name="l01992"></a><a class="code" href="classwxPGChoices.htm#wxPGChoicesa9">01992</a>     size_t GetId()<span class="keyword"> const </span>{ <span class="keywordflow">return</span> m_id; };
01993 
<a name="l01995"></a><a class="code" href="classwxPGChoices.htm#wxPGChoicesa23">01995</a>     <span class="keywordtype">void</span> Set ( <span class="keyword">const</span> wxChar** labels, <span class="keyword">const</span> <span class="keywordtype">long</span>* values = NULL, <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> itemcount = 0 )
01996     {
01997         Free();
01998         Add(labels,values,itemcount);
01999     }
02000 
<a name="l02004"></a><a class="code" href="classwxPGChoices.htm#wxPGChoicesa22">02004</a>     <span class="keywordtype">void</span> Set ( wxArrayString&amp; arr, <span class="keyword">const</span> <span class="keywordtype">long</span>* values = (<span class="keyword">const</span> <span class="keywordtype">long</span>*) NULL )
02005     {
02006         Free();
02007         Add(arr,values);
02008     }
02009 
<a name="l02011"></a><a class="code" href="classwxPGChoices.htm#wxPGChoicesa21">02011</a>     <span class="keywordtype">void</span> Set ( <span class="keyword">const</span> wxArrayString&amp; labels, <span class="keyword">const</span> wxArrayInt&amp; values = *((<span class="keyword">const</span> wxArrayInt*)NULL) )
02012     {
02013         Free();
02014         <span class="keywordflow">if</span> ( &amp;values )
02015             Add(labels,values);
02016         <span class="keywordflow">else</span>
02017             Add(labels);
02018     }
02019 
02023     <span class="keywordtype">void</span> SetId( size_t <span class="keywordtype">id</span> );
02024 
02025     <span class="keywordtype">void</span> SetupId( size_t <span class="keywordtype">id</span> ) { m_id = <span class="keywordtype">id</span>; }
02026 
02027     <span class="keyword">inline</span> <span class="keyword">const</span> wxString&amp; GetLabel( size_t ind )
02028     {
02029         <span class="keywordflow">return</span> m_arrLabels[ind];
02030     }
02031     <span class="keyword">inline</span> <span class="keyword">const</span> wxArrayString&amp; GetLabels()<span class="keyword"> const </span>{ <span class="keywordflow">return</span> m_arrLabels; }
02032 
02033     <span class="keyword">inline</span> size_t GetCount () { <span class="keywordflow">return</span> m_arrLabels.GetCount(); }
02034 
02035     <span class="keyword">inline</span> <span class="keywordtype">int</span> GetValue( size_t ind ) { <span class="keywordflow">return</span> m_arrValues[ind]; }
02036     <span class="keyword">inline</span> <span class="keyword">const</span> wxArrayInt&amp; GetValues()<span class="keyword"> const </span>{ <span class="keywordflow">return</span> m_arrValues; }
02037 
02038     <span class="keyword">inline</span> <span class="keywordtype">int</span> Index( <span class="keyword">const</span> wxString&amp; str )<span class="keyword"> const </span>{ <span class="keywordflow">return</span> m_arrLabels.Index(str); }
02039 
02040     <span class="keyword">inline</span> <span class="keywordtype">int</span> GetRefCount()<span class="keyword"> const </span>{ <span class="keywordflow">return</span> m_refCount; }
02041     <span class="keyword">inline</span> <span class="keywordtype">void</span> SetRefCount(<span class="keywordtype">int</span> refcount) { m_refCount = refcount; }
02042     <span class="keyword">inline</span> <span class="keywordtype">void</span> Ref()
02043     {
02044         wxASSERT ( m_refCount != 0xFFFFFFF );
02045         m_refCount++;
02046         <span class="comment">/*</span>
02047 <span class="comment">        const wxChar* l1 = wxT("&lt;no_items&gt;");</span>
02048 <span class="comment">        if ( GetCount() )</span>
02049 <span class="comment">            l1 = m_arrLabels[0].c_str();</span>
02050 <span class="comment">        wxLogDebug(wxT("%X: %s... Ref: refcount is now %i"),(unsigned int)this,l1,(int)m_refCount);</span>
02051 <span class="comment">        */</span>
02052     }
02053     <span class="keyword">inline</span> <span class="keywordtype">bool</span> DoUnRef()
02054     {
02055         wxASSERT ( m_refCount != 0xFFFFFFF );
02056         m_refCount--;
02057 
02058         <span class="comment">/*</span>
02059 <span class="comment">        const wxChar* l1 = wxT("&lt;no_items&gt;");</span>
02060 <span class="comment">        if ( GetCount() )</span>
02061 <span class="comment">            l1 = m_arrLabels[0].c_str();</span>
02062 <span class="comment">        wxLogDebug(wxT("%X: %s... DoUnRef: refcount is now %i"),(unsigned int)this,l1,(int)m_refCount);</span>
02063 <span class="comment">        */</span>
02064 
02065         <span class="keywordflow">return</span> ( m_refCount &lt; 1 );
02066     }
02067 
02069     <span class="keyword">static</span> <span class="keywordtype">void</span> UnRef( wxPGChoices* choices );
02070 
02071     <span class="keyword">inline</span> <span class="keywordtype">void</span> AddString( <span class="keyword">const</span> wxString&amp; str ) { m_arrLabels.Add(str); }
02072     <span class="keyword">inline</span> <span class="keywordtype">void</span> AddInt( <span class="keywordtype">int</span> val ) { m_arrValues.Add(val); }
02073 
02074     <span class="keyword">inline</span> <span class="keywordtype">void</span> SetLabels( wxArrayString&amp; arr ) { m_arrLabels = arr; }
02075     <span class="keyword">inline</span> <span class="keywordtype">void</span> SetLabels( <span class="keyword">const</span> wxArrayString&amp; arr ) { m_arrLabels = arr; }
02076     <span class="keyword">inline</span> <span class="keywordtype">void</span> SetValues( wxArrayInt&amp; arr ) { m_arrValues = arr; }
02077     <span class="keyword">inline</span> <span class="keywordtype">void</span> SetValues( <span class="keyword">const</span> wxArrayInt&amp; arr ) { m_arrValues = arr; }
02078 
02080     ~wxPGChoices();
02081 
02089     <span class="keyword">static</span> wxPGChoices* GetOrCreate(size_t <span class="keywordtype">id</span>);
02090 
02091 
02092 <span class="keyword">protected</span>:
02093 
02094     wxArrayString   m_arrLabels;
02095     wxArrayInt      m_arrValues;
02096 
02097     size_t          m_id; <span class="comment">// usually pointer to a wxChar* array</span>
02098 
02099 <span class="preprocessor">#ifdef __WXDEBUG__</span>
02100 <span class="preprocessor"></span><span class="keyword">public</span>:
02101     <span class="comment">// For pairing validation</span>
02102     <span class="keyword">const</span> <span class="keywordtype">long</span>*     m_origValueArray;
02103 <span class="keyword">protected</span>:
02104 <span class="preprocessor">#endif</span>
02105 <span class="preprocessor"></span>
02106     <span class="comment">// So that multiple properties can use the same set</span>
02107     <span class="keywordtype">int</span>             m_refCount;
02108 
02109     <span class="keywordtype">void</span> Init ()
02110     {
02111         m_id = 0;
02112         m_refCount = 0;
02113     }
02114     <span class="keywordtype">void</span> Free ();
02115 
02116 };
02117 
02118 <span class="comment">// -----------------------------------------------------------------------</span>
02119 <span class="comment">// Property declaration.</span>
02120 
02121 <span class="preprocessor">#define wxPG_CONSTFUNC(PROP) PROP</span>
02122 <span class="preprocessor"></span><span class="preprocessor">#define wxPG_PROPCLASS(PROP) PROP##Class</span>
02123 <span class="preprocessor"></span>
02124 <span class="comment">// Macro based constructor.</span>
02125 <span class="preprocessor">#define wxPG_NEWPROPERTY(PROP,LABEL,NAME,VALUE) wx##PROP##Property(LABEL,NAME,VALUE)</span>
02126 <span class="preprocessor"></span>
02127 <span class="preprocessor">#define wxPG_DECLARE_PROPERTY_CLASSINFO(NAME) \</span>
02128 <span class="preprocessor">    extern wxPGPropertyClassInfo NAME##ClassInfo;</span>
02129 <span class="preprocessor"></span>
02130 <span class="preprocessor">#define wxPG_DECLARE_PROPERTY_CLASSINFO_WITH_DECL(NAME,DECL) \</span>
02131 <span class="preprocessor">    extern DECL wxPGPropertyClassInfo NAME##ClassInfo;</span>
02132 <span class="preprocessor"></span>
02133 <span class="preprocessor">#define WX_PG_DECLARE_PROPERTY_WITH_DECL(NAME,VALARG,DEFVAL,DECL) \</span>
02134 <span class="preprocessor">    extern DECL wxPGProperty* wxPG_CONSTFUNC(NAME)( const wxString&amp;, const wxString&amp; = wxPG_LABEL, VALARG = DEFVAL ); \</span>
02135 <span class="preprocessor">    extern DECL wxPGPropertyClassInfo NAME##ClassInfo;</span>
02136 <span class="preprocessor"></span>
02137 <span class="preprocessor">#define WX_PG_DECLARE_PROPERTY(NAME,VALARG,DEFVAL) \</span>
02138 <span class="preprocessor">    extern wxPGProperty* wxPG_CONSTFUNC(NAME)( const wxString&amp;, const wxString&amp; = wxPG_LABEL, VALARG = DEFVAL ); \</span>
02139 <span class="preprocessor">    wxPG_DECLARE_PROPERTY_CLASSINFO(NAME)</span>
02140 <span class="preprocessor"></span>
02141 <span class="comment">//</span>
02142 <span class="comment">// Specific macro-based declarations.</span>
02143 <span class="comment">//</span>
02144 
02145 <span class="preprocessor">#define WX_PG_DECLARE_STRING_PROPERTY_WITH_DECL(NAME,DECL) \</span>
02146 <span class="preprocessor">extern DECL wxPGProperty* wxPG_CONSTFUNC(NAME)( const wxString&amp;, const wxString&amp; = wxPG_LABEL, const wxString&amp; = wxEmptyString ); \</span>
02147 <span class="preprocessor">extern DECL wxPGPropertyClassInfo NAME##ClassInfo;</span>
02148 <span class="preprocessor"></span>
02149 <span class="preprocessor">#define WX_PG_DECLARE_STRING_PROPERTY(NAME) \</span>
02150 <span class="preprocessor">extern wxPGProperty* wxPG_CONSTFUNC(NAME)( const wxString&amp;, const wxString&amp; = wxPG_LABEL, const wxString&amp; = wxEmptyString ); \</span>
02151 <span class="preprocessor">wxPG_DECLARE_PROPERTY_CLASSINFO(NAME)</span>
02152 <span class="preprocessor"></span>
02153 <span class="preprocessor">#define WX_PG_DECLARE_CUSTOM_FLAGS_PROPERTY_WITH_DECL(NAME,DECL) \</span>
02154 <span class="preprocessor">WX_PG_DECLARE_PROPERTY_WITH_DECL(NAME,long,-1,DECL)</span>
02155 <span class="preprocessor"></span>
02156 <span class="preprocessor">#define WX_PG_DECLARE_CUSTOM_FLAGS_PROPERTY(NAME) \</span>
02157 <span class="preprocessor">WX_PG_DECLARE_PROPERTY(NAME,long,-1)</span>
02158 <span class="preprocessor"></span>
02159 <span class="preprocessor">#define WX_PG_DECLARE_CUSTOM_ENUM_PROPERTY_WITH_DECL(NAME,DECL) \</span>
02160 <span class="preprocessor">WX_PG_DECLARE_PROPERTY_WITH_DECL(NAME,int,-1,DECL)</span>
02161 <span class="preprocessor"></span>
02162 <span class="preprocessor">#define WX_PG_DECLARE_CUSTOM_ENUM_PROPERTY(NAME) \</span>
02163 <span class="preprocessor">WX_PG_DECLARE_PROPERTY(NAME,int,-1)</span>
02164 <span class="preprocessor"></span>
02165 <span class="preprocessor">#define WX_PG_DECLARE_ARRAYSTRING_PROPERTY_WITH_DECL(NAME,DECL) \</span>
02166 <span class="preprocessor">extern DECL wxPGProperty* wxPG_CONSTFUNC(NAME)( const wxString&amp;, const wxString&amp; = wxPG_LABEL, const wxArrayString&amp; = wxArrayString() ); \</span>
02167 <span class="preprocessor">extern DECL wxPGPropertyClassInfo NAME##ClassInfo;</span>
02168 <span class="preprocessor"></span>
02169 <span class="preprocessor">#define WX_PG_DECLARE_ARRAYSTRING_PROPERTY(NAME) \</span>
02170 <span class="preprocessor">extern wxPGProperty* wxPG_CONSTFUNC(NAME)( const wxString&amp;, const wxString&amp; = wxPG_LABEL, const wxArrayString&amp; = wxArrayString() ); \</span>
02171 <span class="preprocessor">wxPG_DECLARE_PROPERTY_CLASSINFO(NAME)</span>
02172 <span class="preprocessor"></span>
02173 <span class="comment">// Declare basic property classes.</span>
02174 WX_PG_DECLARE_PROPERTY_WITH_DECL(wxStringProperty,<span class="keyword">const</span> wxString&amp;,wxEmptyString,WXDLLIMPEXP_PG)
02175 WX_PG_DECLARE_PROPERTY_WITH_DECL(wxIntProperty,<span class="keywordtype">long</span>,0,WXDLLIMPEXP_PG)
02176 WX_PG_DECLARE_PROPERTY_WITH_DECL(wxFloatProperty,<span class="keywordtype">double</span>,0.0,WXDLLIMPEXP_PG)
02177 WX_PG_DECLARE_PROPERTY_WITH_DECL(wxBoolProperty,<span class="keywordtype">bool</span>,FALSE,WXDLLIMPEXP_PG)
02178 WX_PG_DECLARE_PROPERTY_WITH_DECL(wxLongStringProperty,<span class="keyword">const</span> wxString&amp;,wxEmptyString,WXDLLIMPEXP_PG)
02179 WX_PG_DECLARE_PROPERTY_WITH_DECL(wxFileProperty,<span class="keyword">const</span> wxString&amp;,wxEmptyString,WXDLLIMPEXP_PG)
02180 WX_PG_DECLARE_PROPERTY_WITH_DECL(wxArrayStringProperty,<span class="keyword">const</span> wxArrayString&amp;,wxArrayString(),WXDLLIMPEXP_PG)
02181 
02182 WX_PG_DECLARE_STRING_PROPERTY_WITH_DECL(wxDirProperty,WXDLLIMPEXP_PG)
02183 
02184 <span class="comment">// Enum and Flags Properties require special attention.</span>
02185 <span class="keyword">extern</span> WXDLLIMPEXP_PG wxPGProperty* wxEnumProperty( <span class="keyword">const</span> wxString&amp;, <span class="keyword">const</span> wxString&amp;, <span class="keyword">const</span> wxChar** labels = (<span class="keyword">const</span> wxChar**) NULL,
02186     <span class="keyword">const</span> <span class="keywordtype">long</span>* values = NULL, <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> itemcount = 0, <span class="keywordtype">int</span> value = 0 );
02187 <span class="keyword">extern</span> WXDLLIMPEXP_PG wxPGProperty* wxEnumProperty( <span class="keyword">const</span> wxString&amp; label, <span class="keyword">const</span> wxString&amp; name, 
02188     wxPGChoices&amp; constants, <span class="keywordtype">int</span> value = 0 );
02189 <span class="keyword">extern</span> WXDLLIMPEXP_PG <a class="code" href="structwxPGPropertyClassInfo.htm">wxPGPropertyClassInfo</a> wxEnumPropertyClassInfo;
02190 
02191 <span class="keyword">extern</span> WXDLLIMPEXP_PG wxPGProperty* wxFlagsProperty( <span class="keyword">const</span> wxString&amp;, <span class="keyword">const</span> wxString&amp;, <span class="keyword">const</span> wxChar** labels = (<span class="keyword">const</span> wxChar**) NULL,
02192     <span class="keyword">const</span> <span class="keywordtype">long</span>* values = NULL, <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> itemcount = 0, <span class="keywordtype">int</span> value = 0 );
02193 <span class="keyword">extern</span> WXDLLIMPEXP_PG wxPGProperty* wxFlagsProperty( <span class="keyword">const</span> wxString&amp; label, <span class="keyword">const</span> wxString&amp; name, 
02194     wxPGChoices&amp; constants, <span class="keywordtype">int</span> value = 0 );
02195 <span class="keyword">extern</span> WXDLLIMPEXP_PG <a class="code" href="structwxPGPropertyClassInfo.htm">wxPGPropertyClassInfo</a> wxFlagsPropertyClassInfo;
02196 
02197 <span class="comment">// wxCustomProperty doesn't have value argument.</span>
02198 <span class="keyword">extern</span> WXDLLIMPEXP_PG wxPGProperty* wxCustomProperty( <span class="keyword">const</span> wxString&amp; label, <span class="keyword">const</span> wxString&amp; name = wxPG_LABEL );
02199 <span class="keyword">extern</span> WXDLLIMPEXP_PG <a class="code" href="structwxPGPropertyClassInfo.htm">wxPGPropertyClassInfo</a> wxCustomPropertyClassInfo;
02200 
02201 <span class="comment">// wxParentProperty doesn't have value argument.</span>
02202 <span class="keyword">extern</span> WXDLLIMPEXP_PG wxPGProperty* wxParentProperty( <span class="keyword">const</span> wxString&amp; label, <span class="keyword">const</span> wxString&amp; name );
02203 <span class="keyword">extern</span> WXDLLIMPEXP_PG <a class="code" href="structwxPGPropertyClassInfo.htm">wxPGPropertyClassInfo</a> wxParentPropertyClassInfo;
02204 
02205 <span class="comment">// wxPropertyCategory doesn't have value argument.</span>
02206 <span class="keyword">extern</span> WXDLLIMPEXP_PG wxPGProperty* wxPropertyCategory ( <span class="keyword">const</span> wxString&amp; label, <span class="keyword">const</span> wxString&amp; name = wxPG_LABEL );
02207 <span class="keyword">extern</span> WXDLLIMPEXP_PG <a class="code" href="structwxPGPropertyClassInfo.htm">wxPGPropertyClassInfo</a> wxPropertyCategoryClassInfo;
02208 
02209 <span class="comment">// FIXME: Should this be out-of-inline?</span>
02210 <span class="keyword">inline</span> wxObject* wxPG_VariantToWxObject( wxVariant&amp; variant, wxClassInfo* classInfo )
02211 {
02212     <span class="keywordflow">if</span> ( !variant.IsValueKindOf(classInfo) )
02213         <span class="keywordflow">return</span> (wxObject*) NULL;
02214     wxVariantData* vdata = variant.GetData();
02215 
02216     <span class="keywordflow">if</span> ( vdata-&gt;IsKindOf( &amp;wxPGVariantDataWxObj::ms_classInfo ) )
02217          <span class="keywordflow">return</span> (wxObject*) ((wxPGVariantDataWxObj*)vdata)-&gt;GetValuePtr();
02218 
02219     <span class="keywordflow">return</span> variant.GetWxObjectPtr();
02220 }
02221 
02222 <span class="comment">//</span>
02223 <span class="comment">// Redefine wxGetVariantCast to also take propertygrid variantdata</span>
02224 <span class="comment">// classes into account.</span>
02225 <span class="comment">// TODO: Remove after persistent wxObject classes added (i.e.</span>
02226 <span class="comment">//   GetWxObjectPtr works for all).</span>
02227 <span class="comment">//</span>
02228 <span class="preprocessor">#undef wxGetVariantCast</span>
02229 <span class="preprocessor"></span><span class="preprocessor">#define wxGetVariantCast(var,classname) (classname*)wxPG_VariantToWxObject(var,&amp;classname::ms_classInfo)</span>
02230 <span class="preprocessor"></span>
02231 <span class="comment">// TODO: After a while, remove this.</span>
02232 <span class="preprocessor">#define WX_PG_VARIANT_TO_WXOBJECT(VARIANT,CLASSNAME) (CLASSNAME*)wxPG_VariantToWxObject(VARIANT,&amp;CLASSNAME::ms_classInfo)</span>
02233 <span class="preprocessor"></span><span class="comment">//#define WX_PG_VARIANT_TO_WXOBJECT(VARIANT,CLASSNAME) wxGetVariantCast(VARIANT,CLASSNAME)</span>
02234 
02235 <span class="comment">// -----------------------------------------------------------------------</span>
02236 
02242 <span class="comment">// BM_STATE</span>
<a name="l02243"></a><a class="code" href="classwxPropertyGridState.htm">02243</a> <span class="keyword">class </span>WXDLLIMPEXP_PG wxPropertyGridState
02244 {
02245     <span class="keyword">friend</span> <span class="keyword">class </span>wxPGProperty;
02246     <span class="keyword">friend</span> <span class="keyword">class </span>wxPropertyGrid;
02247     <span class="keyword">friend</span> <span class="keyword">class </span>wxPropertyGridManager;
02248 <span class="keyword">public</span>:
02249 
02251     wxPropertyGridState();
02252 
02254     ~wxPropertyGridState();
02255 
02257     wxPGId Append ( wxPGProperty* property );
02258 
02259     wxPGId AppendIn ( wxPGPropertyWithChildren* pwc, <span class="keyword">const</span> wxString&amp; label, <span class="keyword">const</span> wxString&amp; propname, wxVariant&amp; value );
02260 
02262     wxPGId BaseGetPropertyByName ( wxPGNameStr name ) <span class="keyword">const</span>;
02263 
02265     <span class="keywordtype">void</span> Clear ();
02266 
02267     <span class="keywordtype">void</span> ClearModifiedStatus ( wxPGProperty* p );
02268 
02269     <span class="keyword">static</span> <span class="keywordtype">void</span> ClearPropertyAndChildrenFlags ( wxPGProperty* p, <span class="keywordtype">long</span> flags );
02270     <span class="keyword">static</span> <span class="keywordtype">void</span> SetPropertyAndChildrenFlags ( wxPGProperty* p, <span class="keywordtype">long</span> flags );
02271 
02272     <span class="keywordtype">bool</span> ClearPropertyValue ( wxPGProperty* p );
02273 
02274     <span class="keywordtype">bool</span> Collapse ( wxPGProperty* p );
02275 
02276     <span class="keywordtype">void</span> Delete ( wxPGProperty* item );
02277 
02278     <span class="keywordtype">bool</span> EnableCategories ( <span class="keywordtype">bool</span> enable );
02279 
02281     <span class="keywordtype">bool</span> EnableProperty ( wxPGProperty* p, <span class="keywordtype">bool</span> enable );
02282 
02283     <span class="keywordtype">bool</span> Expand ( wxPGProperty* p );
02284 
02285     <span class="keywordtype">void</span> ExpandAll ( <span class="keywordtype">unsigned</span> <span class="keywordtype">char</span> do_expand );
02286 
<a name="l02288"></a><a class="code" href="classwxPropertyGridState.htm#wxPropertyGridStatea12">02288</a>     <span class="keyword">inline</span> wxPGId GetFirst ()<span class="keyword"> const</span>
02289 <span class="keyword">    </span>{
02290         wxPGProperty* p = (wxPGProperty*) NULL;
02291         <span class="keywordflow">if</span> ( m_properties-&gt;GetCount() )
02292             p = m_properties-&gt;Item(0);
02293         <span class="keywordflow">return</span> wxPGIdGen(p);
02294     }
02295 
02296     wxPGId GetFirstCategory () <span class="keyword">const</span>;
02297 
02298     wxPGId GetFirstProperty () <span class="keyword">const</span>;
02299 
02300     wxPropertyGrid* GetGrid ()<span class="keyword"> const </span>{ <span class="keywordflow">return</span> m_pPropGrid; }
02301 
02302     wxPGId GetNextCategory ( wxPGId <span class="keywordtype">id</span> ) <span class="keyword">const</span>;
02303 
02304     wxPGId GetNextProperty ( wxPGId <span class="keywordtype">id</span> ) <span class="keyword">const</span>;
02305 
02306     <span class="keyword">static</span> wxPGId GetNextSibling ( wxPGId <span class="keywordtype">id</span> );
02307 
02308     <span class="keyword">static</span> wxPGId GetPrevSibling ( wxPGId <span class="keywordtype">id</span> );
02309 
02310     wxPGId GetPrevProperty ( wxPGId <span class="keywordtype">id</span> ) <span class="keyword">const</span>;
02311 
02312     wxPGId GetPropertyByLabel ( <span class="keyword">const</span> wxString&amp; name, wxPGPropertyWithChildren* parent  = (wxPGPropertyWithChildren*) NULL ) <span class="keyword">const</span>;
02313 
02314     wxVariant GetPropertyValues ( <span class="keyword">const</span> wxString&amp; listname, wxPGId baseparent, <span class="keywordtype">long</span> flags ) <span class="keyword">const</span>;
02315 
02317     wxPGId Insert ( wxPGPropertyWithChildren* parent, <span class="keywordtype">int</span> index, wxPGProperty* property );
02318 
02319     <span class="keyword">inline</span> <span class="keywordtype">bool</span> IsDisplayed() <span class="keyword">const</span>;
02320 
02321     <span class="keyword">inline</span> <span class="keywordtype">bool</span> IsInNonCatMode()<span class="keyword"> const </span>{ <span class="keywordflow">return</span> (<span class="keywordtype">bool</span>)(m_properties == m_abcArray); }
02322 
02324     <span class="keywordtype">void</span> InitNonCatMode ();
02325 
02326     <span class="keywordtype">void</span> LimitPropertyEditing ( wxPGProperty* p, <span class="keywordtype">bool</span> limit = TRUE );
02327 
02328     <span class="keywordtype">void</span> SetPropertyLabel( wxPGProperty* p, <span class="keyword">const</span> wxString&amp; newlabel );
02329 
02330     <span class="keywordtype">void</span> SetPropertyPriority ( wxPGProperty* p, <span class="keywordtype">int</span> priority );
02331 
02332     <span class="keywordtype">void</span> SetPropVal( wxPGProperty* p, wxPGVariant value );
02333 
02334     <span class="keywordtype">bool</span> SetPropertyValue ( wxPGProperty* p, <span class="keyword">const</span> wxPGValueType* typeclass, wxPGVariant value );
02335 
02336     <span class="keywordtype">bool</span> SetPropertyValue ( wxPGProperty* p, <span class="keyword">const</span> wxChar* typestring, wxPGVariant value );
02337 
02338     <span class="keywordtype">bool</span> SetPropertyValue ( wxPGProperty* p, <span class="keyword">const</span> wxString&amp; value );
02339 
02340     <span class="keywordtype">bool</span> SetPropertyValue ( wxPGProperty* p, wxVariant&amp; value );
02341 
02342     <span class="keywordtype">bool</span> SetPropertyValue ( wxPGProperty* p, wxObject* value );
02343 
<a name="l02345"></a><a class="code" href="classwxPropertyGridState.htm#wxPropertyGridStatea36">02345</a>     <span class="keyword">inline</span> <span class="keywordtype">void</span> SetPropertyValue ( wxPGProperty* p, <span class="keywordtype">long</span> value )
02346     {
02347         SetPropertyValue ( p, wxPG_VALUETYPE(<span class="keywordtype">long</span>), wxPGVariantFromLong(value) );
02348     }
<a name="l02350"></a><a class="code" href="classwxPropertyGridState.htm#wxPropertyGridStatea35">02350</a>     <span class="keyword">inline</span> <span class="keywordtype">void</span> SetPropertyValue ( wxPGProperty* p, <span class="keywordtype">int</span> value )
02351     {
02352         SetPropertyValue ( p, wxPG_VALUETYPE(<span class="keywordtype">long</span>), wxPGVariantFromLong((<span class="keywordtype">long</span>)value) );
02353     }
<a name="l02355"></a><a class="code" href="classwxPropertyGridState.htm#wxPropertyGridStatea34">02355</a>     <span class="keyword">inline</span> <span class="keywordtype">void</span> SetPropertyValue ( wxPGProperty* p, <span class="keywordtype">double</span> value )
02356     {
02357         SetPropertyValue ( p, wxPG_VALUETYPE(<span class="keywordtype">double</span>), wxPGVariantFromDouble(value) );
02358     }
<a name="l02360"></a><a class="code" href="classwxPropertyGridState.htm#wxPropertyGridStatea33">02360</a>     <span class="keyword">inline</span> <span class="keywordtype">void</span> SetPropertyValue ( wxPGProperty* p, <span class="keywordtype">bool</span> value )
02361     {
02362         SetPropertyValue ( p, wxPG_VALUETYPE(<span class="keywordtype">bool</span>), wxPGVariantFromLong(value?1:0) );
02363     }
<a name="l02365"></a><a class="code" href="classwxPropertyGridState.htm#wxPropertyGridStatea32">02365</a>     <span class="keyword">inline</span> <span class="keywordtype">void</span> SetPropertyValue ( wxPGProperty* p, <span class="keyword">const</span> wxArrayString&amp; value )
02366     {
02367         SetPropertyValue ( p, wxPG_VALUETYPE(wxArrayString), wxPGVariantFromArrayString(value) );
02368     }
<a name="l02370"></a><a class="code" href="classwxPropertyGridState.htm#wxPropertyGridStatea31">02370</a>     <span class="keyword">inline</span> <span class="keywordtype">void</span> SetPropertyValue ( wxPGProperty* p, <span class="keywordtype">void</span>* value )
02371     {
02372         SetPropertyValue ( p, wxPG_VALUETYPE(<span class="keywordtype">void</span>), value );
02373     }
<a name="l02375"></a><a class="code" href="classwxPropertyGridState.htm#wxPropertyGridStatea30">02375</a>     <span class="keyword">inline</span> <span class="keywordtype">void</span> SetPropertyValue ( wxPGProperty* p, <span class="keyword">const</span> wxPoint&amp; value )
02376     {
02377         wxASSERT ( p );
02378         <span class="comment">//wxASSERT ( wxStrcmp(p-&gt;GetValueType()-&gt;GetCustomTypeName(),) == 0 );</span>
02379         <span class="comment">//SetPropertyValue ( p, wxPG_VALUETYPE(void), (void*)&amp;value );</span>
02380         SetPropertyValue ( p, wxT(<span class="stringliteral">"wxPoint"</span>), (<span class="keywordtype">void</span>*)&amp;value );
02381     }
<a name="l02383"></a><a class="code" href="classwxPropertyGridState.htm#wxPropertyGridStatea29">02383</a>     <span class="keyword">inline</span> <span class="keywordtype">void</span> SetPropertyValue ( wxPGProperty* p, <span class="keyword">const</span> wxSize&amp; value )
02384     {
02385         wxASSERT ( p );
02386         <span class="comment">//wxASSERT ( wxStrcmp(p-&gt;GetValueType()-&gt;GetCustomTypeName(),wxT("wxSize")) == 0 );</span>
02387         <span class="comment">//SetPropertyValue ( p, wxPG_VALUETYPE(void), (void*)&amp;value );</span>
02388         SetPropertyValue ( p, wxT(<span class="stringliteral">"wxSize"</span>), (<span class="keywordtype">void</span>*)&amp;value );
02389     }
<a name="l02391"></a><a class="code" href="classwxPropertyGridState.htm#wxPropertyGridStatea28">02391</a>     <span class="keyword">inline</span> <span class="keywordtype">void</span> SetPropertyValue ( wxPGProperty* p, <span class="keyword">const</span> wxArrayInt&amp; value )
02392     {
02393         wxASSERT ( p );
02394         <span class="comment">//wxASSERT ( wxStrcmp(p-&gt;GetValueType()-&gt;GetCustomTypeName(),wxT("wxArrayInt")) == 0 );</span>
02395         <span class="comment">//SetPropertyValue ( p, wxPG_VALUETYPE(void), (void*)&amp;value );</span>
02396         SetPropertyValue ( p, wxT(<span class="stringliteral">"wxArrayInt"</span>), (<span class="keywordtype">void</span>*)&amp;value );
02397     }
02398     
02399     <span class="keywordtype">void</span> SetPropertyValues ( <span class="keyword">const</span> wxList&amp; list, wxPGId default_category );
02400 
02401     <span class="keywordtype">void</span> SetPropertyValueUnspecified ( wxPGProperty* p );
02402 
02403     <span class="keywordtype">void</span> Sort ( wxPGProperty* p );
02404     <span class="keywordtype">void</span> Sort ();
02405 
02406 <span class="preprocessor">#ifdef _WX_WINDOW_H_BASE_</span>
02407 <span class="preprocessor"></span><span class="keyword">protected</span>:
02408 
02409     <span class="keywordtype">int</span> PrepareToAddItem ( wxPGProperty* property, wxPGPropertyWithChildren* scheduled_parent );
02410 
02414     wxPropertyGrid*             m_pPropGrid;
02415 
02417     wxPGPropertyWithChildren*   m_properties;
02418 
02420     wxPGRootPropertyClass       m_regularArray;
02421 
02423     wxPGRootPropertyClass*      m_abcArray;
02424 
02426     wxPGHashMapS2P              m_dictName;
02427 
02429     wxPropertyCategoryClass*    m_currentCategory;
02430 
02432     wxPGProperty*               m_selected;
02433 
02435     <span class="keywordtype">unsigned</span> <span class="keywordtype">char</span>               m_lastCaptionBottomnest;
02440     <span class="keywordtype">unsigned</span> <span class="keywordtype">char</span>               m_itemsAdded;
02441 
02443     <span class="keywordtype">unsigned</span> <span class="keywordtype">char</span>               m_anyModified;
02444 
02445 <span class="preprocessor">#endif</span>
02446 <span class="preprocessor"></span>};
02447 
<a name="l02448"></a><a class="code" href="classwxPGProperty.htm#wxPropertyCategoryClassa23">02448</a> <span class="keyword">inline</span> wxPropertyGrid* <a class="code" href="classwxPGProperty.htm#wxPropertyCategoryClassa23">wxPGProperty::GetGrid</a>()<span class="keyword"> const</span>
02449 <span class="keyword"></span>{
02450     <span class="keywordflow">return</span> m_parent-&gt;<a class="code" href="classwxPGPropertyWithChildren.htm#wxPropertyCategoryClassa33">GetParentState</a>()-&gt;<a class="code" href="classwxPropertyGridState.htm#wxPropertyGridStatea15">GetGrid</a>();
02451 }
02452 
02453 <span class="comment">// -----------------------------------------------------------------------</span>
02454 
<a name="l02460"></a><a class="code" href="classwxPropertyContainerMethods.htm">02460</a> <span class="keyword">class </span>WXDLLIMPEXP_PG wxPropertyContainerMethods
02461 <span class="comment">// BM_METHODS</span>
02462 {
02463 <span class="keyword">public</span>:
02464 
02474     <span class="keywordtype">void</span> AddPropertyChoice( wxPGId <span class="keywordtype">id</span>, <span class="keyword">const</span> wxString&amp; label, <span class="keywordtype">int</span> value = wxPG_INVALID_VALUE );
02475     <span class="keyword">inline</span> <span class="keywordtype">void</span> AddPropertyChoice( wxPGNameStr name, <span class="keyword">const</span> wxString&amp; label, <span class="keywordtype">int</span> value = wxPG_INVALID_VALUE )
02476     {
02477         AddPropertyChoice(GetPropertyByName(name),label,value);
02478     }
02479 
02485     <span class="keyword">static</span> wxPGProperty* CreatePropertyByClass(<span class="keyword">const</span> wxString &amp;classname,
02486                                                <span class="keyword">const</span> wxString &amp;label,
02487                                                <span class="keyword">const</span> wxString &amp;name);
02488 
02497     <span class="keyword">static</span> wxPGProperty* CreatePropertyByType(<span class="keyword">const</span> wxString &amp;valuetype,
02498                                               <span class="keyword">const</span> wxString &amp;label,
02499                                               <span class="keyword">const</span> wxString &amp;name);
02500 
02504     <span class="keyword">static</span> wxPGChoices* GetChoicesArray(size_t <span class="keywordtype">id</span>);
02505 
<a name="l02507"></a><a class="code" href="classwxPropertyContainerMethods.htm#wxPropertyGridManagera46">02507</a>     <span class="keyword">inline</span> wxPGId GetNextSibling ( wxPGId <span class="keywordtype">id</span> )
02508     {
02509         <span class="keywordflow">return</span> wxPropertyGridState::GetNextSibling(<span class="keywordtype">id</span>);
02510     }
02511     <span class="keyword">inline</span> wxPGId GetNextSibling ( wxPGNameStr name )
02512     {
02513         <span class="keywordflow">return</span> wxPropertyGridState::GetNextSibling(GetPropertyByName(name));
02514     }
02515 
02528     <span class="keyword">static</span> wxString GetPropertyAttributes( wxPGId <span class="keywordtype">id</span>, <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> flagmask = 0xFFFF );
02529 
02534     <span class="keyword">static</span> <span class="keywordtype">void</span> SetPropertyAttributes( wxPGId <span class="keywordtype">id</span>, <span class="keyword">const</span> wxString&amp; attributes );
02535 
02540     wxPGId GetPropertyByName( wxPGNameStr name ) <span class="keyword">const</span>;
02541 
02546     wxPGChoices&amp; GetPropertyChoices( wxPGId <span class="keywordtype">id</span> );
02547     <span class="keyword">inline</span> wxPGChoices&amp; GetPropertyChoices( wxPGNameStr name )
02548     {
02549         <span class="keywordflow">return</span> GetPropertyChoices(GetPropertyByName(name));
02550     }
02551 
<a name="l02553"></a><a class="code" href="classwxPropertyContainerMethods.htm#wxPropertyGridManagera61">02553</a>     <span class="keyword">inline</span> <span class="keyword">const</span> wxChar* GetPropertyClassName ( wxPGId <span class="keywordtype">id</span> )<span class="keyword"> const</span>
02554 <span class="keyword">    </span>{
02555         <span class="keywordflow">return</span> wxPGIdToPtr(<span class="keywordtype">id</span>)-&gt;GetClassName();
02556     }
02557 
<a name="l02559"></a><a class="code" href="classwxPropertyContainerMethods.htm#wxPropertyGridManagera60">02559</a>     <span class="keyword">inline</span> <span class="keyword">const</span> wxChar* GetPropertyClassName ( wxPGNameStr name )<span class="keyword"> const</span>
02560 <span class="keyword">    </span>{
02561         <span class="keywordflow">return</span> wxPGIdToPtr(GetPropertyByNameWithAssert(name))-&gt;GetClassName();
02562     }
02563 
02564 <span class="preprocessor">#if wxPG_USE_CLIENT_DATA</span>
02565 <span class="preprocessor"></span>
02566     <span class="keyword">inline</span> <span class="keywordtype">void</span>* GetPropertyClientData ( wxPGId <span class="keywordtype">id</span> )<span class="keyword"> const</span>
02567 <span class="keyword">    </span>{
02568         wxASSERT ( wxPGIdOk(<span class="keywordtype">id</span>) );
02569         <span class="keywordflow">return</span> wxPGIdToPtr(<span class="keywordtype">id</span>)-&gt;GetClientData();
02570     }
02572     <span class="keyword">inline</span> <span class="keywordtype">void</span>* GetPropertyClientData ( wxPGNameStr name )<span class="keyword"> const</span>
02573 <span class="keyword">    </span>{
02574         <span class="keywordflow">return</span> GetPropertyClientData(GetPropertyByName(name));
02575     }
02576 <span class="preprocessor">#endif</span>
02577 <span class="preprocessor"></span>
<a name="l02579"></a><a class="code" href="classwxPropertyContainerMethods.htm#wxPropertyGridManagera65">02579</a>     <span class="keyword">inline</span> <span class="keyword">const</span> wxPGEditor* GetPropertyEditor( wxPGId <span class="keywordtype">id</span> )<span class="keyword"> const</span>
02580 <span class="keyword">    </span>{
02581         wxPGProperty* p = wxPGIdToPtr(<span class="keywordtype">id</span>);
02582         wxASSERT(p);
02583         <span class="keywordflow">return</span> p-&gt;<a class="code" href="classwxPGProperty.htm#wxPropertyCategoryClassa21">GetEditorClass</a>();
02584     }
02585 
02586     <span class="keyword">inline</span> <span class="keyword">const</span> wxPGEditor* GetPropertyEditor( wxPGNameStr name )<span class="keyword"> const</span>
02587 <span class="keyword">    </span>{
02588         <span class="keywordflow">return</span> GetPropertyEditor(GetPropertyByName(name));
02589     }
02590 
<a name="l02592"></a><a class="code" href="classwxPropertyContainerMethods.htm#wxPropertyGridManagera69">02592</a>     <span class="keyword">inline</span> wxBitmap* GetPropertyImage ( wxPGId <span class="keywordtype">id</span> )<span class="keyword"> const</span>
02593 <span class="keyword">    </span>{
02594         wxPGProperty* p = wxPGIdToPtr(<span class="keywordtype">id</span>);
02595         wxASSERT(p);
02596         <span class="keywordflow">if</span> ( p-&gt;<a class="code" href="classwxPGProperty.htm#wxPropertyCategoryClassa18">GetDataExt</a>() )
02597             <span class="keywordflow">return</span> p-&gt;<a class="code" href="classwxPGProperty.htm#wxPropertyCategoryClassa18">GetDataExt</a>()-&gt;<a class="code" href="classwxPGPropertyDataExt.htm#wxPGPropertyDataExto2">m_valueBitmap</a>;
02598         <span class="keywordflow">return</span> (wxBitmap*) NULL;
02599     }
02600 
02601     <span class="keyword">inline</span> wxBitmap* GetPropertyImage ( wxPGNameStr name )<span class="keyword"> const</span>
02602 <span class="keyword">    </span>{
02603         <span class="keywordflow">return</span> GetPropertyImage(GetPropertyByName(name));
02604     }
02605 
<a name="l02607"></a><a class="code" href="classwxPropertyContainerMethods.htm#wxPropertyGridManagera71">02607</a>     <span class="keyword">inline</span> <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> GetPropertyIndex ( wxPGId <span class="keywordtype">id</span> )
02608     {
02609         wxASSERT ( wxPGIdIsOk(<span class="keywordtype">id</span>) );
02610         <span class="keywordflow">return</span> wxPGIdToPtr(<span class="keywordtype">id</span>)-&gt;GetIndexInParent();
02611     }
02612 
<a name="l02614"></a><a class="code" href="classwxPropertyContainerMethods.htm#wxPropertyGridManagera70">02614</a>     <span class="keyword">inline</span> <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> GetPropertyIndex ( wxPGNameStr name )
02615     {
02616         <span class="keywordflow">return</span> GetPropertyIndex ( GetPropertyByName(name) );
02617     }
02618 
<a name="l02620"></a><a class="code" href="classwxPropertyContainerMethods.htm#wxPropertyGridManagera73">02620</a>     <span class="keyword">inline</span> <span class="keyword">const</span> wxString&amp; GetPropertyLabel ( wxPGId <span class="keywordtype">id</span> )
02621     {
02622         wxASSERT ( wxPGIdIsOk(<span class="keywordtype">id</span>) );
02623         <span class="keywordflow">return</span> wxPGIdToPtr(<span class="keywordtype">id</span>)-&gt;GetLabel();
02624     }
02625     <span class="keyword">inline</span> <span class="keyword">const</span> wxString&amp; GetPropertyLabel ( wxPGNameStr name )
02626     {
02627         <span class="keywordflow">return</span> GetPropertyLabel ( GetPropertyByName(name) );
02628     }
02629 
<a name="l02631"></a><a class="code" href="classwxPropertyContainerMethods.htm#wxPropertyGridManagera74">02631</a>     <span class="keyword">inline</span> <span class="keyword">const</span> wxString&amp; GetPropertyName ( wxPGId <span class="keywordtype">id</span> )
02632     {
02633         wxASSERT ( wxPGIdIsOk(<span class="keywordtype">id</span>) );
02634         <span class="keywordflow">return</span> wxPGIdToPtr(<span class="keywordtype">id</span>)-&gt;GetName();
02635     }
02636 
<a name="l02638"></a><a class="code" href="classwxPropertyContainerMethods.htm#wxPropertyGridManagera76">02638</a>     <span class="keyword">inline</span> wxPGId GetPropertyParent ( wxPGId <span class="keywordtype">id</span> )
02639     {
02640         wxASSERT ( wxPGIdIsOk(<span class="keywordtype">id</span>) );
02641         <span class="keywordflow">return</span> wxPGIdGen(wxPGIdToPtr(<span class="keywordtype">id</span>)-&gt;GetParent());
02642     }
02643 
<a name="l02645"></a><a class="code" href="classwxPropertyContainerMethods.htm#wxPropertyGridManagera75">02645</a>     <span class="keyword">inline</span> wxPGId GetPropertyParent ( wxPGNameStr name )
02646     {
02647         <span class="keywordflow">return</span> GetPropertyParent ( GetPropertyByName(name) );
02648     }
02649 
<a name="l02651"></a><a class="code" href="classwxPropertyContainerMethods.htm#wxPropertyGridManagera78">02651</a>     <span class="keyword">inline</span> <span class="keywordtype">int</span> GetPropertyPriority ( wxPGId <span class="keywordtype">id</span> )
02652     {
02653         wxPGProperty* p = wxPGIdToPtr(<span class="keywordtype">id</span>);
02654         <span class="keywordflow">if</span> ( p &amp;&amp; p-&gt;<a class="code" href="classwxPGProperty.htm#wxPropertyCategoryClassa43">IsFlagSet</a>(<a class="code" href="group__propflags.htm#ga2">wxPG_PROP_HIDEABLE</a>) )
02655             <span class="keywordflow">return</span> wxPG_LOW;
02656         <span class="keywordflow">return</span> wxPG_HIGH;
02657     }
02658 
<a name="l02660"></a><a class="code" href="classwxPropertyContainerMethods.htm#wxPropertyGridManagera77">02660</a>     <span class="keyword">inline</span> <span class="keywordtype">int</span> GetPropertyPriority( wxPGNameStr name )
02661     {
02662         <span class="keywordflow">return</span> GetPropertyPriority(GetPropertyByNameWithAssert(name));
02663     }
02664 
<a name="l02666"></a><a class="code" href="classwxPropertyContainerMethods.htm#wxPropertyGridManagera67">02666</a>     <span class="keyword">inline</span> wxString GetPropertyHelpString ( wxPGId <span class="keywordtype">id</span> )<span class="keyword"> const</span>
02667 <span class="keyword">    </span>{
02668         wxASSERT ( wxPGIdIsOk(<span class="keywordtype">id</span>) );
02669         <span class="keywordflow">return</span> wxPGIdToPtr(<span class="keywordtype">id</span>)-&gt;GetHelpString();
02670     }
02671 
<a name="l02673"></a><a class="code" href="classwxPropertyContainerMethods.htm#wxPropertyGridManagera66">02673</a>     <span class="keyword">inline</span> wxString GetPropertyHelpString ( wxPGNameStr name )<span class="keyword"> const</span>
02674 <span class="keyword">    </span>{
02675         <span class="keywordflow">return</span> GetPropertyHelpString(GetPropertyByNameWithAssert(name));
02676     }
02677 
02682     <span class="keyword">static</span> wxString GetPropertyShortClassName( wxPGId <span class="keywordtype">id</span> );
02683 
02684 <span class="preprocessor">#if wxUSE_VALIDATORS</span>
02685 <span class="preprocessor"></span>
02688     <span class="keyword">inline</span> wxValidator* GetPropertyValidator ( wxPGId <span class="keywordtype">id</span> )
02689     {
02690         wxASSERT( wxPGIdIsOk(<span class="keywordtype">id</span>) );
02691         <span class="keywordflow">return</span> wxPGIdToPtr(<span class="keywordtype">id</span>)-&gt;GetValidator();
02692     }
02693     <span class="keyword">inline</span> wxValidator* GetPropertyValidator ( wxPGNameStr name )
02694     {
02695         <span class="keywordflow">return</span> GetPropertyValidator(GetPropertyByName(name));
02696     }
02697 <span class="preprocessor">#endif</span>
02698 <span class="preprocessor"></span>
<a name="l02702"></a><a class="code" href="classwxPropertyContainerMethods.htm#wxPropertyGridManagera80">02702</a>     <span class="keyword">inline</span> wxVariant GetPropertyValue ( wxPGId <span class="keywordtype">id</span> )
02703     {
02704         wxASSERT ( wxPGIdIsOk(<span class="keywordtype">id</span>) );
02705         <span class="keywordflow">return</span> wxPGIdToPtr(<span class="keywordtype">id</span>)-&gt;GetValueAsVariant();
02706     }
02707 
<a name="l02711"></a><a class="code" href="classwxPropertyContainerMethods.htm#wxPropertyGridManagera79">02711</a>     <span class="keyword">inline</span> wxVariant GetPropertyValue ( wxPGNameStr name )
02712     {
02713         wxPGId <span class="keywordtype">id</span> = GetPropertyByName(name);
02714         wxASSERT ( wxPGIdIsOk(<span class="keywordtype">id</span>) );
02715         <span class="keywordflow">return</span> wxPGIdToPtr(<span class="keywordtype">id</span>)-&gt;GetValueAsVariant();
02716     }
02717 
02718     <span class="keyword">static</span> wxString GetPropertyValueAsString ( wxPGId <span class="keywordtype">id</span> );
02719     <span class="keyword">static</span> <span class="keywordtype">long</span> GetPropertyValueAsLong ( wxPGId <span class="keywordtype">id</span> );
02720     <span class="keyword">static</span> <span class="keyword">inline</span> <span class="keywordtype">int</span> GetPropertyValueAsInt ( wxPGId <span class="keywordtype">id</span> ) { <span class="keywordflow">return</span> (<span class="keywordtype">int</span>)GetPropertyValueAsLong(<span class="keywordtype">id</span>); }
02721     <span class="keyword">static</span> <span class="keywordtype">bool</span> GetPropertyValueAsBool ( wxPGId <span class="keywordtype">id</span> );
02722     <span class="keyword">static</span> <span class="keywordtype">double</span> GetPropertyValueAsDouble ( wxPGId <span class="keywordtype">id</span> );
02723     <span class="keyword">static</span> <span class="keyword">const</span> wxArrayString&amp; GetPropertyValueAsArrayString ( wxPGId <span class="keywordtype">id</span> );
02724     <span class="keyword">static</span> <span class="keyword">const</span> wxObject* GetPropertyValueAsWxObjectPtr ( wxPGId <span class="keywordtype">id</span> );
02725     <span class="keyword">static</span> <span class="keywordtype">void</span>* GetPropertyValueAsVoidPtr ( wxPGId <span class="keywordtype">id</span> );
02726     
02727     <span class="keyword">static</span> <span class="keyword">inline</span> <span class="keyword">const</span> wxPoint&amp; GetPropertyValueAsPoint ( wxPGId <span class="keywordtype">id</span> )
02728     {
02729         wxPGProperty* p = wxPGIdToPtr(<span class="keywordtype">id</span>);
02730         wxASSERT ( p );
02731     
02732         <span class="keywordflow">if</span> ( wxStrcmp(p-&gt;<a class="code" href="classwxPGProperty.htm#wxPropertyCategoryClassa39">GetValueType</a>()-&gt;<a class="code" href="classwxPGValueType.htm#wxPGValueTypea2">GetCustomTypeName</a>(),wxT(<span class="stringliteral">"wxPoint"</span>)) != 0 )
02733         {
02734             wxPGGetFailed(p,wxT(<span class="stringliteral">"wxPoint"</span>));
02735             <span class="keywordflow">return</span> *((<span class="keyword">const</span> wxPoint*)NULL);
02736         }
02737         <span class="keywordflow">return</span> *((<span class="keyword">const</span> wxPoint*)wxPGVariantToVoidPtr(p-&gt;<a class="code" href="classwxPGProperty.htm#wxPropertyCategoryClassa6">DoGetValue</a>()));
02738     }
02739 
02740     <span class="keyword">static</span> <span class="keyword">inline</span> <span class="keyword">const</span> wxSize&amp; GetPropertyValueAsSize ( wxPGId <span class="keywordtype">id</span> )
02741     {
02742         wxPGProperty* p = wxPGIdToPtr(<span class="keywordtype">id</span>);
02743         wxASSERT ( p );
02744 
02745         <span class="keywordflow">if</span> ( wxStrcmp(p-&gt;<a class="code" href="classwxPGProperty.htm#wxPropertyCategoryClassa39">GetValueType</a>()-&gt;<a class="code" href="classwxPGValueType.htm#wxPGValueTypea2">GetCustomTypeName</a>(),wxT(<span class="stringliteral">"wxSize"</span>)) != 0 )
02746         {
02747             wxPGGetFailed(p,wxT(<span class="stringliteral">"wxSize"</span>));
02748             <span class="keywordflow">return</span> *((<span class="keyword">const</span> wxSize*)NULL);
02749         }
02750         <span class="keywordflow">return</span> *((<span class="keyword">const</span> wxSize*)wxPGVariantToVoidPtr(p-&gt;<a class="code" href="classwxPGProperty.htm#wxPropertyCategoryClassa6">DoGetValue</a>()));
02751     }
02752 
02753     <span class="keyword">static</span> <span class="keyword">inline</span> <span class="keyword">const</span> wxArrayInt&amp; GetPropertyValueAsArrayInt ( wxPGId <span class="keywordtype">id</span> )
02754     {
02755         wxPGProperty* p = wxPGIdToPtr(<span class="keywordtype">id</span>);
02756         wxASSERT ( p );
02757 
02758         <span class="keywordflow">if</span> ( wxStrcmp(p-&gt;<a class="code" href="classwxPGProperty.htm#wxPropertyCategoryClassa39">GetValueType</a>()-&gt;<a class="code" href="classwxPGValueType.htm#wxPGValueTypea2">GetCustomTypeName</a>(),wxT(<span class="stringliteral">"wxArrayInt"</span>)) != 0 )
02759         {
02760             wxPGGetFailed(p,wxT(<span class="stringliteral">"wxArrayInt"</span>));
02761             <span class="keywordflow">return</span> *((<span class="keyword">const</span> wxArrayInt*)NULL);
02762         }
02763         <span class="keywordflow">return</span> *((<span class="keyword">const</span> wxArrayInt*)wxPGVariantToVoidPtr(p-&gt;<a class="code" href="classwxPGProperty.htm#wxPropertyCategoryClassa6">DoGetValue</a>()));
02764     }
02765 
02766     <span class="keyword">inline</span> wxString GetPropertyValueAsString ( wxPGNameStr name )<span class="keyword"> const</span>
02767 <span class="keyword">    </span>{
02768         <span class="keywordflow">return</span> GetPropertyValueAsString ( GetPropertyByName(name) );
02769     }
02770     <span class="keyword">inline</span> <span class="keywordtype">long</span> GetPropertyValueAsLong ( wxPGNameStr name )<span class="keyword"> const</span>
02771 <span class="keyword">    </span>{
02772         <span class="keywordflow">return</span> GetPropertyValueAsLong ( GetPropertyByName(name) );
02773     }
02774     <span class="keyword">inline</span> <span class="keywordtype">int</span> GetPropertyValueAsInt ( wxPGNameStr name )<span class="keyword"> const</span>
02775 <span class="keyword">    </span>{
02776         <span class="keywordflow">return</span> GetPropertyValueAsInt ( GetPropertyByName(name) );
02777     }
02778     <span class="keyword">inline</span> <span class="keywordtype">bool</span> GetPropertyValueAsBool ( wxPGNameStr name )<span class="keyword"> const</span>
02779 <span class="keyword">    </span>{
02780         <span class="keywordflow">return</span> GetPropertyValueAsBool ( GetPropertyByName(name) );
02781     }
02782     <span class="keyword">inline</span> <span class="keywordtype">double</span> GetPropertyValueAsDouble ( wxPGNameStr name )<span class="keyword"> const</span>
02783 <span class="keyword">    </span>{
02784         <span class="keywordflow">return</span> GetPropertyValueAsDouble ( GetPropertyByName(name) );
02785     }
02786     <span class="keyword">inline</span> <span class="keyword">const</span> wxArrayString&amp; GetPropertyValueAsArrayString ( wxPGNameStr name )<span class="keyword"> const</span>
02787 <span class="keyword">    </span>{
02788         <span class="keywordflow">return</span> GetPropertyValueAsArrayString ( GetPropertyByName(name) );
02789     }
02790     <span class="keyword">inline</span> <span class="keyword">const</span> wxObject* GetPropertyValueAsWxObjectPtr ( wxPGNameStr name )<span class="keyword"> const</span>
02791 <span class="keyword">    </span>{
02792         <span class="keywordflow">return</span> GetPropertyValueAsWxObjectPtr ( GetPropertyByName(name) );
02793     }
02794     <span class="keyword">inline</span> <span class="keyword">const</span> wxPoint&amp; GetPropertyValueAsPoint ( wxPGNameStr name )<span class="keyword"> const</span>
02795 <span class="keyword">    </span>{
02796         <span class="keywordflow">return</span> GetPropertyValueAsPoint ( GetPropertyByName(name) );
02797     }
02798     <span class="keyword">inline</span> <span class="keyword">const</span> wxSize&amp; GetPropertyValueAsSize ( wxPGNameStr name )<span class="keyword"> const</span>
02799 <span class="keyword">    </span>{
02800         <span class="keywordflow">return</span> GetPropertyValueAsSize ( GetPropertyByName(name) );
02801     }
02802     <span class="keyword">inline</span> <span class="keyword">const</span> wxArrayInt&amp; GetPropertyValueAsArrayInt ( wxPGNameStr name )<span class="keyword"> const</span>
02803 <span class="keyword">    </span>{
02804         <span class="keywordflow">return</span> GetPropertyValueAsArrayInt ( GetPropertyByName(name) );
02805     }
02806 
<a name="l02810"></a><a class="code" href="classwxPropertyContainerMethods.htm#wxPropertyGridManagera93">02810</a>     <span class="keyword">const</span> wxPGValueType* GetPropertyValueType ( wxPGId <span class="keywordtype">id</span> )
02811     {
02812         wxASSERT ( wxPGIdIsOk(<span class="keywordtype">id</span>) );
02813         <span class="keywordflow">return</span> wxPGIdToPtr(<span class="keywordtype">id</span>)-&gt;GetValueType();
02814     }
02815     <span class="keyword">const</span> wxPGValueType* GetPropertyValueType ( wxPGNameStr name )
02816     {
02817         <span class="keywordflow">return</span> wxPGIdToPtr( GetPropertyByNameWithAssert(name) )-&gt;GetValueType();
02818     }
02819 
02820     <span class="keyword">inline</span> wxPropertyGridState* GetState()<span class="keyword"> const </span>{ <span class="keywordflow">return</span> m_pState; }
02821 
02824     <span class="keyword">static</span> wxPGValueType* GetValueType( <span class="keyword">const</span> wxString &amp;type );
02825 
02826 <span class="preprocessor">#if wxPG_INCLUDE_ADVPROPS</span>
02827 <span class="preprocessor"></span>
02831     <span class="keyword">static</span> <span class="keywordtype">void</span> InitAllTypeHandlers ();
02832 <span class="preprocessor">#else</span>
02833 <span class="preprocessor"></span>    <span class="keyword">static</span> <span class="keyword">inline</span> <span class="keywordtype">void</span> InitAllTypeHandlers () { }
02834 <span class="preprocessor">#endif</span>
02835 <span class="preprocessor"></span>
<a name="l02837"></a><a class="code" href="classwxPropertyContainerMethods.htm#wxPropertyGridManagera112">02837</a>     <span class="keyword">inline</span> <span class="keywordtype">bool</span> IsPropertyEnabled ( wxPGId <span class="keywordtype">id</span> )<span class="keyword"> const</span>
02838 <span class="keyword">    </span>{
02839         <span class="keywordflow">return</span> (!(wxPGIdToPtr(<span class="keywordtype">id</span>)-&gt;GetFlags() &amp; <a class="code" href="group__propflags.htm#ga1">wxPG_PROP_DISABLED</a>))?TRUE:FALSE;
02840     }
02841 
<a name="l02843"></a><a class="code" href="classwxPropertyContainerMethods.htm#wxPropertyGridManagera111">02843</a>     <span class="keyword">inline</span> <span class="keywordtype">bool</span> IsPropertyEnabled ( wxPGNameStr name ) { <span class="keywordflow">return</span> IsPropertyEnabled(GetPropertyByName(name)); }
02844 
<a name="l02846"></a><a class="code" href="classwxPropertyContainerMethods.htm#wxPropertyGridManagera122">02846</a>     <span class="keyword">inline</span> <span class="keywordtype">bool</span> IsPropertyValueType ( wxPGId <span class="keywordtype">id</span>, <span class="keyword">const</span> wxChar* typestr )
02847     {
02848         wxASSERT ( wxPGIdIsOk(<span class="keywordtype">id</span>) );
02849         <span class="keywordflow">return</span> (wxStrcmp(wxPGIdToPtr(<span class="keywordtype">id</span>)-&gt;GetValueType()-&gt;GetTypeName(),typestr) == 0);
02850     }
02851 
<a name="l02853"></a><a class="code" href="classwxPropertyContainerMethods.htm#wxPropertyGridManagera121">02853</a>     <span class="keyword">inline</span> <span class="keywordtype">bool</span> IsPropertyValueType ( wxPGId <span class="keywordtype">id</span>, <span class="keyword">const</span> wxPGValueType* valuetype )
02854     {
02855         wxASSERT ( wxPGIdIsOk(<span class="keywordtype">id</span>) );
02856         <span class="keywordflow">return</span> ( wxPGIdToPtr(<span class="keywordtype">id</span>)-&gt;GetValueType() == valuetype );
02857     }
02858 
<a name="l02860"></a><a class="code" href="classwxPropertyContainerMethods.htm#wxPropertyGridManagera120">02860</a>     <span class="keyword">inline</span> <span class="keywordtype">bool</span> IsPropertyValueType ( wxPGId <span class="keywordtype">id</span>, <span class="keyword">const</span> wxClassInfo* classinfo )
02861     {
02862         <span class="keywordflow">return</span> IsPropertyValueType(<span class="keywordtype">id</span>,classinfo-&gt;GetClassName());
02863     }
02864 
<a name="l02866"></a><a class="code" href="classwxPropertyContainerMethods.htm#wxPropertyGridManagera119">02866</a>     <span class="keyword">inline</span> <span class="keywordtype">bool</span> IsPropertyValueType ( wxPGNameStr name, <span class="keyword">const</span> wxChar* typestr )
02867     {
02868         <span class="keywordflow">return</span> IsPropertyValueType(GetPropertyByName(name),typestr);
02869     }
02870 
<a name="l02872"></a><a class="code" href="classwxPropertyContainerMethods.htm#wxPropertyGridManagera118">02872</a>     <span class="keyword">inline</span> <span class="keywordtype">bool</span> IsPropertyValueType ( wxPGNameStr name, <span class="keyword">const</span> wxPGValueType* valuetype )
02873     {
02874         <span class="keywordflow">return</span> IsPropertyValueType(GetPropertyByName(name),valuetype);
02875     }
02876 
<a name="l02878"></a><a class="code" href="classwxPropertyContainerMethods.htm#wxPropertyGridManagera117">02878</a>     <span class="keyword">inline</span> <span class="keywordtype">bool</span> IsPropertyValueType ( wxPGNameStr name, <span class="keyword">const</span> wxClassInfo* classinfo )
02879     {
02880         <span class="keywordflow">return</span> IsPropertyValueType(GetPropertyByName(name),classinfo);
02881     }
02882 
02886     <span class="keyword">static</span> <span class="keywordtype">bool</span> IsPropertyExpanded ( wxPGId <span class="keywordtype">id</span> );
02887     <span class="keyword">inline</span> <span class="keywordtype">bool</span> IsPropertyExpanded ( wxPGNameStr name ) { <span class="keywordflow">return</span> IsPropertyExpanded(GetPropertyByName(name)); }
02888 
<a name="l02894"></a><a class="code" href="classwxPropertyContainerMethods.htm#wxPropertyGridManagere18">02894</a>     <span class="keyword">static</span> <span class="keyword">inline</span> <span class="keywordtype">bool</span> IsPropertyKindOf( wxPGId <span class="keywordtype">id</span>, <a class="code" href="structwxPGPropertyClassInfo.htm">wxPGPropertyClassInfo</a>&amp; info )
02895     {
02896         <span class="keywordflow">return</span> wxPGIdToPtr(<span class="keywordtype">id</span>)-&gt;IsKindOf(info);
02897     }
02898     <span class="keyword">inline</span> <span class="keywordtype">bool</span> IsPropertyKindOf( wxPGNameStr name, <a class="code" href="structwxPGPropertyClassInfo.htm">wxPGPropertyClassInfo</a>&amp; info )
02899     {
02900         <span class="keywordflow">return</span> wxPGIdToPtr(GetPropertyByName(name))-&gt;IsKindOf(info);
02901     }
02902 
<a name="l02906"></a><a class="code" href="classwxPropertyContainerMethods.htm#wxPropertyGridManagera107">02906</a>     <span class="keyword">inline</span> <span class="keywordtype">bool</span> IsModified ( wxPGId <span class="keywordtype">id</span> )<span class="keyword"> const</span>
02907 <span class="keyword">    </span>{
02908         wxPGProperty* p = wxPGIdToPtr ( <span class="keywordtype">id</span> );
02909         <span class="keywordflow">if</span> ( !p ) <span class="keywordflow">return</span> FALSE;
02910         <span class="keywordflow">return</span> ( (p-&gt;<a class="code" href="classwxPGProperty.htm#wxPropertyCategoryClassa22">GetFlags</a>() &amp; <a class="code" href="group__propflags.htm#ga0">wxPG_PROP_MODIFIED</a>) ? TRUE : FALSE );
02911     }
02912 
02913     <span class="keyword">inline</span> <span class="keywordtype">bool</span> IsModified ( wxPGNameStr name ) { <span class="keywordflow">return</span> IsModified(GetPropertyByName(name)); }
02914 
<a name="l02916"></a><a class="code" href="classwxPropertyContainerMethods.htm#wxPropertyGrida139">02916</a>     <span class="keyword">inline</span> <span class="keywordtype">bool</span> IsPropertyCategory ( wxPGId <span class="keywordtype">id</span> )<span class="keyword"> const</span>
02917 <span class="keyword">    </span>{
02918         <span class="keywordflow">return</span> (wxPGIdToPtr(<span class="keywordtype">id</span>)-&gt;GetParentingType()&gt;0)?TRUE:FALSE;
02919     }
02920     <span class="keyword">inline</span> <span class="keywordtype">bool</span> IsPropertyCategory ( wxPGNameStr name ) { <span class="keywordflow">return</span> IsPropertyCategory(GetPropertyByName(name)); }
02921 
<a name="l02925"></a><a class="code" href="classwxPropertyContainerMethods.htm#wxPropertyGridManagera116">02925</a>     <span class="keyword">inline</span> <span class="keywordtype">bool</span> IsPropertyModified ( wxPGId <span class="keywordtype">id</span> )<span class="keyword"> const</span>
02926 <span class="keyword">    </span>{
02927         wxPGProperty* p = wxPGIdToPtr(<span class="keywordtype">id</span>);
02928         <span class="keywordflow">if</span> ( !p ) <span class="keywordflow">return</span> FALSE;
02929         <span class="keywordflow">return</span> ( (p-&gt;<a class="code" href="classwxPGProperty.htm#wxPropertyCategoryClassa22">GetFlags</a>() &amp; <a class="code" href="group__propflags.htm#ga0">wxPG_PROP_MODIFIED</a>) ? TRUE : FALSE );
02930     }
02931     <span class="keyword">inline</span> <span class="keywordtype">bool</span> IsPropertyModified ( wxPGNameStr name ) { <span class="keywordflow">return</span> IsPropertyModified(GetPropertyByName(name)); }
02932 
<a name="l02935"></a><a class="code" href="classwxPropertyContainerMethods.htm#wxPropertyGridManagera124">02935</a>     <span class="keyword">inline</span> <span class="keywordtype">bool</span> IsPropertyValueUnspecified ( wxPGId <span class="keywordtype">id</span> )<span class="keyword"> const</span>
02936 <span class="keyword">    </span>{
02937         wxPGProperty* p = wxPGIdToPtr(<span class="keywordtype">id</span>);
02938         <span class="keywordflow">if</span> ( !p ) <span class="keywordflow">return</span> FALSE;
02939         <span class="keywordflow">return</span> ( (p-&gt;<a class="code" href="classwxPGProperty.htm#wxPropertyCategoryClassa22">GetFlags</a>() &amp; <a class="code" href="group__propflags.htm#ga5">wxPG_PROP_UNSPECIFIED</a>) ? TRUE : FALSE );
02940     }
02941     <span class="keyword">inline</span> <span class="keywordtype">bool</span> IsPropertyValueUnspecified ( wxPGNameStr name ) { <span class="keywordflow">return</span> IsPropertyValueUnspecified(GetPropertyByName(name)); }
02942 
02946     <span class="keyword">static</span> <span class="keywordtype">void</span> RegisterAdvancedPropertyClasses();
02947 
02951     <span class="keyword">static</span> <span class="keywordtype">bool</span> RegisterPropertyClass ( <span class="keyword">const</span> wxChar* name, <a class="code" href="structwxPGPropertyClassInfo.htm">wxPGPropertyClassInfo</a>* classinfo );
02952 
02957     <span class="keyword">static</span> <span class="keywordtype">void</span> SetBoolChoices ( <span class="keyword">const</span> wxChar* true_choice, <span class="keyword">const</span> wxChar* false_choice );
02958 
02961     <span class="keyword">static</span> <span class="keywordtype">void</span> SetPropertyChoices(wxPGId <span class="keywordtype">id</span>, wxPGChoices&amp; choices);
02962 
<a name="l02965"></a><a class="code" href="classwxPropertyContainerMethods.htm#wxPropertyGridManagera139">02965</a>     <span class="keyword">inline</span> <span class="keywordtype">void</span> SetPropertyChoices(wxPGNameStr name, wxPGChoices&amp; choices)
02966     {
02967         SetPropertyChoices(GetPropertyByName(name),choices);
02968     }
02969 
<a name="l02973"></a><a class="code" href="classwxPropertyContainerMethods.htm#wxPropertyGridManagera141">02973</a>     <span class="keyword">inline</span> <span class="keywordtype">void</span> SetPropertyChoicesExclusive( wxPGId <span class="keywordtype">id</span> )
02974     {
02975         wxASSERT( wxPGIdIsOk(<span class="keywordtype">id</span>) );
02976         wxPGIdToPtr(<span class="keywordtype">id</span>)-&gt;SetChoicesExclusive();
02977     }
02978     <span class="keyword">inline</span> <span class="keywordtype">void</span> SetPropertyChoicesExclusive( wxPGNameStr name )
02979     {
02980         wxPGId <span class="keywordtype">id</span> = GetPropertyByName(name);
02981         wxASSERT( wxPGIdIsOk(<span class="keywordtype">id</span>) );
02982         wxPGIdToPtr(<span class="keywordtype">id</span>)-&gt;SetChoicesExclusive();
02983     }
02984 
02996     <span class="keyword">static</span> <span class="keywordtype">void</span> SetPropertyAttribute ( wxPGId <span class="keywordtype">id</span>, <span class="keywordtype">int</span> attrid, wxVariant value, <span class="keywordtype">long</span> arg_flags = 0 );
02997     <span class="keyword">inline</span> <span class="keywordtype">void</span> SetPropertyAttribute ( wxPGNameStr name, <span class="keywordtype">int</span> attrid, wxVariant value, <span class="keywordtype">long</span> arg_flags = 0  )
02998     {
02999         SetPropertyAttribute(GetPropertyByName(name),attrid,value,arg_flags);
03000     }
03001 
<a name="l03003"></a><a class="code" href="classwxPropertyContainerMethods.htm#wxPropertyGridManagera147">03003</a>     <span class="keyword">inline</span> <span class="keywordtype">void</span> SetPropertyEditor ( wxPGId <span class="keywordtype">id</span>, <span class="keyword">const</span> wxPGEditor* editor )
03004     {
03005         wxPGProperty* p = wxPGIdToPtr(<span class="keywordtype">id</span>);
03006         wxASSERT(p);
03007         p-&gt;<a class="code" href="classwxPGProperty.htm#wxPropertyCategoryClassa58">SetEditor</a>(editor);
03008         RefreshProperty(p);
03009     }
<a name="l03011"></a><a class="code" href="classwxPropertyContainerMethods.htm#wxPropertyGridManagera146">03011</a>     <span class="keyword">inline</span> <span class="keywordtype">void</span> SetPropertyEditor ( wxPGNameStr name, <span class="keyword">const</span> wxPGEditor* editor )
03012     {
03013         SetPropertyEditor(GetPropertyByName(name),editor);
03014     }
03015 
03016 <span class="preprocessor">#if wxPG_USE_CLIENT_DATA</span>
03017 <span class="preprocessor"></span>
03018     <span class="keyword">inline</span> <span class="keywordtype">void</span> SetPropertyClientData ( wxPGId <span class="keywordtype">id</span>, <span class="keywordtype">void</span>* clientData )
03019     {
03020         wxASSERT ( wxPGIdOk(<span class="keywordtype">id</span>) );
03021         wxPGIdToPtr(<span class="keywordtype">id</span>)-&gt;SetClientData();
03022     }
03024     <span class="keyword">inline</span> <span class="keywordtype">void</span> SetPropertyClientData ( wxPGNameStr name, <span class="keywordtype">void</span>* clientData )
03025     {
03026         SetPropertyClientData(GetPropertyByName(name),clientData);
03027     }
03028 <span class="preprocessor">#endif</span>
03029 <span class="preprocessor"></span>
<a name="l03033"></a><a class="code" href="classwxPropertyContainerMethods.htm#wxPropertyGridManagera149">03033</a>     <span class="keyword">inline</span> <span class="keywordtype">void</span> SetPropertyHelpString ( wxPGId <span class="keywordtype">id</span>, <span class="keyword">const</span> wxString&amp; help_string )
03034     {
03035         wxASSERT ( wxPGIdIsOk(<span class="keywordtype">id</span>) );
03036         wxPGIdToPtr(<span class="keywordtype">id</span>)-&gt;SetHelpString(help_string);
03037     }
03038 
03039     <span class="keyword">inline</span> <span class="keywordtype">void</span> SetPropertyHelpString ( wxPGNameStr name, <span class="keyword">const</span> wxString&amp; help_string )
03040     {
03041         SetPropertyHelpString(GetPropertyByName(name),help_string);
03042     }
03043 
<a name="l03049"></a><a class="code" href="classwxPropertyContainerMethods.htm#wxPropertyGridManagera151">03049</a>     <span class="keyword">inline</span> <span class="keywordtype">void</span> SetPropertyImage ( wxPGId <span class="keywordtype">id</span>, wxBitmap&amp; bmp )
03050     {
03051         wxPGProperty* p = wxPGIdToPtr(<span class="keywordtype">id</span>);
03052         wxASSERT(p);
03053         p-&gt;<a class="code" href="classwxPGProperty.htm#wxPropertyCategoryClassa65">SetValueImage</a>(bmp);
03054         RefreshProperty(p);
03055     }
03056 
03057     <span class="keyword">inline</span> <span class="keywordtype">void</span> SetPropertyImage ( wxPGNameStr name, wxBitmap&amp; bmp )
03058     {
03059         SetPropertyImage(GetPropertyByName(name),bmp);
03060     }
03061 
03062 <span class="preprocessor">#if wxUSE_VALIDATORS</span>
03063 <span class="preprocessor"></span>
03071     <span class="keyword">inline</span> <span class="keywordtype">void</span> SetPropertyValidator ( wxPGId <span class="keywordtype">id</span>, wxValidator&amp; validator )
03072     {
03073         wxASSERT( wxPGIdIsOk(<span class="keywordtype">id</span>) );
03074         wxPGIdToPtr(<span class="keywordtype">id</span>)-&gt;SetValidator(validator);
03075     }
03076     <span class="keyword">inline</span> <span class="keywordtype">void</span> SetPropertyValidator ( wxPGNameStr name, wxValidator&amp; validator )
03077     {
03078         SetPropertyValidator(GetPropertyByName(name),validator);
03079     }
03080 <span class="preprocessor">#endif</span>
03081 <span class="preprocessor"></span>
03083     <span class="keyword">static</span> <span class="keywordtype">void</span> UnRefChoices( wxPGChoices* choices );
03084 
03085 <span class="keyword">protected</span>:
03086 
03087     <span class="comment">//virtual void DrawItemAndChildren( wxPGProperty* p ) = 0;</span>
03088 
03089     <span class="keyword">virtual</span> wxPGId DoGetPropertyByName( wxPGNameStr name ) <span class="keyword">const</span> = 0;
03090 
03091     <span class="keyword">virtual</span> <span class="keywordtype">void</span> RefreshProperty( wxPGProperty* p ) = 0;
03092 
03093     <span class="keyword">inline</span> wxPGId GetPropertyByNameWithAssert ( wxPGNameStr name )<span class="keyword"> const</span>
03094 <span class="keyword">    </span>{
03095         wxPGId <span class="keywordtype">id</span> = GetPropertyByName(name);
03096         wxASSERT ( wxPGIdIsOk(<span class="keywordtype">id</span>) );
03097         <span class="keywordflow">return</span> <span class="keywordtype">id</span>;
03098     }
03099 
03100     <span class="comment">// Deriving classes must set this (it must be only or current page).</span>
03101     wxPropertyGridState*         m_pState;
03102 
03103 };
03104 
03105 <span class="comment">// -----------------------------------------------------------------------</span>
03106 
03107 <span class="comment">// Internal flags</span>
03108 <span class="preprocessor">#define wxPG_FL_INITIALIZED                 0x0001</span>
03109 <span class="preprocessor"></span><span class="preprocessor">#define wxPG_FL_ACTIVATION_BY_CLICK         0x0002 // Set when creating editor controls if it was clicked on.</span>
03110 <span class="preprocessor"></span><span class="preprocessor">#define wxPG_FL_DONT_CENTER_SPLITTER        0x0004</span>
03111 <span class="preprocessor"></span><span class="preprocessor">#define wxPG_FL_FOCUSED                     0x0008</span>
03112 <span class="preprocessor"></span><span class="preprocessor">#define wxPG_FL_MOUSE_CAPTURED              0x0010</span>
03113 <span class="preprocessor"></span><span class="preprocessor">#define wxPG_FL_MOUSE_INSIDE                0x0020</span>
03114 <span class="preprocessor"></span><span class="preprocessor">#define wxPG_FL_VALUE_MODIFIED              0x0040</span>
03115 <span class="preprocessor"></span><span class="preprocessor">#define wxPG_FL_PRIMARY_FILLS_ENTIRE        0x0080 // don't clear background of m_wndPrimary</span>
03116 <span class="preprocessor"></span><span class="preprocessor">#define wxPG_FL_CUR_USES_CUSTOM_IMAGE       0x0100 // currently active editor uses custom image</span>
03117 <span class="preprocessor"></span><span class="preprocessor">#define wxPG_FL_HIDE_STATE                  0x0200 // set when hideable properties should be hidden</span>
03118 <span class="preprocessor"></span><span class="preprocessor">#define wxPG_FL_SCROLLED                    0x0400</span>
03119 <span class="preprocessor"></span><span class="preprocessor">#define wxPG_FL_ADDING_HIDEABLES            0x0800 // set when all added/inserted properties get hideable flag</span>
03120 <span class="preprocessor"></span><span class="preprocessor">#define wxPG_FL_NOSTATUSBARHELP             0x1000 // Disables showing help strings on statusbar.</span>
03121 <span class="preprocessor"></span><span class="preprocessor">#define wxPG_FL_CREATEDSTATE                0x2000 // Marks that we created the state, so we have to destroy it too.</span>
03122 <span class="preprocessor"></span><span class="preprocessor">#define wxPG_FL_SCROLLBAR_DETECTED          0x4000 // Set if scrollbar's existence was detected in last onresize.</span>
03123 <span class="preprocessor"></span><span class="preprocessor">#define wxPG_FL_DESC_REFRESH_REQUIRED       0x8000 // Set if wxPGMan requires redrawing of description text box.</span>
03124 <span class="preprocessor"></span><span class="preprocessor">#define wxPG_FL_SELECTED_IS_PAINT_FLEXIBLE  0x00010000 // Set if selected has flexible imagesize</span>
03125 <span class="preprocessor"></span><span class="preprocessor">#define wxPG_FL_IN_MANAGER                  0x00020000 // Set if contained in wxPropertyGridManager</span>
03126 <span class="preprocessor"></span><span class="preprocessor">#define wxPG_FL_GOOD_SIZE_SET               0x00040000 // Set after wxPropertyGrid is shown in its initial good size</span>
03127 <span class="preprocessor"></span><span class="comment">//#define wxPG_FL_CHANGED                     0x00080000 // Set if DrawItems should modify its cached image</span>
03128 <span class="comment">//#define wxPG_FL_HANDLING_PAINT_EVENT        0x00100000 // Set if in OnPaint handling</span>
03129 
03130 <span class="comment">// -----------------------------------------------------------------------</span>
03131 
03132 <span class="preprocessor">#define wxPG_USE_STATE  m_pState</span>
03133 <span class="preprocessor"></span>
03194 <span class="comment">// BM_GRID</span>
<a name="l03195"></a><a class="code" href="classwxPropertyGrid.htm">03195</a> <span class="keyword">class </span>WXDLLIMPEXP_PG wxPropertyGrid : <span class="keyword">public</span> wxScrolledWindow, <span class="keyword">public</span> wxPropertyContainerMethods
03196 {
03197     <span class="keyword">friend</span> <span class="keyword">class </span>wxPropertyGridState;
03198     <span class="keyword">friend</span> <span class="keyword">class </span>wxPropertyGridManager;
03199 
03200         DECLARE_CLASS(wxPropertyGrid)
03201 
03202 <span class="keyword">public</span>:
03206     wxPropertyGrid();
03207 
03208 <span class="preprocessor">#ifdef SWIG</span>
03209 <span class="preprocessor"></span>    %pythonAppend wxPropertyGrid   <span class="stringliteral">"self._setOORInfo(self)"</span>
03210     %pythonAppend wxPropertyGrid() <span class="stringliteral">""</span>
03211 
03212     wxPropertyGrid(wxWindow *parent, wxWindowID <span class="keywordtype">id</span> = -1,
03213                                 <span class="keyword">const</span> wxPoint&amp; pos = wxDefaultPosition,
03214                                 <span class="keyword">const</span> wxSize&amp; size = wxDefaultSize,
03215                                 <span class="keywordtype">long</span> style = <a class="code" href="group__wndflags.htm#ga17">wxPG_DEFAULT_STYLE</a>,
03216                                 <span class="keyword">const</span> wxChar* name = wxPropertyGridNameStr);
03217     %name(PrePropertyGrid) wxPropertyGrid();
03218 
03219 <span class="preprocessor">#else</span>
03220 <span class="preprocessor"></span>
03224     wxPropertyGrid(wxWindow *parent, wxWindowID <span class="keywordtype">id</span> = -1,
03225                                 <span class="keyword">const</span> wxPoint&amp; pos = wxDefaultPosition,
03226                                 <span class="keyword">const</span> wxSize&amp; size = wxDefaultSize,
03227                                 <span class="keywordtype">long</span> style = <a class="code" href="group__wndflags.htm#ga17">wxPG_DEFAULT_STYLE</a>,
03228                                 <span class="comment">//const wxValidator &amp;validator = wxDefaultValidator,</span>
03229                                 <span class="keyword">const</span> wxChar* name = wxPropertyGridNameStr);
03230 
03232     <span class="keyword">virtual</span> ~wxPropertyGrid();
03233 <span class="preprocessor">#endif</span>
03234 <span class="preprocessor"></span>
03246     wxPGId Append ( wxPGProperty* property );
03247 
03248     <span class="keyword">inline</span> wxPGId AppendCategory ( <span class="keyword">const</span> wxString&amp; label, <span class="keyword">const</span> wxString&amp; name = <a class="code" href="group__miscellaneous.htm#ga2">wxPG_LABEL</a> )
03249     {
03250         <span class="keywordflow">return</span> Append ( <span class="keyword">new</span> wxPropertyCategoryClass(label,name) );
03251     }
03252 
03253 <span class="preprocessor">#if wxPG_INCLUDE_BASICPROPS</span>
03254 <span class="preprocessor"></span>    <span class="keyword">inline</span> wxPGId Append ( <span class="keyword">const</span> wxString&amp; label, <span class="keyword">const</span> wxString&amp; name = <a class="code" href="group__miscellaneous.htm#ga2">wxPG_LABEL</a>, <span class="keyword">const</span> wxString&amp; value = wxEmptyString )
03255     {
03256         <span class="keywordflow">return</span> Append ( wxStringProperty(label,name,value) );
03257     }
03258 
03259     <span class="keyword">inline</span> wxPGId Append ( <span class="keyword">const</span> wxString&amp; label, <span class="keyword">const</span> wxString&amp; name = <a class="code" href="group__miscellaneous.htm#ga2">wxPG_LABEL</a>, <span class="keywordtype">int</span> value = 0 )
03260     {
03261         <span class="keywordflow">return</span> Append ( wxIntProperty(label,name,value) );
03262     }
03263 
03264     <span class="keyword">inline</span> wxPGId Append ( <span class="keyword">const</span> wxString&amp; label, <span class="keyword">const</span> wxString&amp; name = <a class="code" href="group__miscellaneous.htm#ga2">wxPG_LABEL</a>, <span class="keywordtype">double</span> value = 0.0 )
03265     {
03266         <span class="keywordflow">return</span> Append ( wxFloatProperty(label,name,value) );
03267     }
03268 
03269     <span class="keyword">inline</span> wxPGId Append ( <span class="keyword">const</span> wxString&amp; label, <span class="keyword">const</span> wxString&amp; name = <a class="code" href="group__miscellaneous.htm#ga2">wxPG_LABEL</a>, <span class="keywordtype">bool</span> value = FALSE )
03270     {
03271         <span class="keywordflow">return</span> Append ( wxBoolProperty(label,name,value) );
03272     }
03273 <span class="preprocessor">#endif</span>
03274 <span class="preprocessor"></span>
03275     <span class="keyword">inline</span> wxPGId AppendIn ( <span class="keyword">const</span> wxPGId <span class="keywordtype">id</span>, wxPGProperty* property )
03276     {
03277         <span class="keywordflow">return</span> Insert(<span class="keywordtype">id</span>,-1,property);
03278     }
03279 
03280     <span class="keyword">inline</span> wxPGId AppendIn ( wxPGNameStr name, wxPGProperty* property )
03281     {
03282         <span class="keywordflow">return</span> Insert(<a class="code" href="classwxPropertyContainerMethods.htm#wxPropertyGridManagera55">GetPropertyByName</a>(name),-1,property);
03283     }
03284 
03285     <span class="keyword">inline</span> wxPGId AppendIn ( <span class="keyword">const</span> wxPGId <span class="keywordtype">id</span>, <span class="keyword">const</span> wxString&amp; label, <span class="keyword">const</span> wxString&amp; propname, wxVariant&amp; value )
03286     {
03287         <span class="keywordflow">return</span> m_pState-&gt;AppendIn( (wxPGPropertyWithChildren*)wxPGIdToPtr(<span class="keywordtype">id</span>), label, propname, value );
03288     }
03289 
03290     <span class="keyword">inline</span> wxPGId AppendIn ( wxPGNameStr name, <span class="keyword">const</span> wxString&amp; label, <span class="keyword">const</span> wxString&amp; propname, wxVariant&amp; value )
03291     {
03292         <span class="keywordflow">return</span> m_pState-&gt;AppendIn( (wxPGPropertyWithChildren*)wxPGIdToPtr(<a class="code" href="classwxPropertyContainerMethods.htm#wxPropertyGridManagera55">GetPropertyByName</a>(name)),
03293             label, propname, value );
03294     }
03295 
03301     <span class="keyword">static</span> <span class="keywordtype">void</span> AutoGetTranslation ( <span class="keywordtype">bool</span> enable );
03302 
03306     <span class="keywordtype">void</span> CenterSplitter ( <span class="keywordtype">bool</span> enable_auto_centering );
03307 
03312     <span class="keywordtype">bool</span> Create(wxWindow *parent, wxWindowID <span class="keywordtype">id</span> = -1,
03313                 <span class="keyword">const</span> wxPoint&amp; pos = wxDefaultPosition,
03314                 <span class="keyword">const</span> wxSize&amp; size = wxDefaultSize,
03315                 <span class="keywordtype">long</span> style = <a class="code" href="group__wndflags.htm#ga17">wxPG_DEFAULT_STYLE</a>,
03316                 <span class="keyword">const</span> wxChar* name = wxPropertyGridNameStr);
03317 
03321     <span class="keywordtype">void</span> Clear ();
03322 
<a name="l03325"></a><a class="code" href="classwxPropertyGrid.htm#wxPropertyGrida16">03325</a>     <span class="keyword">inline</span> <span class="keywordtype">void</span> ClearModifiedStatus ( wxPGId <span class="keywordtype">id</span> )
03326     {
03327         m_pState-&gt;ClearModifiedStatus(wxPGIdToPtr(<span class="keywordtype">id</span>));
03328     }
03329 
<a name="l03332"></a><a class="code" href="classwxPropertyGrid.htm#wxPropertyGrida15">03332</a>     <span class="keyword">inline</span> <span class="keywordtype">void</span> ClearModifiedStatus ()
03333     {
03334         m_pState-&gt;ClearModifiedStatus(m_pState-&gt;m_properties);
03335         m_pState-&gt;m_anyModified = FALSE;
03336     }
03337 
03339     <span class="keywordtype">bool</span> ClearPropertyValue ( wxPGId <span class="keywordtype">id</span> );
03340 
<a name="l03342"></a><a class="code" href="classwxPropertyGrid.htm#wxPropertyGrida17">03342</a>     <span class="keyword">inline</span> <span class="keywordtype">bool</span> ClearPropertyValue ( wxPGNameStr name )
03343     {
03344         <span class="keywordflow">return</span> ClearPropertyValue ( <a class="code" href="classwxPropertyContainerMethods.htm#wxPropertyGridManagera55">GetPropertyByName</a>(name) );
03345     }
03346 
03348     <span class="keywordtype">void</span> ClearSelection ();
03349 
<a name="l03353"></a><a class="code" href="classwxPropertyGrid.htm#wxPropertyGrida21">03353</a>     <span class="keyword">inline</span> <span class="keywordtype">bool</span> Collapse ( wxPGId p ) { <span class="keywordflow">return</span> Collapse ( &amp;GetPropertyById(p)); }
03354 
<a name="l03358"></a><a class="code" href="classwxPropertyGrid.htm#wxPropertyGrida20">03358</a>     <span class="keyword">inline</span> <span class="keywordtype">bool</span> Collapse ( wxPGNameStr name )
03359     {
03360         <span class="keywordflow">return</span> Collapse ( wxPGIdToPtr ( <a class="code" href="classwxPropertyContainerMethods.htm#wxPropertyGridManagera55">GetPropertyByName</a>(name) ) );
03361     }
03362 
<a name="l03365"></a><a class="code" href="classwxPropertyGrid.htm#wxPropertyGrida22">03365</a>     <span class="keyword">inline</span> <span class="keywordtype">void</span> CollapseAll () { m_pState-&gt;ExpandAll(0); }
03366 
03368     <span class="keywordtype">void</span> Compact( <span class="keywordtype">bool</span> compact );
03369 
<a name="l03371"></a><a class="code" href="classwxPropertyGrid.htm#wxPropertyGrida26">03371</a>     <span class="keyword">inline</span> <span class="keywordtype">void</span> Delete ( wxPGId <span class="keywordtype">id</span> )
03372     {
03373         Delete ( wxPGIdToPtr(<span class="keywordtype">id</span>) );
03374     }
03375 
<a name="l03377"></a><a class="code" href="classwxPropertyGrid.htm#wxPropertyGrida25">03377</a>     <span class="keyword">inline</span> <span class="keywordtype">void</span> Delete ( wxPGNameStr name )
03378     {
03379         Delete ( wxPGIdToPtr ( <a class="code" href="classwxPropertyContainerMethods.htm#wxPropertyGridManagera55">GetPropertyByName</a>(name) ) );
03380     }
03381 
<a name="l03383"></a><a class="code" href="classwxPropertyGrid.htm#wxPropertyGrida28">03383</a>     <span class="keyword">inline</span> <span class="keywordtype">bool</span> Disable ( wxPGId <span class="keywordtype">id</span> ) { <span class="keywordflow">return</span> EnableProperty (<span class="keywordtype">id</span>,FALSE); }
03384 
<a name="l03386"></a><a class="code" href="classwxPropertyGrid.htm#wxPropertyGrida27">03386</a>     <span class="keyword">inline</span> <span class="keywordtype">bool</span> Disable ( wxPGNameStr name ) { <span class="keywordflow">return</span> EnableProperty (name,FALSE); }
03387 
<a name="l03389"></a><a class="code" href="classwxPropertyGrid.htm#wxPropertyGrida30">03389</a>     <span class="keyword">inline</span> <span class="keywordtype">bool</span> DisableProperty ( wxPGId <span class="keywordtype">id</span> ) { <span class="keywordflow">return</span> EnableProperty (<span class="keywordtype">id</span>,FALSE); }
03390 
<a name="l03392"></a><a class="code" href="classwxPropertyGrid.htm#wxPropertyGrida29">03392</a>     <span class="keyword">inline</span> <span class="keywordtype">bool</span> DisableProperty ( wxPGNameStr name ) { <span class="keywordflow">return</span> EnableProperty (name,FALSE); }
03393 
03395     <span class="keywordtype">bool</span> EnableCategories ( <span class="keywordtype">bool</span> enable );
03396 
03398     <span class="comment">/*inline bool Enable ( wxPGId id, bool enable = TRUE )</span>
03399 <span class="comment">    {</span>
03400 <span class="comment">        return EnableProperty ( id, enable );</span>
03401 <span class="comment">    }*/</span>
03402 
03404     <span class="comment">/*inline bool Enable ( wxPGNameStr name, bool enable = TRUE )</span>
03405 <span class="comment">    {</span>
03406 <span class="comment">        return EnableProperty ( name, enable );</span>
03407 <span class="comment">    }*/</span>
03408 
03410     <span class="keywordtype">bool</span> EnableProperty ( wxPGId <span class="keywordtype">id</span>, <span class="keywordtype">bool</span> enable = TRUE );
03411 
<a name="l03413"></a><a class="code" href="classwxPropertyGrid.htm#wxPropertyGrida32">03413</a>     <span class="keyword">inline</span> <span class="keywordtype">bool</span> EnableProperty ( wxPGNameStr name, <span class="keywordtype">bool</span> enable = TRUE )
03414     {
03415         <span class="keywordflow">return</span> EnableProperty ( <a class="code" href="classwxPropertyContainerMethods.htm#wxPropertyGridManagera55">GetPropertyByName</a>(name), enable );
03416     }
03417 
03421     <span class="keywordtype">bool</span> EnsureVisible ( wxPGId <span class="keywordtype">id</span> );
03422 
<a name="l03426"></a><a class="code" href="classwxPropertyGrid.htm#wxPropertyGrida34">03426</a>     <span class="keyword">inline</span> <span class="keywordtype">bool</span> EnsureVisible ( wxPGNameStr name ) 
03427     {
03428         <span class="keywordflow">return</span> EnsureVisible ( <a class="code" href="classwxPropertyContainerMethods.htm#wxPropertyGridManagera55">GetPropertyByName</a>(name) );
03429     }
03430 
<a name="l03434"></a><a class="code" href="classwxPropertyGrid.htm#wxPropertyGrida37">03434</a>     <span class="keyword">inline</span> <span class="keywordtype">bool</span> Expand ( wxPGId <span class="keywordtype">id</span> ) { <span class="keywordflow">return</span> Expand ( &amp;GetPropertyById(<span class="keywordtype">id</span>) ); }
03435 
<a name="l03439"></a><a class="code" href="classwxPropertyGrid.htm#wxPropertyGrida36">03439</a>     <span class="keyword">inline</span> <span class="keywordtype">bool</span> Expand ( wxPGNameStr name )
03440     {
03441         <span class="keywordflow">return</span> Expand ( wxPGIdToPtr ( <a class="code" href="classwxPropertyContainerMethods.htm#wxPropertyGridManagera55">GetPropertyByName</a>(name) ) );
03442     }
03443 
<a name="l03446"></a><a class="code" href="classwxPropertyGrid.htm#wxPropertyGrida38">03446</a>     <span class="keyword">inline</span> <span class="keywordtype">void</span> ExpandAll () { m_pState-&gt;ExpandAll(1); }
03447 
<a name="l03456"></a><a class="code" href="classwxPropertyGrid.htm#wxPropertyGrida111">03456</a>     wxVariant GetPropertyValues ( <span class="keyword">const</span> wxString&amp; listname = wxEmptyString,
03457         wxPGId baseparent = wxPGIdGen((wxPGProperty*)NULL), <span class="keywordtype">long</span> flags = 0 )<span class="keyword"> const</span>
03458 <span class="keyword">    </span>{
03459         <span class="keywordflow">return</span> m_pState-&gt;GetPropertyValues(listname,baseparent,flags);
03460     }
03461 
03462     <span class="keyword">inline</span> wxFont* GetCaptionFont() { <span class="keywordflow">return</span> &amp;m_captionFont; }
03463 
<a name="l03465"></a><a class="code" href="classwxPropertyGrid.htm#wxPropertyGrida40">03465</a>     <span class="keyword">inline</span> wxColour GetCaptionBackroundColour()<span class="keyword"> const </span>{ <span class="keywordflow">return</span> m_colCapBack; }
03466 
<a name="l03468"></a><a class="code" href="classwxPropertyGrid.htm#wxPropertyGrida42">03468</a>     <span class="keyword">inline</span> wxColour GetCaptionForegroundColour()<span class="keyword"> const </span>{ <span class="keywordflow">return</span> m_colCapFore; }
03469 
<a name="l03471"></a><a class="code" href="classwxPropertyGrid.htm#wxPropertyGrida43">03471</a>     <span class="keyword">inline</span> wxColour GetCellBackgroundColour()<span class="keyword"> const </span>{ <span class="keywordflow">return</span> m_colPropBack; }
03472 
<a name="l03474"></a><a class="code" href="classwxPropertyGrid.htm#wxPropertyGrida44">03474</a>     <span class="keyword">inline</span> wxColour GetCellTextColour()<span class="keyword"> const </span>{ <span class="keywordflow">return</span> m_colPropFore; }
03475 
<a name="l03478"></a><a class="code" href="classwxPropertyGrid.htm#wxPropertyGrida47">03478</a>     <span class="keyword">inline</span> size_t GetChildrenCount ()
03479     {
03480         <span class="keywordflow">return</span> GetChildrenCount( wxPGIdGen(m_pState-&gt;m_properties) );
03481     }
03482 
<a name="l03484"></a><a class="code" href="classwxPropertyGrid.htm#wxPropertyGrida46">03484</a>     <span class="keyword">inline</span> size_t GetChildrenCount ( wxPGId <span class="keywordtype">id</span> )<span class="keyword"> const</span>
03485 <span class="keyword">    </span>{
03486         wxASSERT ( wxPGIdIsOk(<span class="keywordtype">id</span>) );
03487         <span class="keywordflow">return</span> wxPGIdToPtr(<span class="keywordtype">id</span>)-&gt;GetChildCount();
03488     }
03489 
<a name="l03491"></a><a class="code" href="classwxPropertyGrid.htm#wxPropertyGrida45">03491</a>     <span class="keyword">inline</span> size_t GetChildrenCount ( wxPGNameStr name ) { <span class="keywordflow">return</span> GetChildrenCount( <a class="code" href="classwxPropertyContainerMethods.htm#wxPropertyGridManagera55">GetPropertyByName</a>(name) ); }
03492 
<a name="l03494"></a><a class="code" href="classwxPropertyGrid.htm#wxPropertyGrida48">03494</a>     <span class="keyword">inline</span> wxPGId GetFirst ()<span class="keyword"> const</span>
03495 <span class="keyword">    </span>{
03496         <span class="keywordflow">return</span> m_pState-&gt;GetFirst();
03497     }
03498 
<a name="l03504"></a><a class="code" href="classwxPropertyGrid.htm#wxPropertyGrida53">03504</a>     <span class="keyword">inline</span> wxPGId GetFirstVisible ()<span class="keyword"> const</span>
03505 <span class="keyword">    </span>{
03506         wxPGProperty* p = NULL;
03507         <span class="keywordflow">if</span> ( m_pState-&gt;m_properties-&gt;GetCount() )
03508         {
03509             p = m_pState-&gt;m_properties-&gt;Item(0);
03510             <span class="keywordflow">if</span> ( (m_iFlags &amp; wxPG_FL_HIDE_STATE) &amp;&amp; p-&gt;<a class="code" href="classwxPGProperty.htm#wxPropertyCategoryClassp7">m_flags</a> &amp; <a class="code" href="group__propflags.htm#ga2">wxPG_PROP_HIDEABLE</a> )
03511                 p = GetNeighbourItem ( p, TRUE, 1 );
03512         }
03513         <span class="keywordflow">return</span> wxPGIdGen(p);
03514     }
03515 
<a name="l03517"></a><a class="code" href="classwxPropertyGrid.htm#wxPropertyGrida54">03517</a>     <span class="keywordtype">int</span> GetFontHeight ()<span class="keyword"> const </span>{ <span class="keywordflow">return</span> m_fontHeight; }
03518 
<a name="l03522"></a><a class="code" href="classwxPropertyGrid.htm#wxPropertyGrida55">03522</a>     wxPropertyGrid* GetGrid() { <span class="keywordflow">return</span> <span class="keyword">this</span>; }
03523 
<a name="l03525"></a><a class="code" href="classwxPropertyGrid.htm#wxPropertyGrida49">03525</a>     <span class="keyword">inline</span> wxPGId GetFirstCategory ()<span class="keyword"> const</span>
03526 <span class="keyword">    </span>{
03527         <span class="keywordflow">return</span> m_pState-&gt;<a class="code" href="classwxPropertyGrid.htm#wxPropertyGrida49">GetFirstCategory</a> ();
03528     }
03529 
<a name="l03534"></a><a class="code" href="classwxPropertyGrid.htm#wxPropertyGrida51">03534</a>     <span class="keyword">inline</span> wxPGId GetFirstChild ( wxPGId parent )
03535     {
03536         wxASSERT ( wxPGIdIsOk(parent) );
03537         wxPGPropertyWithChildren&amp; p = (wxPGPropertyWithChildren&amp;)parent.GetProperty();
03538         <span class="keywordflow">if</span> ( p.<a class="code" href="classwxPGProperty.htm#wxPropertyCategoryClassa32">GetParentingType</a>()==0 || p.<a class="code" href="classwxPGProperty.htm#wxPropertyCategoryClassa32">GetParentingType</a>()==-1 || !p.<a class="code" href="classwxPGPropertyWithChildren.htm#wxPropertyCategoryClassa17">GetCount</a>() ) <span class="keywordflow">return</span> wxPGIdGen(NULL);
03539         <span class="keywordflow">return</span> wxPGIdGen(p.<a class="code" href="classwxPGPropertyWithChildren.htm#wxPropertyCategoryClassa48">Item</a>(0));
03540     }
03541     <span class="keyword">inline</span> wxPGId GetFirstChild ( wxPGNameStr name ) { <span class="keywordflow">return</span> GetFirstChild( <a class="code" href="classwxPropertyContainerMethods.htm#wxPropertyGridManagera55">GetPropertyByName</a>(name) ); }
03542 
<a name="l03544"></a><a class="code" href="classwxPropertyGrid.htm#wxPropertyGrida52">03544</a>     <span class="keyword">inline</span> wxPGId GetFirstProperty()
03545     {
03546         <span class="keywordflow">return</span> m_pState-&gt;GetFirstProperty();
03547     }
03548 
03552     wxSize GetImageSize ( wxPGId <span class="keywordtype">id</span> = wxPGIdGen((wxPGProperty*)NULL) ) <span class="keyword">const</span>;
03553 
<a name="l03557"></a><a class="code" href="classwxPropertyGrid.htm#wxPropertyGrida58">03557</a>     wxPGId GetItemAtY ( <span class="keywordtype">int</span> y ) { <span class="keywordflow">return</span> wxPGIdGen(DoGetItemAtY(y)); }
03558 
<a name="l03561"></a><a class="code" href="classwxPropertyGrid.htm#wxPropertyGrida61">03561</a>     <span class="keyword">inline</span> wxPGId GetLastProperty ()
03562     {
03563         <span class="keywordflow">if</span> ( !m_pState-&gt;m_properties-&gt;GetCount() ) <span class="keywordflow">return</span> wxPGIdGen((wxPGProperty*)NULL);
03564         wxPGProperty* p = GetLastItem (FALSE, FALSE);
03565         <span class="keywordflow">if</span> ( p-&gt;<a class="code" href="classwxPGProperty.htm#wxPropertyCategoryClassa32">GetParentingType</a>() &gt; 0 )
03566             <span class="keywordflow">return</span> GetPrevProperty ( wxPGIdGen(p) );
03567         <span class="keywordflow">return</span> wxPGIdGen(p);
03568     }
03569 
<a name="l03574"></a><a class="code" href="classwxPropertyGrid.htm#wxPropertyGrida60">03574</a>     <span class="keyword">inline</span> wxPGId GetLastChild ( wxPGId parent )
03575     {
03576         wxASSERT ( wxPGIdIsOk(parent) );
03577         wxPGPropertyWithChildren&amp; p = (wxPGPropertyWithChildren&amp;)parent.GetProperty();
03578         <span class="keywordflow">if</span> ( !p.<a class="code" href="classwxPGProperty.htm#wxPropertyCategoryClassa32">GetParentingType</a>() || !p.<a class="code" href="classwxPGPropertyWithChildren.htm#wxPropertyCategoryClassa17">GetCount</a>() ) <span class="keywordflow">return</span> wxPGIdGen(NULL);
03579         <span class="keywordflow">return</span> wxPGIdGen(p.<a class="code" href="classwxPGPropertyWithChildren.htm#wxPropertyCategoryClassa49">Last</a>());
03580     }
03581     <span class="keyword">inline</span> wxPGId GetLastChild ( wxPGNameStr name ) { <span class="keywordflow">return</span> GetLastChild ( <a class="code" href="classwxPropertyContainerMethods.htm#wxPropertyGridManagera55">GetPropertyByName</a>(name) ); }
03582 
<a name="l03585"></a><a class="code" href="classwxPropertyGrid.htm#wxPropertyGrida62">03585</a>     <span class="keyword">inline</span> wxPGId GetLastVisible ()
03586     {
03587         <span class="keywordflow">return</span> wxPGIdGen ( GetLastItem (TRUE, TRUE) );
03588     }
03589 
<a name="l03591"></a><a class="code" href="classwxPropertyGrid.htm#wxPropertyGrida63">03591</a>     <span class="keyword">inline</span> wxColour GetLineColour()<span class="keyword"> const </span>{ <span class="keywordflow">return</span> m_colLine; }
03592 
<a name="l03594"></a><a class="code" href="classwxPropertyGrid.htm#wxPropertyGrida64">03594</a>     <span class="keyword">inline</span> wxColour GetMarginColour()<span class="keyword"> const </span>{ <span class="keywordflow">return</span> m_colMargin; }
03595 
<a name="l03599"></a><a class="code" href="classwxPropertyGrid.htm#wxPropertyGrida66">03599</a>     <span class="keyword">inline</span> wxPGId GetNextProperty ( wxPGId <span class="keywordtype">id</span> )
03600     {
03601         <span class="keywordflow">return</span> m_pState-&gt;GetNextProperty(<span class="keywordtype">id</span>);
03602     }
03603 
<a name="l03605"></a><a class="code" href="classwxPropertyGrid.htm#wxPropertyGrida65">03605</a>     <span class="keyword">inline</span> wxPGId GetNextCategory ( wxPGId <span class="keywordtype">id</span> )<span class="keyword"> const</span>
03606 <span class="keyword">    </span>{
03607         <span class="keywordflow">return</span> m_pState-&gt;GetNextCategory(<span class="keywordtype">id</span>);
03608     }
03609 
<a name="l03615"></a><a class="code" href="classwxPropertyGrid.htm#wxPropertyGrida69">03615</a>     <span class="keyword">inline</span> wxPGId GetNextVisible ( wxPGId property )<span class="keyword"> const</span>
03616 <span class="keyword">    </span>{
03617         <span class="keywordflow">return</span> wxPGIdGen ( GetNeighbourItem( property.GetPropertyPtr(),
03618             TRUE, 1 ) );
03619     }
03620 
<a name="l03624"></a><a class="code" href="classwxPropertyGrid.htm#wxPropertyGrida70">03624</a>     <span class="keyword">inline</span> wxPGId GetPrevProperty ( wxPGId <span class="keywordtype">id</span> )
03625     {
03626         <span class="keywordflow">return</span> m_pState-&gt;GetPrevProperty(<span class="keywordtype">id</span>);
03627     }
03628 
<a name="l03630"></a><a class="code" href="classwxPropertyGrid.htm#wxPropertyGrida72">03630</a>     <span class="keyword">inline</span> wxPGId GetPrevSibling ( wxPGId <span class="keywordtype">id</span> )
03631     {
03632         <span class="keywordflow">return</span> wxPropertyGridState::GetPrevSibling(<span class="keywordtype">id</span>);
03633     }
03634     <span class="keyword">inline</span> wxPGId GetPrevSibling ( wxPGNameStr name )
03635     {
03636         <span class="keywordflow">return</span> wxPropertyGridState::GetPrevSibling(<a class="code" href="classwxPropertyContainerMethods.htm#wxPropertyGridManagera55">GetPropertyByName</a>(name));
03637     }
03638 
<a name="l03641"></a><a class="code" href="classwxPropertyGrid.htm#wxPropertyGrida73">03641</a>     <span class="keyword">inline</span> wxPGId GetPrevVisible ( wxPGId property )
03642     {
03643         wxASSERT ( wxPGIdIsOk(property) );
03644         <span class="keywordflow">return</span> wxPGIdGen ( GetNeighbourItem( property.GetPropertyPtr(),
03645             TRUE, -1 ) );
03646     }
03647 
<a name="l03651"></a><a class="code" href="classwxPropertyGrid.htm#wxPropertyGrida77">03651</a>     <span class="keyword">inline</span> wxPGId GetPropertyCategory ( wxPGId <span class="keywordtype">id</span> )<span class="keyword"> const</span>
03652 <span class="keyword">    </span>{
03653         <span class="keywordflow">return</span> wxPGIdGen ( GetPropertyCategory ( wxPGIdToPtr(<span class="keywordtype">id</span>) ) );
03654     }
03655     <span class="keyword">inline</span> wxPGId GetPropertyCategory ( wxPGNameStr name )
03656     {
03657         <span class="keywordflow">return</span> GetPropertyCategory ( <a class="code" href="classwxPropertyContainerMethods.htm#wxPropertyGridManagera55">GetPropertyByName</a>(name) );
03658     }
03659 
03661     wxColour GetPropertyColour ( wxPGId <span class="keywordtype">id</span> ) <span class="keyword">const</span>;
03662     <span class="keyword">inline</span> wxColour GetPropertyColour ( wxPGNameStr name )<span class="keyword"> const</span>
03663 <span class="keyword">    </span>{
03664         <span class="keywordflow">return</span> GetPropertyColour(<a class="code" href="classwxPropertyContainerMethods.htm#wxPropertyGridManagera55">GetPropertyByName</a>(name));
03665     }
03666     
<a name="l03672"></a><a class="code" href="classwxPropertyGrid.htm#wxPropertyGrida74">03672</a>     <span class="keyword">inline</span> wxPGId GetPropertyByLabel ( <span class="keyword">const</span> wxString&amp; name )<span class="keyword"> const</span>
03673 <span class="keyword">    </span>{
03674         <span class="keywordflow">return</span> m_pState-&gt;GetPropertyByLabel(name);
03675     }
03676 
<a name="l03680"></a><a class="code" href="classwxPropertyGrid.htm#wxPropertyGrida114">03680</a>     wxPGId GetRoot ()<span class="keyword"> const </span>{ <span class="keywordflow">return</span> wxPGIdGen(m_pState-&gt;m_properties); }
03681 
<a name="l03683"></a><a class="code" href="classwxPropertyGrid.htm#wxPropertyGrida115">03683</a>     <span class="keywordtype">int</span> GetRowHeight ()<span class="keyword"> const </span>{ <span class="keywordflow">return</span> m_lineHeight; }
03684 
03685     <span class="keyword">inline</span> wxPGId GetSelectedProperty ()<span class="keyword"> const </span>{ <span class="keywordflow">return</span> GetSelection(); }
03686 
<a name="l03688"></a><a class="code" href="classwxPropertyGrid.htm#wxPropertyGrida117">03688</a>     <span class="keyword">inline</span> wxPGId GetSelection ()<span class="keyword"> const</span>
03689 <span class="keyword">    </span>{
03690         <span class="keywordflow">return</span> wxPGIdGen(m_selected);
03691     }
03692 
<a name="l03694"></a><a class="code" href="classwxPropertyGrid.htm#wxPropertyGrida118">03694</a>     <span class="keyword">inline</span> wxColour GetSelectionBackgroundColour()<span class="keyword"> const </span>{ <span class="keywordflow">return</span> m_colSelBack; }
03695 
<a name="l03697"></a><a class="code" href="classwxPropertyGrid.htm#wxPropertyGrida119">03697</a>     <span class="keyword">inline</span> wxColour GetSelectionForegroundColour()<span class="keyword"> const </span>{ <span class="keywordflow">return</span> m_colSelFore; }
03698 
<a name="l03700"></a><a class="code" href="classwxPropertyGrid.htm#wxPropertyGrida120">03700</a>     <span class="keyword">inline</span> <span class="keywordtype">int</span> GetSplitterPosition ()<span class="keyword"> const </span>{ <span class="keywordflow">return</span> m_splitterx; }
03701 
03705     <span class="comment">//wxPropertyGridState* GetCopyOfState() const;</span>
03706 
<a name="l03708"></a><a class="code" href="classwxPropertyGrid.htm#wxPropertyGrida122">03708</a>     <span class="keyword">inline</span> <span class="keywordtype">int</span> GetVerticalSpacing ()<span class="keyword"> const </span>{ <span class="keywordflow">return</span> (<span class="keywordtype">int</span>)m_vspacing; }
03709 
<a name="l03711"></a><a class="code" href="classwxPropertyGrid.htm#wxPropertyGrida123">03711</a>     <span class="keyword">inline</span> <span class="keywordtype">bool</span> HasSelection()<span class="keyword"> const </span>{ <span class="keywordflow">return</span> ((m_selected!=(wxPGProperty*)NULL)?TRUE:FALSE); }
03712 
<a name="l03714"></a><a class="code" href="classwxPropertyGrid.htm#wxPropertyGrida124">03714</a>     <span class="keyword">inline</span> <span class="keywordtype">void</span> HideLowPriority() { Compact ( TRUE ); }
03715 
<a name="l03766"></a><a class="code" href="classwxPropertyGrid.htm#wxPropertyGrida132">03766</a>     <span class="keyword">inline</span> wxPGId Insert ( wxPGId priorthis, wxPGProperty* newproperty )
03767     {
03768         wxPGId res = Insert ( wxPGIdToPtr( priorthis ), newproperty );
03769         DrawItems ( newproperty, (wxPGProperty*) NULL );
03770         <span class="keywordflow">return</span> res;
03771     }
<a name="l03773"></a><a class="code" href="classwxPropertyGrid.htm#wxPropertyGrida131">03773</a>     <span class="keyword">inline</span> wxPGId Insert ( wxPGNameStr name, wxPGProperty* newproperty )
03774     {
03775         wxPGId res = Insert ( wxPGIdToPtr ( <a class="code" href="classwxPropertyContainerMethods.htm#wxPropertyGridManagera55">GetPropertyByName</a>(name) ), newproperty );
03776         DrawItems ( newproperty, (wxPGProperty*) NULL );
03777         <span class="keywordflow">return</span> res;
03778     }
03779 
<a name="l03781"></a><a class="code" href="classwxPropertyGrid.htm#wxPropertyGrida130">03781</a>     <span class="keyword">inline</span> wxPGId Insert ( wxPGId <span class="keywordtype">id</span>, <span class="keywordtype">int</span> index, wxPGProperty* newproperty )
03782     {
03783         wxPGId res = Insert ( (wxPGPropertyWithChildren*)wxPGIdToPtr (<span class="keywordtype">id</span>), index, newproperty );
03784         DrawItems ( newproperty, (wxPGProperty*) NULL );
03785         <span class="keywordflow">return</span> res;
03786     }
03787 
<a name="l03789"></a><a class="code" href="classwxPropertyGrid.htm#wxPropertyGrida129">03789</a>     <span class="keyword">inline</span> wxPGId Insert ( wxPGNameStr name, <span class="keywordtype">int</span> index, wxPGProperty* newproperty )
03790     {
03791         wxPGId res = Insert ( (wxPGPropertyWithChildren*)wxPGIdToPtr ( <a class="code" href="classwxPropertyContainerMethods.htm#wxPropertyGridManagera55">GetPropertyByName</a>(name) ), index, newproperty );
03792         DrawItems ( newproperty, (wxPGProperty*) NULL );
03793         <span class="keywordflow">return</span> res;
03794     }
03795 
03796     <span class="keyword">inline</span> wxPGId InsertCategory ( wxPGId <span class="keywordtype">id</span>, <span class="keywordtype">int</span> index, <span class="keyword">const</span> wxString&amp; label, <span class="keyword">const</span> wxString&amp; name = wxPG_LABEL )
03797     {
03798         <span class="keywordflow">return</span> Insert ( <span class="keywordtype">id</span>, index, <span class="keyword">new</span> wxPropertyCategoryClass(label,name) );
03799     }
03800 
03801 <span class="preprocessor">#if wxPG_INCLUDE_BASICPROPS</span>
03802 <span class="preprocessor"></span>    <span class="keyword">inline</span> wxPGId Insert ( wxPGId <span class="keywordtype">id</span>, <span class="keywordtype">int</span> index, <span class="keyword">const</span> wxString&amp; label, <span class="keyword">const</span> wxString&amp; name, <span class="keyword">const</span> wxString&amp; value = wxEmptyString )
03803     {
03804         <span class="keywordflow">return</span> Insert ( <span class="keywordtype">id</span>, index, wxStringProperty(label,name,value) );
03805     }
03806 
03807     <span class="keyword">inline</span> wxPGId Insert ( wxPGId <span class="keywordtype">id</span>, <span class="keywordtype">int</span> index, <span class="keyword">const</span> wxString&amp; label, <span class="keyword">const</span> wxString&amp; name, <span class="keywordtype">int</span> value )
03808     {
03809         <span class="keywordflow">return</span> Insert ( <span class="keywordtype">id</span>, index, wxIntProperty(label,name,value) );
03810     }
03811 
03812     <span class="keyword">inline</span> wxPGId Insert ( wxPGId <span class="keywordtype">id</span>, <span class="keywordtype">int</span> index, <span class="keyword">const</span> wxString&amp; label, <span class="keyword">const</span> wxString&amp; name, <span class="keywordtype">double</span> value )
03813     {
03814         <span class="keywordflow">return</span> Insert ( <span class="keywordtype">id</span>, index, wxFloatProperty(label,name,value) );
03815     }
03816 
03817     <span class="keyword">inline</span> wxPGId Insert ( wxPGId <span class="keywordtype">id</span>, <span class="keywordtype">int</span> index, <span class="keyword">const</span> wxString&amp; label, <span class="keyword">const</span> wxString&amp; name, <span class="keywordtype">bool</span> value )
03818     {
03819         <span class="keywordflow">return</span> Insert ( <span class="keywordtype">id</span>, index, wxBoolProperty(label,name,value) );
03820     }
03821 <span class="preprocessor">#endif</span>
03822 <span class="preprocessor"></span>
<a name="l03824"></a><a class="code" href="classwxPropertyGrid.htm#wxPropertyGrida134">03824</a>     <span class="keyword">inline</span> <span class="keywordtype">bool</span> IsAnyModified ()<span class="keyword"> const </span>{ <span class="keywordflow">return</span> (m_pState-&gt;m_anyModified&gt;0); }
03825 
<a name="l03827"></a><a class="code" href="classwxPropertyGrid.htm#wxPropertyGrida135">03827</a>     <span class="keyword">inline</span> <span class="keywordtype">bool</span> IsFrozen ()<span class="keyword"> const </span>{ <span class="keywordflow">return</span> (m_frozen&gt;0)?TRUE:FALSE; }
03828 
<a name="l03830"></a><a class="code" href="classwxPropertyGrid.htm#wxPropertyGrida147">03830</a>     <span class="keyword">inline</span> <span class="keywordtype">bool</span> IsPropertySelected ( wxPGId <span class="keywordtype">id</span> )<span class="keyword"> const</span>
03831 <span class="keyword">    </span>{
03832         <span class="keywordflow">return</span> ( m_selected == wxPGIdToPtr( <span class="keywordtype">id</span> ) ) ? TRUE : FALSE;
03833     }
03834 
<a name="l03836"></a><a class="code" href="classwxPropertyGrid.htm#wxPropertyGrida146">03836</a>     <span class="keyword">inline</span> <span class="keywordtype">bool</span> IsPropertySelected ( wxPGNameStr name ) { <span class="keywordflow">return</span> IsPropertySelected(<a class="code" href="classwxPropertyContainerMethods.htm#wxPropertyGridManagera55">GetPropertyByName</a>(name)); }
03837 
03841     <span class="keywordtype">void</span> LimitPropertyEditing ( wxPGId <span class="keywordtype">id</span>, <span class="keywordtype">bool</span> limit = TRUE );
03842 
<a name="l03846"></a><a class="code" href="classwxPropertyGrid.htm#wxPropertyGrida156">03846</a>     <span class="keyword">inline</span> <span class="keywordtype">void</span> LimitPropertyEditing ( wxPGNameStr name, <span class="keywordtype">bool</span> limit = TRUE )
03847     {
03848         LimitPropertyEditing(<a class="code" href="classwxPropertyContainerMethods.htm#wxPropertyGridManagera55">GetPropertyByName</a>(name),limit);
03849     }
03850 
03852     <span class="comment">//void RedrawAllVisible ();</span>
03853 
03860     <span class="keyword">static</span> wxPGValueType* RegisterValueType ( wxPGValueType* valueclass, <span class="keywordtype">bool</span> no_def_check = FALSE );
03861 
03866     <span class="keyword">static</span> wxPGEditor* RegisterEditorClass ( wxPGEditor* valueclass, <span class="keywordtype">bool</span> no_def_check = FALSE );
03867 
03870     <span class="keywordtype">void</span> ResetColours();
03871 
<a name="l03874"></a><a class="code" href="classwxPropertyGrid.htm#wxPropertyGrida169">03874</a>     <span class="keyword">inline</span> <span class="keywordtype">void</span> SetCurrentCategory ( wxPGId <span class="keywordtype">id</span> )
03875     {
03876         wxPropertyCategoryClass* pc = (wxPropertyCategoryClass*)wxPGIdToPtr(<span class="keywordtype">id</span>);
03877 <span class="preprocessor">#ifdef __WXDEBUG__</span>
03878 <span class="preprocessor"></span>        <span class="keywordflow">if</span> ( pc ) wxASSERT ( pc-&gt;<a class="code" href="classwxPGProperty.htm#wxPropertyCategoryClassa32">GetParentingType</a>() &gt; 0 );
03879 <span class="preprocessor">#endif</span>
03880 <span class="preprocessor"></span>        m_pState-&gt;m_currentCategory = pc;
03881     }
03882 
<a name="l03885"></a><a class="code" href="classwxPropertyGrid.htm#wxPropertyGrida168">03885</a>     <span class="keyword">inline</span> <span class="keywordtype">void</span> SetCurrentCategory ( wxPGNameStr name = wxEmptyString )
03886     {
03887         SetCurrentCategory(<a class="code" href="classwxPropertyContainerMethods.htm#wxPropertyGridManagera55">GetPropertyByName</a>(name));
03888     }
03889 
03891     <span class="comment">//virtual bool SetBackgroundColour(const wxColour&amp; col);</span>
03892 
03896     <span class="keywordtype">void</span> SetPropertyColour ( wxPGId <span class="keywordtype">id</span>, <span class="keyword">const</span> wxColour&amp; col );
03897     <span class="keyword">inline</span> <span class="keywordtype">void</span> SetPropertyColour ( wxPGNameStr name, <span class="keyword">const</span> wxColour&amp; col )
03898     {
03899         SetPropertyColour ( <a class="code" href="classwxPropertyContainerMethods.htm#wxPropertyGridManagera55">GetPropertyByName</a>(name), col );
03900     }
03901 
<a name="l03903"></a><a class="code" href="classwxPropertyGrid.htm#wxPropertyGrida180">03903</a>     <span class="keyword">inline</span> <span class="keywordtype">void</span> SetPropertyColourToDefault ( wxPGId <span class="keywordtype">id</span> )
03904     {
03905         SetColourIndex ( wxPGIdToPtr(<span class="keywordtype">id</span>), 0 );
03906     }
03907     <span class="keyword">inline</span> <span class="keywordtype">void</span> SetPropertyColourToDefault ( wxPGNameStr name )
03908     {
03909         SetColourIndex ( wxPGIdToPtr(<a class="code" href="classwxPropertyContainerMethods.htm#wxPropertyGridManagera55">GetPropertyByName</a>(name)), 0 );
03910     }
03911 
03913     <span class="keywordtype">void</span> SetCaptionBackgroundColour(<span class="keyword">const</span> wxColour&amp; col);
03914 
03916     <span class="keywordtype">void</span> SetCaptionForegroundColour(<span class="keyword">const</span> wxColour&amp; col);
03917 
03921     <span class="keywordtype">void</span> SetCellBackgroundColour(<span class="keyword">const</span> wxColour&amp; col);
03922 
03926     <span class="keywordtype">void</span> SetCellTextColour(<span class="keyword">const</span> wxColour&amp; col);
03927 
03929     <span class="keywordtype">void</span> SetLineColour(<span class="keyword">const</span> wxColour&amp; col);
03930 
03932     <span class="keywordtype">void</span> SetMarginColour(<span class="keyword">const</span> wxColour&amp; col);
03933 
03935     <span class="keywordtype">void</span> SetSelectionBackground(<span class="keyword">const</span> wxColour&amp; col);
03936 
03938     <span class="keywordtype">void</span> SetSelectionForeground(<span class="keyword">const</span> wxColour&amp; col);
03939 
03941     <span class="keywordtype">void</span> SetSplitterPosition ( <span class="keywordtype">int</span> newxpos, <span class="keywordtype">bool</span> refresh = TRUE );
03942 
<a name="l03949"></a><a class="code" href="classwxPropertyGrid.htm#wxPropertyGrida162">03949</a>     <span class="keyword">inline</span> <span class="keywordtype">void</span> SelectProperty ( wxPGId <span class="keywordtype">id</span>, <span class="keywordtype">bool</span> focus = FALSE )
03950     {
03951         SelectProperty(wxPGIdToPtr(<span class="keywordtype">id</span>),focus);
03952     }
03953     <span class="keyword">inline</span> <span class="keywordtype">void</span> SelectProperty ( wxPGNameStr name, <span class="keywordtype">bool</span> focus = FALSE )
03954     {
03955         SelectProperty(wxPGIdToPtr(<a class="code" href="classwxPropertyContainerMethods.htm#wxPropertyGridManagera55">GetPropertyByName</a>(name)),focus);
03956     }
03957 
03961     <span class="keywordtype">void</span> SetPropertyPriority ( wxPGId <span class="keywordtype">id</span>, <span class="keywordtype">int</span> priority );
03962 
<a name="l03966"></a><a class="code" href="classwxPropertyGrid.htm#wxPropertyGrida191">03966</a>     <span class="keyword">inline</span> <span class="keywordtype">void</span> SetPropertyPriority ( wxPGNameStr name, <span class="keywordtype">int</span> priority )
03967     {
03968         SetPropertyPriority(<a class="code" href="classwxPropertyContainerMethods.htm#wxPropertyGridManagera55">GetPropertyByName</a>(name),priority);
03969     }
03970 
03973     <span class="keywordtype">void</span> SwitchState ( wxPropertyGridState* pNewState );
03974 
<a name="l03980"></a><a class="code" href="classwxPropertyGrid.htm#wxPropertyGrida188">03980</a>     <span class="keyword">inline</span> <span class="keywordtype">void</span> SetPropertyLabel ( wxPGId <span class="keywordtype">id</span>, <span class="keyword">const</span> wxString&amp; newproplabel )
03981     {
03982         wxPGProperty* p = &amp;GetPropertyById( <span class="keywordtype">id</span> );
03983         <span class="keywordflow">if</span> ( p ) SetPropertyLabel ( p, newproplabel );
03984     }
<a name="l03990"></a><a class="code" href="classwxPropertyGrid.htm#wxPropertyGrida187">03990</a>     <span class="keyword">inline</span> <span class="keywordtype">void</span> SetPropertyLabel ( wxPGNameStr name, <span class="keyword">const</span> wxString&amp; newproplabel )
03991     {
03992         wxPGProperty* p = wxPGIdToPtr ( <a class="code" href="classwxPropertyContainerMethods.htm#wxPropertyGridManagera55">GetPropertyByName</a>(name) );
03993         <span class="keywordflow">if</span> ( p ) SetPropertyLabel ( p, newproplabel );
03994     }
03995 
<a name="l04005"></a><a class="code" href="classwxPropertyGrid.htm#wxPropertyGrida190">04005</a>     <span class="keyword">inline</span> <span class="keywordtype">void</span> SetPropertyName ( wxPGId <span class="keywordtype">id</span>, <span class="keyword">const</span> wxString&amp; newname )
04006     {
04007         DoSetPropertyName ( wxPGIdToPtr(<span class="keywordtype">id</span>), newname );
04008     }
<a name="l04018"></a><a class="code" href="classwxPropertyGrid.htm#wxPropertyGrida189">04018</a>     <span class="keyword">inline</span> <span class="keywordtype">void</span> SetPropertyName ( wxPGNameStr name, <span class="keyword">const</span> wxString&amp; newname )
04019     {
04020         DoSetPropertyName ( wxPGIdToPtr ( <a class="code" href="classwxPropertyContainerMethods.htm#wxPropertyGridManagera55">GetPropertyByName</a>(name) ), newname );
04021     }
04022 
<a name="l04024"></a><a class="code" href="classwxPropertyGrid.htm#wxPropertyGrida221">04024</a>     <span class="keyword">inline</span> <span class="keywordtype">void</span> SetPropertyValue ( wxPGId <span class="keywordtype">id</span>, <span class="keywordtype">long</span> value )
04025     {
04026         SetPropertyValue ( <span class="keywordtype">id</span>, wxPG_VALUETYPE(<span class="keywordtype">long</span>), wxPGVariantFromLong(value) );
04027     }
<a name="l04029"></a><a class="code" href="classwxPropertyGrid.htm#wxPropertyGrida220">04029</a>     <span class="keyword">inline</span> <span class="keywordtype">void</span> SetPropertyValue ( wxPGId <span class="keywordtype">id</span>, <span class="keywordtype">int</span> value )
04030     {
04031         SetPropertyValue ( <span class="keywordtype">id</span>, wxPG_VALUETYPE(<span class="keywordtype">long</span>), wxPGVariantFromLong((<span class="keywordtype">long</span>)value) );
04032     }
<a name="l04034"></a><a class="code" href="classwxPropertyGrid.htm#wxPropertyGrida219">04034</a>     <span class="keyword">inline</span> <span class="keywordtype">void</span> SetPropertyValue ( wxPGId <span class="keywordtype">id</span>, <span class="keywordtype">double</span> value )
04035     {
04036         SetPropertyValue ( <span class="keywordtype">id</span>, wxPG_VALUETYPE(<span class="keywordtype">double</span>), wxPGVariantFromDouble(value) );
04037     }
<a name="l04039"></a><a class="code" href="classwxPropertyGrid.htm#wxPropertyGrida218">04039</a>     <span class="keyword">inline</span> <span class="keywordtype">void</span> SetPropertyValue ( wxPGId <span class="keywordtype">id</span>, <span class="keywordtype">bool</span> value )
04040     {
04041         SetPropertyValue ( <span class="keywordtype">id</span>, wxPG_VALUETYPE(<span class="keywordtype">bool</span>), wxPGVariantFromLong(value?1:0) );
04042     }
04043 
04050     <span class="keywordtype">void</span> SetPropertyValue ( wxPGId <span class="keywordtype">id</span>, <span class="keyword">const</span> wxString&amp; value );
04051 
04052     <span class="keyword">inline</span> <span class="keywordtype">void</span> SetPropertyValue ( wxPGId <span class="keywordtype">id</span>, <span class="keyword">const</span> wxChar* value )
04053     {
04054         SetPropertyValue(<span class="keywordtype">id</span>,wxString(value));
04055     }
04056 
<a name="l04058"></a><a class="code" href="classwxPropertyGrid.htm#wxPropertyGrida215">04058</a>     <span class="keyword">inline</span> <span class="keywordtype">void</span> SetPropertyValue ( wxPGId <span class="keywordtype">id</span>, <span class="keyword">const</span> wxArrayString&amp; value )
04059     {
04060         SetPropertyValue ( <span class="keywordtype">id</span>, wxPG_VALUETYPE(wxArrayString), wxPGVariantFromArrayString(value) );
04061     }
<a name="l04063"></a><a class="code" href="classwxPropertyGrid.htm#wxPropertyGrida214">04063</a>     <span class="keyword">inline</span> <span class="keywordtype">void</span> SetPropertyValue ( wxPGId <span class="keywordtype">id</span>, <span class="keywordtype">void</span>* value )
04064     {
04065         SetPropertyValue ( <span class="keywordtype">id</span>, wxPG_VALUETYPE(<span class="keywordtype">void</span>), value );
04066     }
04068     <span class="keywordtype">void</span> SetPropertyValue ( wxPGId <span class="keywordtype">id</span>, wxObject* value );
04069     <span class="keyword">inline</span> <span class="keywordtype">void</span> SetPropertyValue ( wxPGId <span class="keywordtype">id</span>, wxObject&amp; value )
04070     {
04071         SetPropertyValue(<span class="keywordtype">id</span>,&amp;value);
04072     }
04073 
04075     <span class="keywordtype">void</span> SetPropertyValue ( wxPGId <span class="keywordtype">id</span>, wxVariant&amp; value );
04076 
<a name="l04078"></a><a class="code" href="classwxPropertyGrid.htm#wxPropertyGrida210">04078</a>     <span class="keyword">inline</span> <span class="keywordtype">void</span> SetPropertyValue ( wxPGId <span class="keywordtype">id</span>, <span class="keyword">const</span> wxPoint&amp; value )
04079     {
04080         SetPropertyValue ( <span class="keywordtype">id</span>, wxT(<span class="stringliteral">"wxPoint"</span>), (<span class="keywordtype">void</span>*)&amp;value );
04081         <span class="comment">//wxASSERT ( wxStrcmp(wxPGIdToPtr(id)-&gt;GetValueType()-&gt;GetCustomTypeName(),wxT("wxPoint")) == 0 );</span>
04082         <span class="comment">//SetPropertyValue ( id, wxPG_VALUETYPE(void), (void*)&amp;value );</span>
04083     }
<a name="l04085"></a><a class="code" href="classwxPropertyGrid.htm#wxPropertyGrida209">04085</a>     <span class="keyword">inline</span> <span class="keywordtype">void</span> SetPropertyValue ( wxPGId <span class="keywordtype">id</span>, <span class="keyword">const</span> wxSize&amp; value )
04086     {
04087         SetPropertyValue ( <span class="keywordtype">id</span>, wxT(<span class="stringliteral">"wxSize"</span>), (<span class="keywordtype">void</span>*)&amp;value );
04088         <span class="comment">//wxASSERT ( wxStrcmp(wxPGIdToPtr(id)-&gt;GetValueType()-&gt;GetCustomTypeName(),wxT("wxSize")) == 0 );</span>
04089         <span class="comment">//SetPropertyValue ( id, wxPG_VALUETYPE(void), (void*)&amp;value );</span>
04090     }
<a name="l04092"></a><a class="code" href="classwxPropertyGrid.htm#wxPropertyGrida208">04092</a>     <span class="keyword">inline</span> <span class="keywordtype">void</span> SetPropertyValue ( wxPGId <span class="keywordtype">id</span>, <span class="keyword">const</span> wxArrayInt&amp; value )
04093     {
04094         <span class="comment">//wxASSERT ( wxStrcmp(wxPGIdToPtr(id)-&gt;GetValueType()-&gt;GetCustomTypeName(),wxT("wxArrayInt")) == 0 );</span>
04095         <span class="comment">//SetPropertyValue ( id, wxPG_VALUETYPE(void), (void*)&amp;value );</span>
04096         SetPropertyValue ( <span class="keywordtype">id</span>, wxT(<span class="stringliteral">"wxArrayInt"</span>), (<span class="keywordtype">void</span>*)&amp;value );
04097     }
04098 
<a name="l04100"></a><a class="code" href="classwxPropertyGrid.htm#wxPropertyGrida207">04100</a>     <span class="keyword">inline</span> <span class="keywordtype">void</span> SetPropertyValue ( wxPGNameStr name, <span class="keywordtype">long</span> value )
04101     {
04102         SetPropertyValue ( <a class="code" href="classwxPropertyContainerMethods.htm#wxPropertyGridManagera55">GetPropertyByName</a>(name), wxPG_VALUETYPE(<span class="keywordtype">long</span>), wxPGVariantFromLong(value) );
04103     }
<a name="l04105"></a><a class="code" href="classwxPropertyGrid.htm#wxPropertyGrida206">04105</a>     <span class="keyword">inline</span> <span class="keywordtype">void</span> SetPropertyValue ( wxPGNameStr name, <span class="keywordtype">int</span> value )
04106     {
04107         SetPropertyValue ( <a class="code" href="classwxPropertyContainerMethods.htm#wxPropertyGridManagera55">GetPropertyByName</a>(name), wxPG_VALUETYPE(<span class="keywordtype">long</span>), wxPGVariantFromLong(value) );
04108     }
<a name="l04110"></a><a class="code" href="classwxPropertyGrid.htm#wxPropertyGrida205">04110</a>     <span class="keyword">inline</span> <span class="keywordtype">void</span> SetPropertyValue ( wxPGNameStr name, <span class="keywordtype">double</span> value )
04111     {
04112         SetPropertyValue ( <a class="code" href="classwxPropertyContainerMethods.htm#wxPropertyGridManagera55">GetPropertyByName</a>(name), wxPG_VALUETYPE(<span class="keywordtype">double</span>), wxPGVariantFromDouble(value) );
04113     }
<a name="l04115"></a><a class="code" href="classwxPropertyGrid.htm#wxPropertyGrida204">04115</a>     <span class="keyword">inline</span> <span class="keywordtype">void</span> SetPropertyValue ( wxPGNameStr name, <span class="keywordtype">bool</span> value )
04116     {
04117         SetPropertyValue ( <a class="code" href="classwxPropertyContainerMethods.htm#wxPropertyGridManagera55">GetPropertyByName</a>(name), wxPG_VALUETYPE(<span class="keywordtype">bool</span>), wxPGVariantFromLong(value?1:0) );
04118     }
<a name="l04122"></a><a class="code" href="classwxPropertyGrid.htm#wxPropertyGrida203">04122</a>     <span class="keyword">inline</span> <span class="keywordtype">void</span> SetPropertyValue ( wxPGNameStr name, <span class="keyword">const</span> wxString&amp; value )
04123     {
04124         SetPropertyValue ( <a class="code" href="classwxPropertyContainerMethods.htm#wxPropertyGridManagera55">GetPropertyByName</a>(name), value );
04125     }
<a name="l04129"></a><a class="code" href="classwxPropertyGrid.htm#wxPropertyGrida202">04129</a>     <span class="keyword">inline</span> <span class="keywordtype">void</span> SetPropertyValue ( wxPGNameStr name, <span class="keyword">const</span> wxChar* value )
04130     {
04131         SetPropertyValue ( <a class="code" href="classwxPropertyContainerMethods.htm#wxPropertyGridManagera55">GetPropertyByName</a>(name), wxString(value) );
04132     }
<a name="l04134"></a><a class="code" href="classwxPropertyGrid.htm#wxPropertyGrida201">04134</a>     <span class="keyword">inline</span> <span class="keywordtype">void</span> SetPropertyValue ( wxPGNameStr name, <span class="keywordtype">void</span>* value )
04135     {
04136         SetPropertyValue ( <a class="code" href="classwxPropertyContainerMethods.htm#wxPropertyGridManagera55">GetPropertyByName</a>(name), wxPG_VALUETYPE(<span class="keywordtype">void</span>), value );
04137     }
<a name="l04139"></a><a class="code" href="classwxPropertyGrid.htm#wxPropertyGrida200">04139</a>     <span class="keyword">inline</span> <span class="keywordtype">void</span> SetPropertyValue ( wxPGNameStr name, <span class="keyword">const</span> wxArrayString&amp; value )
04140     {
04141         SetPropertyValue ( <a class="code" href="classwxPropertyContainerMethods.htm#wxPropertyGridManagera55">GetPropertyByName</a>(name), wxPG_VALUETYPE(wxArrayString), wxPGVariantFromArrayString(value) );
04142     }
<a name="l04144"></a><a class="code" href="classwxPropertyGrid.htm#wxPropertyGrida199">04144</a>     <span class="keyword">inline</span> <span class="keywordtype">void</span> SetPropertyValue ( wxPGNameStr name, wxObject* value )
04145     {
04146         SetPropertyValue ( <a class="code" href="classwxPropertyContainerMethods.htm#wxPropertyGridManagera55">GetPropertyByName</a>(name), value );
04147     }
04148     <span class="keyword">inline</span> <span class="keywordtype">void</span> SetPropertyValue ( wxPGNameStr name, wxObject&amp; value )
04149     {
04150         SetPropertyValue(name,&amp;value);
04151     }
<a name="l04153"></a><a class="code" href="classwxPropertyGrid.htm#wxPropertyGrida197">04153</a>     <span class="keywordtype">void</span> SetPropertyValue ( wxPGNameStr name, wxVariant&amp; value )
04154     {
04155         SetPropertyValue ( <a class="code" href="classwxPropertyContainerMethods.htm#wxPropertyGridManagera55">GetPropertyByName</a>(name), value );
04156     }
<a name="l04158"></a><a class="code" href="classwxPropertyGrid.htm#wxPropertyGrida196">04158</a>     <span class="keyword">inline</span> <span class="keywordtype">void</span> SetPropertyValue ( wxPGNameStr name, <span class="keyword">const</span> wxPoint&amp; value )
04159     {
04160         SetPropertyValue ( <a class="code" href="classwxPropertyContainerMethods.htm#wxPropertyGridManagera55">GetPropertyByName</a>(name), value );
04161     }
<a name="l04163"></a><a class="code" href="classwxPropertyGrid.htm#wxPropertyGrida195">04163</a>     <span class="keyword">inline</span> <span class="keywordtype">void</span> SetPropertyValue ( wxPGNameStr name, <span class="keyword">const</span> wxSize&amp; value )
04164     {
04165         SetPropertyValue ( <a class="code" href="classwxPropertyContainerMethods.htm#wxPropertyGridManagera55">GetPropertyByName</a>(name), value );
04166     }
<a name="l04168"></a><a class="code" href="classwxPropertyGrid.htm#wxPropertyGrida194">04168</a>     <span class="keyword">inline</span> <span class="keywordtype">void</span> SetPropertyValue ( wxPGNameStr name, <span class="keyword">const</span> wxArrayInt&amp; value )
04169     {
04170         SetPropertyValue ( <a class="code" href="classwxPropertyContainerMethods.htm#wxPropertyGridManagera55">GetPropertyByName</a>(name), value );
04171     }
04172 
04176     <span class="keywordtype">void</span> SetPropertyValueUnspecified ( wxPGId <span class="keywordtype">id</span> );
04177     <span class="keyword">inline</span> <span class="keywordtype">void</span> SetPropertyUnspecified ( wxPGNameStr name )
04178     {
04179         SetPropertyValueUnspecified ( <a class="code" href="classwxPropertyContainerMethods.htm#wxPropertyGridManagera55">GetPropertyByName</a>(name) );
04180     }
04181 
<a name="l04186"></a><a class="code" href="classwxPropertyGrid.htm#wxPropertyGrida225">04186</a>     <span class="keywordtype">void</span> SetPropertyValues ( <span class="keyword">const</span> wxList&amp; list, wxPGId default_category )
04187     {
04188         m_pState-&gt;SetPropertyValues(list,default_category);
04189     }
04190 
04191     <span class="keyword">inline</span> <span class="keywordtype">void</span> SetPropertyValues ( <span class="keyword">const</span> wxVariant&amp; list, wxPGId default_category )
04192     {
04193         SetPropertyValues (list.GetList(),default_category);
04194     }
04195     <span class="keyword">inline</span> <span class="keywordtype">void</span> SetPropertyValues ( <span class="keyword">const</span> wxList&amp; list, <span class="keyword">const</span> wxString&amp; default_category = wxEmptyString )
04196     {
04197         SetPropertyValues (list,<a class="code" href="classwxPropertyContainerMethods.htm#wxPropertyGridManagera55">GetPropertyByName</a>(default_category));
04198     }
04199     <span class="keyword">inline</span> <span class="keywordtype">void</span> SetPropertyValues ( <span class="keyword">const</span> wxVariant&amp; list, <span class="keyword">const</span> wxString&amp; default_category = wxEmptyString )
04200     {
04201         SetPropertyValues (list.GetList(),<a class="code" href="classwxPropertyContainerMethods.htm#wxPropertyGridManagera55">GetPropertyByName</a>(default_category));
04202     }
04203 
<a name="l04210"></a><a class="code" href="classwxPropertyGrid.htm#wxPropertyGrida230">04210</a>     <span class="keyword">inline</span> <span class="keywordtype">void</span> SetVerticalSpacing ( <span class="keywordtype">int</span> vspacing )
04211     {
04212         m_vspacing = (<span class="keywordtype">unsigned</span> <span class="keywordtype">char</span>)vspacing;
04213         CalculateFontAndBitmapStuff ( vspacing );
04214         <span class="keywordflow">if</span> ( !m_pState-&gt;m_itemsAdded ) Refresh();
04215     }
04216 
<a name="l04218"></a><a class="code" href="classwxPropertyGrid.htm#wxPropertyGrida232">04218</a>     <span class="keyword">inline</span> <span class="keywordtype">void</span> ShowLowPriority() { Compact ( FALSE ); }
04219 
<a name="l04221"></a><a class="code" href="classwxPropertyGrid.htm#wxPropertyGrida234">04221</a>     <span class="keyword">inline</span> <span class="keywordtype">void</span> ShowPropertyError( wxPGId <span class="keywordtype">id</span>, <span class="keyword">const</span> wxString&amp; msg ) 
04222     {
04223         wxASSERT ( wxPGIdIsOk(<span class="keywordtype">id</span>) );
04224         wxPGIdToPtr(<span class="keywordtype">id</span>)-&gt;ShowError(msg);
04225     }
04226     <span class="keyword">inline</span> <span class="keywordtype">void</span> ShowPropertyError( wxPGNameStr name, <span class="keyword">const</span> wxString&amp; msg ) 
04227     {
04228         ShowPropertyError (<a class="code" href="classwxPropertyContainerMethods.htm#wxPropertyGridManagera55">GetPropertyByName</a>(name), msg);
04229     }
04230 
04232     <span class="keywordtype">void</span> Sort ();
04233 
04236     <span class="keywordtype">void</span> Sort ( wxPGId <span class="keywordtype">id</span> );
04237 
<a name="l04240"></a><a class="code" href="classwxPropertyGrid.htm#wxPropertyGrida235">04240</a>     <span class="keyword">inline</span> <span class="keywordtype">void</span> Sort ( wxPGNameStr name )
04241     {
04242         Sort ( <a class="code" href="classwxPropertyContainerMethods.htm#wxPropertyGridManagera55">GetPropertyByName</a>(name) );
04243     }
04244 
04248     <span class="keyword">virtual</span> <span class="keywordtype">void</span> SetWindowStyleFlag( <span class="keywordtype">long</span> style );
04249 
<a name="l04254"></a><a class="code" href="classwxPropertyGrid.htm#wxPropertyGrida170">04254</a>     <span class="keyword">inline</span> <span class="keywordtype">void</span> SetDefaultPriority( <span class="keywordtype">int</span> priority )
04255     {
04256         <span class="keywordflow">if</span> ( priority == wxPG_LOW )
04257             m_iFlags |= wxPG_FL_ADDING_HIDEABLES;
04258         <span class="keywordflow">else</span>
04259             m_iFlags &amp;= ~(wxPG_FL_ADDING_HIDEABLES);
04260     }
04261 
<a name="l04264"></a><a class="code" href="classwxPropertyGrid.htm#wxPropertyGrida240">04264</a>     <span class="keyword">inline</span> <span class="keywordtype">void</span> TogglePropertyPriority ( wxPGId <span class="keywordtype">id</span> )
04265     {
04266         <span class="keywordtype">int</span> priority = wxPG_LOW;
04267         <span class="keywordflow">if</span> ( <a class="code" href="classwxPropertyContainerMethods.htm#wxPropertyGridManagera78">GetPropertyPriority</a>(<span class="keywordtype">id</span>) == wxPG_LOW )
04268             priority = wxPG_HIGH;
04269         SetPropertyPriority(<span class="keywordtype">id</span>,priority);
04270     }
04271 
<a name="l04274"></a><a class="code" href="classwxPropertyGrid.htm#wxPropertyGrida239">04274</a>     <span class="keyword">inline</span> <span class="keywordtype">void</span> TogglePropertyPriority ( wxPGNameStr name )
04275     {
04276         TogglePropertyPriority(<a class="code" href="classwxPropertyContainerMethods.htm#wxPropertyGridManagera55">GetPropertyByName</a>(name));
04277     }
04278 
<a name="l04280"></a><a class="code" href="classwxPropertyGrid.htm#wxPropertyGrida160">04280</a>     <span class="keyword">inline</span> <span class="keywordtype">void</span> ResetDefaultPriority()
04281     {
04282         SetDefaultPriority(wxPG_HIGH);
04283     }
04284 
<a name="l04293"></a><a class="code" href="classwxPropertyGrid.htm#wxPropertyGridz0_0">04293</a>     <span class="keyword">inline</span> <span class="keywordtype">void</span> EditorsValueWasModified() { m_iFlags |= wxPG_FL_VALUE_MODIFIED; }
<a name="l04295"></a><a class="code" href="classwxPropertyGrid.htm#wxPropertyGridz0_1">04295</a>     <span class="keyword">inline</span> <span class="keywordtype">void</span> EditorsValueWasNotModified() { m_iFlags &amp;= ~(wxPG_FL_VALUE_MODIFIED); }
<a name="l04301"></a><a class="code" href="classwxPropertyGrid.htm#wxPropertyGridz0_9">04301</a>     <span class="keyword">inline</span> <span class="keywordtype">bool</span> IsEditorsValueModified()<span class="keyword"> const </span>{ <span class="keywordflow">return</span>  ( m_iFlags &amp; wxPG_FL_VALUE_MODIFIED ) ? TRUE : FALSE; }
04302     wxPGCtrlClass* GenerateEditorButton ( <span class="keyword">const</span> wxPoint&amp; pos, <span class="keyword">const</span> wxSize&amp; sz );
04319     wxPGCtrlClass* GenerateEditorTextCtrl(<span class="keyword">const</span> wxPoint&amp; pos,
04320                                           <span class="keyword">const</span> wxSize&amp; sz,
04321                                           <span class="keyword">const</span> wxString&amp; value,
04322                                           wxPGCtrlClass* secondary,
04323                                           <span class="keywordtype">int</span> extraStyle = 0);
04324 
04325     <span class="comment">/* Generates both textctrl and button.</span>
04326 <span class="comment">    */</span>
04327     wxPGCtrlClass* GenerateEditorTextCtrlAndButton( <span class="keyword">const</span> wxPoint&amp; pos,
04328         <span class="keyword">const</span> wxSize&amp; sz, wxPGCtrlClass** psecondary, <span class="keywordtype">int</span> limited_editing,
04329         wxPGProperty* property );
04330 
04339     wxPoint GetGoodEditorDialogPosition ( wxPGProperty* p,
04340         <span class="keyword">const</span> wxSize&amp; sz );
04341 
04342     <span class="comment">// Converts escape sequences in src_str to newlines,</span>
04343     <span class="comment">// tabs, etc. and copies result to dst_str.</span>
04344     <span class="keyword">static</span> wxString&amp; ExpandEscapeSequences ( wxString&amp; dst_str, wxString&amp; src_str );
04345 
04346     <span class="comment">// Converts newlines, tabs, etc. in src_str to escape</span>
04347     <span class="comment">// sequences, and copies result to dst_str.</span>
04348     <span class="keyword">static</span> wxString&amp; CreateEscapeSequences ( wxString&amp; dst_str, wxString&amp; src_str );
04349 
<a name="l04352"></a><a class="code" href="classwxPropertyGrid.htm#wxPropertyGridz0_6">04352</a>     <span class="keyword">inline</span> wxPGCtrlClass* GetEditorControl()<span class="keyword"> const</span>
04353 <span class="keyword">    </span>{
04354         <span class="keywordflow">return</span> m_wndPrimary;
04355     }
04356 
04357 <span class="preprocessor">#ifdef wxPG_COMPATIBILITY_1_0_0</span>
04358 <span class="preprocessor"></span>    <span class="keyword">inline</span> wxPGCtrlClass* GetPrimaryEditor()<span class="keyword"> const</span>
04359 <span class="keyword">    </span>{
04360         <span class="keywordflow">return</span> m_wndPrimary;
04361     }
04362 <span class="preprocessor">#endif</span>
04363 <span class="preprocessor"></span>
<a name="l04366"></a><a class="code" href="classwxPropertyGrid.htm#wxPropertyGridz0_7">04366</a>     <span class="keyword">inline</span> wxPGCtrlClass* GetEditorControlSecondary()<span class="keyword"> const</span>
04367 <span class="keyword">    </span>{
04368         <span class="keywordflow">return</span> m_wndSecondary;
04369     }
04370 
04376     <span class="keyword">static</span> <span class="keywordtype">void</span> ArrayStringToString ( wxString&amp; dst, <span class="keyword">const</span> wxArrayString&amp; src,
04377                                       wxChar preDelim, wxChar postDelim,
04378                                       <span class="keywordtype">int</span> flags );
04379 <span class="preprocessor">#if wxPG_USE_CUSTOM_CONTROLS</span>
04380 <span class="preprocessor"></span>    <span class="keyword">inline</span> wxCustomControlManager* GetCCManager() { <span class="keywordflow">return</span> &amp;m_ccManager; }
04381 <span class="preprocessor">#endif</span>
04382 <span class="preprocessor"></span>
04385     <span class="keywordtype">void</span> OnCustomEditorEvent ( wxEvent &amp;event );
04387     <span class="keywordtype">void</span> SLAlloc ( <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> itemcount, <span class="keyword">const</span> wxChar** items );
<a name="l04389"></a><a class="code" href="classwxPropertyGrid.htm#wxPropertyGridz0_12">04389</a>     <span class="keyword">inline</span> wxArrayString&amp; SLGet () { <span class="keywordflow">return</span> m_sl; }
04391 
04392     <span class="keyword">inline</span> <span class="keywordtype">long</span> GetInternalFlags ()<span class="keyword"> const </span>{ <span class="keywordflow">return</span> m_iFlags; }
04393     <span class="keyword">inline</span> <span class="keywordtype">void</span> ClearInternalFlag ( <span class="keywordtype">long</span> flag ) { m_iFlags &amp;= ~(flag); }
04394     <span class="keyword">inline</span> <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> GetBottomY ()<span class="keyword"> const </span>{ <span class="keywordflow">return</span> m_bottomy; }
04395     <span class="keyword">inline</span> <span class="keywordtype">void</span> SetBottomY ( <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> y ) { m_bottomy = y; }
04396 
04399     <span class="keywordtype">void</span> PropertyWasModified ( wxPGProperty* p );
04400 
04401     <span class="comment">//wxArrayPtrVoid* GetCatArray () { return &amp;m_pState-&gt;m_catArray; }</span>
04402 <span class="preprocessor">#if !wxPG_USE_CUSTOM_CONTROLS</span>
04403 <span class="preprocessor"></span>    <span class="keywordtype">void</span> OnComboItemPaint (wxOwnerDrawnComboBox* pCb,<span class="keywordtype">int</span> item,wxDC&amp; dc,
04404                            wxRect&amp; rect,<span class="keywordtype">int</span> flags );
04405 <span class="preprocessor">#endif</span>
04406 <span class="preprocessor"></span>
04407     <span class="comment">/* Creates choices for labels and values, or returns existing choices which</span>
04408 <span class="comment">       point to the same memory.</span>
04409 <span class="comment">    */</span>
04410     <span class="keyword">static</span> wxPGChoices* CreateChoicesArray(<span class="keyword">const</span> wxChar** labels,
04411                                            <span class="keyword">const</span> <span class="keywordtype">long</span>* values,
04412                                            <span class="keywordtype">int</span> itemcount);
04413 
04414     <span class="comment">/* Creates choices for labels and values, or returns existing choices which</span>
04415 <span class="comment">       point to the same memory (*only* if acceptLabelsAsId=true).</span>
04416 <span class="comment">    */</span>
04417     <span class="keyword">static</span> wxPGChoices* CreateChoicesArray(<span class="keyword">const</span> wxArrayString&amp; labels,
04418                                            <span class="keyword">const</span> wxArrayInt&amp; values = *((<span class="keyword">const</span> wxArrayInt*)NULL),
04419                                            <span class="keywordtype">bool</span> acceptLabelsAsId = <span class="keyword">false</span>);
04420 
04421     <span class="comment">/* Creates choices for labels and values in wxPGChoices, or returns existing</span>
04422 <span class="comment">       choices which is identical.</span>
04423 <span class="comment">    */</span>
04424     <span class="keyword">static</span> wxPGChoices* CreateChoicesArray(wxPGChoices&amp; choices);
04425 
04426 <span class="preprocessor">#ifdef __WXDEBUG__</span>
04427 <span class="preprocessor"></span>    <span class="comment">// Displays what dynamic arrays are allocated</span>
04428     <span class="keyword">static</span> <span class="keywordtype">void</span> DumpAllocatedChoiceSets();
04429 <span class="preprocessor">#endif</span>
04430 <span class="preprocessor"></span>
04433     <span class="keyword">static</span> <span class="keywordtype">void</span> DoubleToString(wxString&amp; target,
04434                                <span class="keywordtype">double</span> value,
04435                                <span class="keywordtype">int</span> precision,
04436                                <span class="keywordtype">bool</span> removeZeroes,
04437                                wxString* precTemplate);
04438 
04439 <span class="preprocessor">#ifdef _WX_WINDOW_H_BASE_</span>
04440 <span class="preprocessor"></span><span class="comment">// Simple way to make doxygen skip protected members</span>
04441 <span class="comment">// Used wx/window.h include guard because had trouble</span>
04442 <span class="comment">// getting doxygen definitions work.</span>
04443 
04444     <span class="comment">//</span>
04445     <span class="comment">// Overridden functions - no documentation required.</span>
04446     <span class="comment">//</span>
04447 
04448     <span class="keyword">virtual</span> wxSize DoGetBestSize() <span class="keyword">const</span>;
04449 
04450     <span class="keyword">virtual</span> <span class="keywordtype">void</span> Refresh( <span class="keywordtype">bool</span> eraseBackground = <span class="keyword">true</span>,
04451                           <span class="keyword">const</span> wxRect *rect = (<span class="keyword">const</span> wxRect *) NULL );
04452 
04453     <span class="keyword">virtual</span> <span class="keywordtype">bool</span> SetFont ( <span class="keyword">const</span> wxFont&amp; font );
04454 
04455     <span class="keyword">virtual</span> <span class="keywordtype">void</span> Freeze();
04456 
04457     <span class="keyword">virtual</span> <span class="keywordtype">void</span> SetExtraStyle ( <span class="keywordtype">long</span> exStyle );
04458 
04459     <span class="keyword">virtual</span> <span class="keywordtype">void</span> Thaw();
04460 
04461 <span class="keyword">protected</span>:
04462 
04464     <span class="comment">//wxPropertyGridState         m_state;</span>
04465     <span class="comment">//wxPropertyGridState*         m_pState;</span>
04466 
04471     <span class="comment">//unsigned char               m_itemsAdded;</span>
04472 
04474     <span class="keywordtype">unsigned</span> <span class="keywordtype">char</span>               m_processingEvent;
04475 
04476 <span class="preprocessor">#ifndef wxPG_ICON_WIDTH</span>
04477 <span class="preprocessor"></span>        wxBitmap            *m_expandbmp, *m_collbmp;
04478 <span class="preprocessor">#endif</span>
04479 <span class="preprocessor"></span>
04480     wxCursor            *m_cursor_sizewe;
04481 
04483     wxPGCtrlClass       *m_wndPrimary;
04484     wxPGCtrlClass       *m_wndSecondary;
04485 
04486 <span class="preprocessor">#if wxPG_DOUBLE_BUFFER</span>
04487 <span class="preprocessor"></span>    wxBitmap            *m_doubleBuffer;
04488 <span class="preprocessor">#endif</span>
04489 <span class="preprocessor"></span>
04492     <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> m_bottomy;
04493 
04495         <span class="keywordtype">int</span>                 m_spacingy;
04496 
04498     <span class="keywordtype">int</span>                 m_width;
04499 
04501     <span class="keywordtype">int</span>                 m_height;
04502 
04504     wxPGArrayProperty   m_arrVisible;
04505 
04507     <span class="keywordtype">int</span>                 m_prevVY;
04508 
04510     <span class="keywordtype">int</span>                 m_calcVisHeight;
04511 
04514         <span class="keywordtype">int</span>                 m_gutterwidth;
04515 
04517     <span class="keywordtype">int</span>                 m_lineHeight;
04518 
04521     <span class="keywordtype">int</span>                 m_marginwidth;
04522 
04523     <span class="keywordtype">int</span>                 m_buttonSpacingY; <span class="comment">// y spacing for expand/collapse button.</span>
04524 
04526     <span class="keywordtype">int</span>                 m_subgroup_extramargin;
04527 
04529         <span class="keywordtype">int</span>                 m_iconwidth;
04530 
04531 <span class="preprocessor">#ifndef wxPG_ICON_WIDTH</span>
04532 <span class="preprocessor"></span>
04534         <span class="keywordtype">int</span>                 m_iconheight;
04535 <span class="preprocessor">#endif</span>
04536 <span class="preprocessor"></span>
04538     <span class="keywordtype">int</span>                 m_curcursor;
04539 
04542         wxFont              m_captionFont;
04543 
04544 <span class="preprocessor">#if !wxPG_HEAVY_GFX</span>
04545 <span class="preprocessor"></span>    <span class="keywordtype">int</span>                 m_splitterprevdrawnx;
04546 
04548     wxPen               m_splitterpen;
04549 
04550 <span class="preprocessor">#endif</span>
04551 <span class="preprocessor"></span>
04552         <span class="keywordtype">int</span>                 m_fontHeight;  <span class="comment">// height of the font</span>
04553     
04554     <span class="comment">// Most recently added category.</span>
04555     <span class="comment">//wxPGPropertyWithChildren*   m_currentCategory;</span>
04556 
04557     <span class="comment">//</span>
04558     <span class="comment">// Temporary values</span>
04559     <span class="comment">//</span>
04560 
04562     <span class="keywordtype">int</span>                 m_startingSplitterX;
04563 
04565     <span class="keywordtype">unsigned</span> <span class="keywordtype">char</span>       m_dragStatus;
04566 
04568     <span class="keywordtype">signed</span> <span class="keywordtype">char</span>         m_dragOffset;
04569 
04571     <span class="keywordtype">unsigned</span> <span class="keywordtype">char</span>       m_mouseSide;
04572 
04574     <span class="keywordtype">unsigned</span> <span class="keywordtype">char</span>       m_editorFocused;
04575 
04577     <span class="keywordtype">unsigned</span> <span class="keywordtype">char</span>       m_coloursCustomized;
04578 
04580     <span class="comment">//unsigned char       m_lastCaptionBottomnest;</span>
04581 
04583     <span class="keywordtype">unsigned</span> <span class="keywordtype">char</span>       m_frozen;
04584 
04585     <span class="keywordtype">unsigned</span> <span class="keywordtype">char</span>       m_vspacing;
04586 
04588     wxUint32            m_iFlags;
04589 
04591     <span class="keywordtype">int</span>                 m_clearThisMany;
04592     
04597     wxPGProperty*       m_selected;
04598 
04599     wxPGProperty*       m_propHover;    <span class="comment">// pointer to property that has mouse on itself</span>
04600 
04601     <span class="keywordtype">int</span>                 m_splitterx; <span class="comment">// x position for the vertical line dividing name and value</span>
04602 
04603 <span class="preprocessor">#if !wxPG_USE_CUSTOM_CONTROLS</span>
04604 <span class="preprocessor"></span>            
04605     <span class="keywordtype">int</span>                 m_ctrlXAdjust; <span class="comment">// x relative to splitter (needed for resize).</span>
04606 <span class="preprocessor">#endif</span>
04607 <span class="preprocessor"></span>
04608     wxColour            m_colLine;     <span class="comment">// lines between cells</span>
04609     wxColour            m_colPropFore; <span class="comment">// property names and texts are written in this color</span>
04610     wxColour            m_colPropBack; <span class="comment">// background for m_colPropFore</span>
04611     wxColour            m_colCapFore;  <span class="comment">// text color for captions</span>
04612     wxColour            m_colCapBack;  <span class="comment">// background color for captions</span>
04613     wxColour            m_colSelFore;  <span class="comment">// foreground for selected property</span>
04614     wxColour            m_colSelBack;  <span class="comment">// background for selected property (actually use background color when control out-of-focus)</span>
04615     wxColour            m_colMargin;   <span class="comment">// background colour for margin</span>
04616 
04617     wxArrayPtrVoid      m_arrBgBrushes; <span class="comment">// Array of background colour brushes.</span>
04618 
04619 <span class="preprocessor">#if wxPG_USE_CUSTOM_CONTROLS</span>
04620 <span class="preprocessor"></span>    wxCustomControlManager  m_ccManager;
04621 <span class="preprocessor">#endif</span>
04622 <span class="preprocessor"></span>
04623     wxArrayString       m_sl;           <span class="comment">// string control helper</span>
04624 
04625 <span class="keyword">protected</span>:
04626 
04627     <span class="comment">// Sets some members to defaults.</span>
04628         <span class="keywordtype">void</span> Init1();
04629 
04630     <span class="comment">// Initializes some members.</span>
04631         <span class="keywordtype">void</span> Init2( <span class="keywordtype">int</span> style );
04632 
04633         <span class="keywordtype">void</span> OnPaint (wxPaintEvent &amp;event );
04634 
04635     <span class="comment">// main event receivers</span>
04636 <span class="preprocessor">#if wxPG_USE_CUSTOM_CONTROLS</span>
04637 <span class="preprocessor"></span>    <span class="keywordtype">void</span> OnMouseEvent ( wxMouseEvent &amp;event );
04638 <span class="preprocessor">#else</span>
04639 <span class="preprocessor"></span>    <span class="keywordtype">void</span> OnMouseMove ( wxMouseEvent &amp;event );
04640     <span class="keywordtype">void</span> OnMouseClick ( wxMouseEvent &amp;event );
04641     <span class="keywordtype">void</span> OnMouseRightClick ( wxMouseEvent &amp;event );
04642     <span class="keywordtype">void</span> OnMouseUp ( wxMouseEvent &amp;event );
04643 <span class="preprocessor">#endif</span>
04644 <span class="preprocessor"></span>    <span class="keywordtype">void</span> OnKey ( wxKeyEvent &amp;event );
04645     <span class="keywordtype">void</span> OnResize ( wxSizeEvent &amp;event );
04646     <span class="comment">//virtual void OnSize ( wxSizeEvent &amp;event );</span>
04647 
04648     <span class="comment">// event handlers</span>
04649     <span class="keywordtype">bool</span> HandleMouseMove ( <span class="keywordtype">int</span> x, <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> y, wxMouseEvent &amp;event );
04650     <span class="keywordtype">bool</span> HandleMouseClick ( <span class="keywordtype">int</span> x, <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> y, wxMouseEvent &amp;event );
04651     <span class="keywordtype">bool</span> HandleMouseRightClick( <span class="keywordtype">int</span> x, <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> y, wxMouseEvent &amp;event );
04652     <span class="keywordtype">bool</span> HandleMouseUp ( <span class="keywordtype">int</span> x, <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> y, wxMouseEvent &amp;event );
04653     <span class="keywordtype">void</span> HandleKeyEvent( wxKeyEvent &amp;event );
04654     <span class="keywordtype">bool</span> HandleChildKey ( wxKeyEvent&amp; event ); <span class="comment">// Handle TAB and ESCAPE in control</span>
04655     
04656     <span class="keywordtype">void</span> OnMouseEntry ( wxMouseEvent &amp;event );
04657 
04658     <span class="keywordtype">void</span> OnSetFocus ( wxFocusEvent &amp;event );
04659     <span class="keywordtype">void</span> OnKillFocus ( wxFocusEvent &amp;event );
04660 
04661 <span class="preprocessor">#if !wxPG_USE_CUSTOM_CONTROLS</span>
04662 <span class="preprocessor"></span>
04663     <span class="keywordtype">bool</span> OnMouseCommon ( wxMouseEvent &amp;event, <span class="keywordtype">int</span>* px, <span class="keywordtype">int</span> *py );
04664     <span class="keywordtype">bool</span> OnMouseChildCommon ( wxMouseEvent &amp;event, <span class="keywordtype">int</span>* px, <span class="keywordtype">int</span> *py );
04665 
04666     <span class="comment">// sub-control event handlers</span>
04667     <span class="keywordtype">void</span> OnMouseEntryChild ( wxMouseEvent &amp;event );
04668     <span class="keywordtype">void</span> OnMouseClickChild ( wxMouseEvent &amp;event );
04669     <span class="keywordtype">void</span> OnMouseRightClickChild ( wxMouseEvent &amp;event );
04670     <span class="keywordtype">void</span> OnMouseMoveChild ( wxMouseEvent &amp;event );
04671     <span class="keywordtype">void</span> OnMouseUpChild ( wxMouseEvent &amp;event );
04672     <span class="keywordtype">void</span> OnKeyChild ( wxKeyEvent &amp;event );
04673     <span class="keywordtype">void</span> OnFocusChild ( wxFocusEvent &amp;event );
04674 
04675     <span class="keywordtype">void</span> OnCaptureChange ( wxMouseCaptureChangedEvent &amp;event );
04676 <span class="preprocessor">#endif // !wxPG_USE_CUSTOM_CONTROLS</span>
04677 <span class="preprocessor"></span>
04678     <span class="keywordtype">void</span> OnScrollEvent ( wxScrollWinEvent &amp;event );
04679 
04680     <span class="keywordtype">void</span> OnSysColourChanged ( wxSysColourChangedEvent &amp;event );
04681 
04682 <span class="keyword">protected</span>:
04683 <span class="comment">//private:</span>
04684 
04689         <span class="keywordtype">void</span> CalculateFontAndBitmapStuff( <span class="keywordtype">int</span> vspacing );
04690 
04691     <span class="comment">//void ClearValueBackground ( wxDC&amp; dc, wxPGProperty* p );</span>
04692 
04693     <span class="keyword">inline</span> wxRect GetEditorWidgetRect ( wxPGProperty* p );
04694 
04695     <span class="comment">//inline wxSize GetEditorWidgetSize ( wxPGProperty* p );</span>
04696 
04697     <span class="comment">//void CorrectEditorWidgetSizeX ( int cx, int cw );</span>
04698     <span class="keywordtype">void</span> CorrectEditorWidgetSizeX ( <span class="keywordtype">int</span> new_splitterx, <span class="keywordtype">int</span> new_width );
04699 
04700     <span class="comment">//void CorrectEditorWidgetSizeY ( int cy );</span>
04701 
04702 <span class="preprocessor">#ifdef __WXDEBUG__</span>
04703 <span class="preprocessor"></span>    <span class="keywordtype">void</span> _log_items ();
04704     <span class="keywordtype">void</span> OnScreenNote ( <span class="keyword">const</span> wxChar* format, ... );
04705 <span class="preprocessor">#endif</span>
04706 <span class="preprocessor"></span>
04707     <span class="keywordtype">void</span> Delete ( wxPGProperty* item );
04708 
04709     <span class="keywordtype">void</span> SelectProperty ( wxPGProperty* p, <span class="keywordtype">bool</span> focus = FALSE, <span class="keywordtype">bool</span> forceswitch = FALSE );
04710 
04711     <span class="keywordtype">void</span> DoDelete ( wxPGProperty* item );
04712 
04713     <span class="keywordtype">void</span> DoDrawItems(wxDC&amp; dc,
04714                      wxPGProperty* first_item,
04715                      wxPGProperty* last_item,
04716                      <span class="keyword">const</span> wxRect* clip_rect);
04717 
04718     <span class="keyword">virtual</span> wxPGId DoGetPropertyByName ( wxPGNameStr name ) <span class="keyword">const</span>;
04719 
04720     <span class="keyword">virtual</span> <span class="keywordtype">void</span> RefreshProperty( wxPGProperty* p );
04721 
04723     <span class="keywordtype">void</span> DrawItems ( wxDC&amp; dc, <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> topitemy, <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> bottomitemy,
04724         <span class="keyword">const</span> wxRect* clip_rect = NULL );
04725 
04726     <span class="keywordtype">void</span> DrawItems ( wxPGProperty* p1, wxPGProperty* p2 );
04727 
04728     <span class="keywordtype">void</span> DrawItem ( wxDC&amp; dc, wxPGProperty* p );
04729 
04730     <span class="keywordtype">void</span> DrawItemAndChildren ( wxDC&amp; dc, wxPGProperty* p );
04731 
04732     <span class="keyword">inline</span> <span class="keywordtype">void</span> DrawItem ( wxPGProperty* p );
04733 
04734     <span class="keyword">virtual</span> <span class="keywordtype">void</span> DrawItemAndChildren ( wxPGProperty* p );
04735 
04737     <span class="keyword">inline</span> wxPGProperty&amp; GetPropertyById ( wxPGId <span class="keywordtype">id</span> )
04738     {
04739         <span class="keywordflow">return</span> <span class="keywordtype">id</span>.GetProperty();
04740     }
04741 
04742     <span class="keyword">static</span> wxPropertyCategoryClass* GetPropertyCategory ( wxPGProperty* p );
04743 
04744     <span class="keywordtype">void</span> ImprovedClientToScreen ( <span class="keywordtype">int</span>* px, <span class="keywordtype">int</span>* py );
04745 
04746     wxPGId Insert ( wxPGProperty* priorthis, wxPGProperty* newproperty );
04747 
04748     <span class="keyword">inline</span> wxPGId Insert ( wxPGPropertyWithChildren* parent, <span class="keywordtype">int</span> index, wxPGProperty* newproperty )
04749     {
04750         <span class="keywordflow">return</span> m_pState-&gt;Insert(parent,index,newproperty);
04751     }
04752 
04754     <span class="keywordtype">void</span> RegainColours ();
04755 
04756     wxPGProperty* DoGetItemAtY ( <span class="keywordtype">int</span> y );
04757 
04758     <span class="keyword">inline</span> wxPGProperty* DoGetItemAtY_Full ( <span class="keywordtype">int</span> y )
04759     {
04760         wxASSERT ( y &gt;= 0 );
04761 
04762         <span class="keywordflow">if</span> ( (<span class="keywordtype">unsigned</span> <span class="keywordtype">int</span>)y &gt;= m_bottomy )
04763             <span class="keywordflow">return</span> NULL;
04764 
04765         <span class="keywordflow">return</span> m_pState-&gt;m_properties-&gt;GetItemAtY ( y, m_lineHeight );
04766     }
04767 
04768     <span class="keywordtype">void</span> DoPropertyChanged ( wxDC&amp; dc, wxPGProperty* p );
04769 
04770     <span class="keywordtype">void</span> DoSetPropertyPriority ( wxPGProperty* p, <span class="keywordtype">int</span> priority );
04771 
04772     wxPGProperty* GetLastItem ( <span class="keywordtype">bool</span> need_visible, <span class="keywordtype">bool</span> allow_subprops = TRUE );
04773 
04774     <span class="keywordtype">void</span> CalculateVisibles ( <span class="keywordtype">int</span> vy, <span class="keywordtype">bool</span> full_recalc );
04775 
04776     <span class="keywordtype">void</span> CalculateYs ( wxPGPropertyWithChildren* startparent,
04777         <span class="keywordtype">int</span> startindex );
04778 
04779     <span class="keywordtype">bool</span> Expand ( wxPGProperty* p );
04780 
04781     <span class="keywordtype">bool</span> Collapse ( wxPGProperty* p );
04782 
04783     <span class="comment">// Returns nearest paint visible property (such that will be painted unless</span>
04784     <span class="comment">// window is scrolled or resized). If given property is paint visible, then</span>
04785     <span class="comment">// it itself will be returned.</span>
04786     wxPGProperty* GetNearestPaintVisible ( wxPGProperty* p );
04787 
04788     <span class="keywordtype">void</span> NavigateOut ( <span class="keywordtype">int</span> dir ); <span class="comment">// this will then call wxWindow::Navigate</span>
04789 
04790     <span class="keyword">static</span> <span class="keywordtype">void</span> RegisterDefaultEditors();
04791 
04792     <span class="keyword">static</span> <span class="keywordtype">void</span> RegisterDefaultValues();
04793 
04794     <span class="comment">// Sets m_bgColIndex to this property and all its children.</span>
04795     <span class="keywordtype">void</span> SetColourIndex ( wxPGProperty* p, <span class="keywordtype">int</span> index );
04796 
04797     <span class="keywordtype">void</span> SetPropertyLabel ( wxPGProperty* p, <span class="keyword">const</span> wxString&amp; newproplabel );
04798 
04799     <span class="keywordtype">void</span> DoSetPropertyName ( wxPGProperty* p, <span class="keyword">const</span> wxString&amp; newname );
04800 
04801     <span class="keywordtype">void</span> SetPropertyValue ( wxPGId <span class="keywordtype">id</span>, <span class="keyword">const</span> wxPGValueType* typeclass, wxPGVariant value );
04802 
04803     <span class="keywordtype">void</span> SetPropertyValue ( wxPGId <span class="keywordtype">id</span>, <span class="keyword">const</span> wxChar* typestring, wxPGVariant value );
04804 
04805     <span class="comment">// Setups event handling for child control</span>
04806     <span class="keywordtype">void</span> SetupEventHandling ( wxPGCtrlClass* wnd, <span class="keywordtype">int</span> <span class="keywordtype">id</span> );
04807 
04808     <span class="comment">//void Sort ( bool recalcys );</span>
04809 
04810     <span class="comment">//void Sort ( wxPGProperty* p, bool recalcys );</span>
04811 
04812     <span class="keywordtype">void</span> CustSetCursor ( <span class="keywordtype">int</span> type );
04813 
04814     <span class="keywordtype">void</span> RecalculateVirtualSize();
04815 
04816     <span class="keywordtype">void</span> PGAdjustScrollbars ( <span class="keywordtype">int</span> y );
04817 
04819     <span class="keywordtype">void</span> DrawSplitterDragColumn ( wxDC&amp; dc, <span class="keywordtype">int</span> x );
04820 
04822     <span class="comment">//int GetNearestValidItem ( int index, int dir );</span>
04823     wxPGProperty* GetNeighbourItem ( wxPGProperty* item, <span class="keywordtype">bool</span> need_visible,
04824         <span class="keywordtype">int</span> dir ) <span class="keyword">const</span>;
04825 
04826     <span class="comment">//inline int PrepareToAddItem( wxPGProperty* property, wxPGPropertyWithChildren* category );</span>
04827 
04828     <span class="keywordtype">void</span> PrepareAfterItemsAdded();
04829 
04830 <span class="preprocessor">#endif // DOXYGEN_SHOULD_SKIP_THIS</span>
04831 <span class="preprocessor"></span>
04832 <span class="keyword">private</span>:
04833     DECLARE_EVENT_TABLE()
04834 };
04835 
04836 <span class="preprocessor">#undef wxPG_USE_STATE</span>
04837 <span class="preprocessor"></span>
04838 <span class="comment">// -----------------------------------------------------------------------</span>
04839 
04840 <span class="keyword">inline</span> <span class="keywordtype">bool</span> wxPropertyGridState::IsDisplayed()<span class="keyword"> const</span>
04841 <span class="keyword"></span>{
04842     <span class="keywordflow">return</span> ( <span class="keyword">this</span> == m_pPropGrid-&gt;GetState() );
04843 }
04844 
04845 <span class="comment">// -----------------------------------------------------------------------</span>
04846 
<a name="l04863"></a><a class="code" href="classwxPropertyGridEvent.htm">04863</a> <span class="keyword">class </span>WXDLLIMPEXP_PG wxPropertyGridEvent : <span class="keyword">public</span> wxCommandEvent
04864 {
04865 <span class="keyword">public</span>:
04866 
04868     wxPropertyGridEvent(wxEventType commandType=0, <span class="keywordtype">int</span> <span class="keywordtype">id</span>=0);
04869 <span class="preprocessor">#ifndef SWIG</span>
04870 <span class="preprocessor"></span>
04871     wxPropertyGridEvent(<span class="keyword">const</span> wxPropertyGridEvent&amp; event);
04872 <span class="preprocessor">#endif</span>
04873 <span class="preprocessor"></span>
04874     ~wxPropertyGridEvent();
04875 
04877     <span class="keyword">virtual</span> wxEvent* Clone() <span class="keyword">const</span>;
04878 
<a name="l04880"></a><a class="code" href="classwxPropertyGridEvent.htm#wxPropertyGridEventa2">04880</a>     <span class="keyword">inline</span> <span class="keywordtype">void</span> EnableProperty( <span class="keywordtype">bool</span> enable = TRUE )
04881     {
04882         m_pg-&gt;EnableProperty(wxPGIdGen(m_property),enable);
04883     }
04884 
<a name="l04886"></a><a class="code" href="classwxPropertyGridEvent.htm#wxPropertyGridEventa1">04886</a>     <span class="keyword">inline</span> <span class="keywordtype">void</span> DisableProperty()
04887     {
04888         m_pg-&gt;EnableProperty(wxPGIdGen(m_property),FALSE);
04889     }
04890 
<a name="l04892"></a><a class="code" href="classwxPropertyGridEvent.htm#wxPropertyGridEventa3">04892</a>     wxPGId GetProperty()<span class="keyword"> const</span>
04893 <span class="keyword">    </span>{
04894         <span class="keywordflow">return</span> wxPGIdGen(m_property);
04895     }
04896 
<a name="l04898"></a><a class="code" href="classwxPropertyGridEvent.htm#wxPropertyGridEventa6">04898</a>     wxPGProperty* GetPropertyPtr()<span class="keyword"> const</span>
04899 <span class="keyword">    </span>{
04900         <span class="keywordflow">return</span> m_property;
04901     }
04902 
<a name="l04904"></a><a class="code" href="classwxPropertyGridEvent.htm#wxPropertyGridEventa4">04904</a>     <span class="keyword">const</span> wxString&amp; GetPropertyLabel()<span class="keyword"> const</span>
04905 <span class="keyword">    </span>{
04906         wxASSERT ( m_property );
04907         <span class="keywordflow">return</span> m_property-&gt;GetLabel();
04908     }
04909 
<a name="l04911"></a><a class="code" href="classwxPropertyGridEvent.htm#wxPropertyGridEventa5">04911</a>     <span class="keyword">const</span> wxString&amp; GetPropertyName()<span class="keyword"> const</span>
04912 <span class="keyword">    </span>{
04913         wxASSERT ( m_property );
04914         <span class="keywordflow">return</span> m_property-&gt;GetName();
04915     }
04916 
04917 <span class="preprocessor">#if wxPG_USE_CLIENT_DATA</span>
04918 <span class="preprocessor"></span>
04919     <span class="keywordtype">void</span>* GetPropertyClientData()<span class="keyword"> const</span>
04920 <span class="keyword">    </span>{
04921         wxASSERT ( m_property );
04922         <span class="keywordflow">return</span> m_property-&gt;GetClientData();
04923     }
04924 <span class="preprocessor">#endif</span>
04925 <span class="preprocessor"></span>
<a name="l04927"></a><a class="code" href="classwxPropertyGridEvent.htm#wxPropertyGridEventa7">04927</a>     wxVariant GetPropertyValue()<span class="keyword"> const</span>
04928 <span class="keyword">    </span>{
04929         wxASSERT ( m_property );
04930         <span class="keywordflow">return</span> m_property-&gt;GetValueAsVariant();
04931     }
04932 
04933     <span class="keyword">inline</span> wxString GetPropertyValueAsString ()<span class="keyword"> const</span>
04934 <span class="keyword">    </span>{
04935         <span class="keywordflow">return</span> m_pg-&gt;GetPropertyValueAsString( wxPGIdGen(m_property) );
04936     }
04937     <span class="keyword">inline</span> <span class="keywordtype">long</span> GetPropertyValueAsLong ()<span class="keyword"> const</span>
04938 <span class="keyword">    </span>{
04939         <span class="keywordflow">return</span> m_pg-&gt;GetPropertyValueAsLong( wxPGIdGen(m_property) );
04940     }
04941     <span class="keyword">inline</span> <span class="keywordtype">int</span> GetPropertyValueAsInt () { <span class="keywordflow">return</span> (<span class="keywordtype">int</span>)GetPropertyValueAsLong(); }
04942     <span class="keyword">inline</span> <span class="keywordtype">long</span> GetPropertyValueAsBool ()<span class="keyword"> const</span>
04943 <span class="keyword">    </span>{
04944         <span class="keywordflow">return</span> m_pg-&gt;GetPropertyValueAsBool( wxPGIdGen(m_property) );
04945     }
04946     <span class="keyword">inline</span> <span class="keywordtype">double</span> GetPropertyValueAsDouble ()<span class="keyword"> const</span>
04947 <span class="keyword">    </span>{
04948         <span class="keywordflow">return</span> m_pg-&gt;GetPropertyValueAsDouble( wxPGIdGen(m_property) );
04949     }
04950     <span class="keyword">inline</span> <span class="keyword">const</span> wxArrayString&amp; GetPropertyValueAsArrayString ()<span class="keyword"> const</span>
04951 <span class="keyword">    </span>{
04952         <span class="keywordflow">return</span> m_pg-&gt;GetPropertyValueAsArrayString( wxPGIdGen(m_property) );
04953     }
04954     <span class="keyword">inline</span> <span class="keyword">const</span> wxObject* GetPropertyValueAsWxObjectPtr ()<span class="keyword"> const</span>
04955 <span class="keyword">    </span>{
04956         <span class="keywordflow">return</span> m_pg-&gt;GetPropertyValueAsWxObjectPtr( wxPGIdGen(m_property) );
04957     }
04958     <span class="keyword">inline</span> <span class="keywordtype">void</span>* GetPropertyValueAsVoidPtr ()<span class="keyword"> const</span>
04959 <span class="keyword">    </span>{
04960         <span class="keywordflow">return</span> m_pg-&gt;GetPropertyValueAsVoidPtr( wxPGIdGen(m_property) );
04961     }
04962     <span class="keyword">inline</span> <span class="keyword">const</span> wxPoint&amp; GetPropertyValueAsPoint ()<span class="keyword"> const</span>
04963 <span class="keyword">    </span>{
04964         <span class="keywordflow">return</span> m_pg-&gt;GetPropertyValueAsPoint( wxPGIdGen(m_property) );
04965     }
04966     <span class="keyword">inline</span> <span class="keyword">const</span> wxSize&amp; GetPropertyValueAsSize ()<span class="keyword"> const</span>
04967 <span class="keyword">    </span>{
04968         <span class="keywordflow">return</span> m_pg-&gt;GetPropertyValueAsSize( wxPGIdGen(m_property) );
04969     }
04970     <span class="keyword">inline</span> <span class="keyword">const</span> wxArrayInt&amp; GetPropertyValueAsArrayInt ()<span class="keyword"> const</span>
04971 <span class="keyword">    </span>{
04972         <span class="keywordflow">return</span> m_pg-&gt;GetPropertyValueAsArrayInt( wxPGIdGen(m_property) );
04973     }
04974 
<a name="l04976"></a><a class="code" href="classwxPropertyGridEvent.htm#wxPropertyGridEventa19">04976</a>     <span class="keyword">const</span> wxPGValueType* GetPropertyValueType()<span class="keyword"> const</span>
04977 <span class="keyword">    </span>{
04978         <span class="keywordflow">return</span> m_pg-&gt;GetPropertyValueType( wxPGIdGen(m_property) );
04979     }
04980 
<a name="l04982"></a><a class="code" href="classwxPropertyGridEvent.htm#wxPropertyGridEventa20">04982</a>     <span class="keyword">inline</span> <span class="keywordtype">bool</span> HasProperty()<span class="keyword"> const </span>{ <span class="keywordflow">return</span> ( m_property != (wxPGProperty*) NULL ); }
04983 
04984     <span class="keyword">inline</span> <span class="keywordtype">bool</span> IsPropertyEnabled()<span class="keyword"> const</span>
04985 <span class="keyword">    </span>{
04986         <span class="keywordflow">return</span> m_pg-&gt;IsPropertyEnabled(wxPGIdGen(m_property));
04987     }
04988 
<a name="l04990"></a><a class="code" href="classwxPropertyGridEvent.htm#wxPropertyGridEventa23">04990</a>     <span class="keywordtype">void</span> SetProperty ( wxPGId <span class="keywordtype">id</span> ) { m_property = wxPGIdToPtr(<span class="keywordtype">id</span>); }
04991 
<a name="l04993"></a><a class="code" href="classwxPropertyGridEvent.htm#wxPropertyGridEventa22">04993</a>     <span class="keywordtype">void</span> SetProperty ( wxPGProperty* p ) { m_property = p; }
04994 
04995     <span class="keywordtype">void</span> SetPropertyGrid ( wxPropertyGrid* pg ) { m_pg = pg; }
04996 
04997 <span class="preprocessor">#ifndef SWIG</span>
04998 <span class="preprocessor"></span><span class="keyword">private</span>:
04999     DECLARE_DYNAMIC_CLASS(wxPropertyGridEvent)
05000 
05001     wxPGProperty*       m_property;
05002     wxPropertyGrid*     m_pg;
05003 <span class="preprocessor">#endif</span>
05004 <span class="preprocessor"></span>};
05005 
05006 <span class="preprocessor">#ifndef SWIG</span>
05007 <span class="preprocessor"></span>BEGIN_DECLARE_EVENT_TYPES()
05008     DECLARE_EXPORTED_EVENT_TYPE(WXDLLIMPEXP_PG, wxEVT_PG_SELECTED,           1775)
05009     DECLARE_EXPORTED_EVENT_TYPE(WXDLLIMPEXP_PG, wxEVT_PG_CHANGED,            1776)
05010     DECLARE_EXPORTED_EVENT_TYPE(WXDLLIMPEXP_PG, wxEVT_PG_HIGHLIGHTED,        1777)
05011     DECLARE_EXPORTED_EVENT_TYPE(WXDLLIMPEXP_PG, wxEVT_PG_RIGHT_CLICK,        1778)
05012     DECLARE_EXPORTED_EVENT_TYPE(WXDLLIMPEXP_PG, wxEVT_PG_PAGE_CHANGED,       1779)
05013     
05014 END_DECLARE_EVENT_TYPES()
05015 #<span class="keywordflow">else</span>
05016     <span class="keyword">enum</span> {
05017         wxEVT_PG_SELECTED = 1775,
05018         wxEVT_PG_CHANGED,
05019         wxEVT_PG_HIGHLIGHTED,
05020         wxEVT_PG_RIGHT_CLICK,
05021         wxEVT_PG_PAGE_CHANGED,
05022     };
05023 <span class="preprocessor">#endif</span>
05024 <span class="preprocessor"></span>
05025 
05026 <span class="preprocessor">#ifndef SWIG</span>
05027 <span class="preprocessor"></span><span class="keyword">typedef</span> void (wxEvtHandler::*wxPropertyGridEventFunction)(wxPropertyGridEvent&amp;);
05028 
05029 <span class="preprocessor">#define EVT_PG_SELECTED(id, fn)              DECLARE_EVENT_TABLE_ENTRY( wxEVT_PG_SELECTED, id, -1, (wxObjectEventFunction) (wxEventFunction)  wxStaticCastEvent( wxPropertyGridEventFunction, &amp; fn ), (wxObject *) NULL ),</span>
05030 <span class="preprocessor"></span><span class="preprocessor">#define EVT_PG_CHANGED(id, fn)               DECLARE_EVENT_TABLE_ENTRY( wxEVT_PG_CHANGED, id, -1, (wxObjectEventFunction) (wxEventFunction)  wxStaticCastEvent( wxPropertyGridEventFunction, &amp; fn ), (wxObject *) NULL ),</span>
05031 <span class="preprocessor"></span><span class="preprocessor">#define EVT_PG_HIGHLIGHTED(id, fn)           DECLARE_EVENT_TABLE_ENTRY( wxEVT_PG_HIGHLIGHTED, id, -1, (wxObjectEventFunction) (wxEventFunction)  wxStaticCastEvent( wxPropertyGridEventFunction, &amp; fn ), (wxObject *) NULL ),</span>
05032 <span class="preprocessor"></span><span class="preprocessor">#define EVT_PG_RIGHT_CLICK(id, fn)           DECLARE_EVENT_TABLE_ENTRY( wxEVT_PG_RIGHT_CLICK, id, -1, (wxObjectEventFunction) (wxEventFunction)  wxStaticCastEvent( wxPropertyGridEventFunction, &amp; fn ), (wxObject *) NULL ),</span>
05033 <span class="preprocessor"></span><span class="preprocessor">#define EVT_PG_PAGE_CHANGED(id, fn)          DECLARE_EVENT_TABLE_ENTRY( wxEVT_PG_PAGE_CHANGED, id, -1, (wxObjectEventFunction) (wxEventFunction)  wxStaticCastEvent( wxPropertyGridEventFunction, &amp; fn ), (wxObject *) NULL ),</span>
05034 <span class="preprocessor"></span>
05035 <span class="preprocessor">#endif</span>
05036 <span class="preprocessor"></span>
05037 
05038 <span class="comment">// -----------------------------------------------------------------------</span>
05039 
05040 
<a name="l05045"></a><a class="code" href="classwxPropertyGridPopulator.htm">05045</a> <span class="keyword">class </span>WXDLLIMPEXP_PG wxPropertyGridPopulator
05046 {
05047 <span class="keyword">public</span>:
<a name="l05054"></a><a class="code" href="classwxPropertyGridPopulator.htm#wxPropertyGridPopulatora8">05054</a>     <span class="keyword">inline</span> wxPropertyGridPopulator(wxPropertyGrid* pg = (wxPropertyGrid*) NULL,
05055                                    wxPGId popRoot = wxPGId())
05056     {
05057         Init(pg, popRoot);
05058     }
05059 
05061     ~wxPropertyGridPopulator();
05062 
05068     <span class="keywordtype">void</span> AddChoices(size_t choicesId,
05069                     <span class="keyword">const</span> wxArrayString&amp; choiceLabels,
05070                     <span class="keyword">const</span> wxArrayInt&amp; choiceValues = *((<span class="keyword">const</span> wxArrayInt*)NULL));
05071 
05100     wxPGId AppendByClass(<span class="keyword">const</span> wxString&amp; classname,
05101                          <span class="keyword">const</span> wxString&amp; label,
05102                          <span class="keyword">const</span> wxString&amp; name = wxPG_LABEL,
05103                          <span class="keyword">const</span> wxString&amp; value = wxEmptyString,
05104                          <span class="keyword">const</span> wxString&amp; attributes = wxEmptyString,
05105                          size_t choicesId = 0,
05106                          <span class="keyword">const</span> wxArrayString&amp; choiceLabels = *((<span class="keyword">const</span> wxArrayString*)NULL),
05107                          <span class="keyword">const</span> wxArrayInt&amp; choiceValues = *((<span class="keyword">const</span> wxArrayInt*)NULL));
05108 
05117     wxPGId AppendByType(<span class="keyword">const</span> wxString&amp; valuetype,
05118                         <span class="keyword">const</span> wxString&amp; label,
05119                         <span class="keyword">const</span> wxString&amp; name = wxPG_LABEL,
05120                         <span class="keyword">const</span> wxString&amp; value = wxEmptyString,
05121                         <span class="keyword">const</span> wxString&amp; attributes = wxEmptyString,
05122                         size_t choicesId = 0,
05123                         <span class="keyword">const</span> wxArrayString&amp; choiceLabels = *((<span class="keyword">const</span> wxArrayString*)NULL),
05124                         <span class="keyword">const</span> wxArrayInt&amp; choiceValues = *((<span class="keyword">const</span> wxArrayInt*)NULL));
05125 
<a name="l05127"></a><a class="code" href="classwxPropertyGridPopulator.htm#wxPropertyGridPopulatora5">05127</a>     <span class="keyword">inline</span> wxPGId GetCurrentParent()<span class="keyword"> const</span>
05128 <span class="keyword">    </span>{
05129         <span class="keywordflow">return</span> m_curParent;
05130     }
05131 
05133     <span class="keywordtype">bool</span> HasChoices( size_t <span class="keywordtype">id</span> ) <span class="keyword">const</span>;
05134 
<a name="l05136"></a><a class="code" href="classwxPropertyGridPopulator.htm#wxPropertyGridPopulatora7">05136</a>     <span class="keyword">inline</span> <span class="keywordtype">void</span> SetGrid( wxPropertyGrid* pg )
05137     {
05138         m_propGrid = pg;
05139     }
05140 
05142     <span class="keywordtype">bool</span> BeginChildren();
05143 
<a name="l05145"></a><a class="code" href="classwxPropertyGridPopulator.htm#wxPropertyGridPopulatora4">05145</a>     <span class="keyword">inline</span> <span class="keywordtype">void</span> EndChildren()
05146     {
05147         wxASSERT( m_curParent.IsOk() );
05148         m_curParent = wxPGIdGen(wxPGIdToPtr(m_curParent)-&gt;GetParent());
05149         m_lastProperty = wxPGId((wxPGProperty*)NULL);
05150     }
05151 
05152 <span class="keyword">protected</span>:
05153 
05154     wxPGId DoAppend(wxPGProperty* p,
05155                     <span class="keyword">const</span> wxString&amp; value,
05156                     <span class="keyword">const</span> wxString&amp; attributes,
05157                     size_t choicesId,
05158                     <span class="keyword">const</span> wxArrayString&amp; choiceLabels,
05159                     <span class="keyword">const</span> wxArrayInt&amp; choiceValues);
05160 
05161     <span class="keywordtype">void</span> Init( wxPropertyGrid* pg, wxPGId popRoot );
05162 
<a name="l05164"></a><a class="code" href="classwxPropertyGridPopulator.htm#wxPropertyGridPopulatorp4">05164</a>     wxPropertyGrid* m_propGrid;
05165 
<a name="l05167"></a><a class="code" href="classwxPropertyGridPopulator.htm#wxPropertyGridPopulatorp3">05167</a>     wxPGId          m_popRoot;
05168 
<a name="l05170"></a><a class="code" href="classwxPropertyGridPopulator.htm#wxPropertyGridPopulatorp0">05170</a>     wxPGId          m_curParent;
05171 
<a name="l05173"></a><a class="code" href="classwxPropertyGridPopulator.htm#wxPropertyGridPopulatorp2">05173</a>     wxPGId          m_lastProperty;
05174 
<a name="l05176"></a><a class="code" href="classwxPropertyGridPopulator.htm#wxPropertyGridPopulatorp1">05176</a>     wxPGHashMapI2I  m_dictIdChoices;
05177 };
05178 
05179 <span class="comment">// -----------------------------------------------------------------------</span>
05180 
05181 <span class="comment">//</span>
05182 <span class="comment">// Undefine macros that are not needed outside propertygrid sources</span>
05183 <span class="comment">//</span>
05184 <span class="preprocessor">#ifndef __wxPG_SOURCE_FILE__</span>
05185 <span class="preprocessor"></span><span class="preprocessor"># undef wxPG_FL_DESC_REFRESH_REQUIRED</span>
05186 <span class="preprocessor"></span><span class="preprocessor"># undef wxPG_FL_SCROLLBAR_DETECTED</span>
05187 <span class="preprocessor"></span><span class="preprocessor"># undef wxPG_FL_CREATEDSTATE</span>
05188 <span class="preprocessor"></span><span class="preprocessor"># undef wxPG_FL_NOSTATUSBARHELP</span>
05189 <span class="preprocessor"></span><span class="preprocessor"># undef wxPG_FL_SCROLLED</span>
05190 <span class="preprocessor"></span><span class="preprocessor"># undef wxPG_FL_HIDE_STATE</span>
05191 <span class="preprocessor"></span><span class="preprocessor"># undef wxPG_FL_FOCUS_INSIDE_CHILD</span>
05192 <span class="preprocessor"></span><span class="preprocessor"># undef wxPG_FL_FOCUS_INSIDE</span>
05193 <span class="preprocessor"></span><span class="preprocessor"># undef wxPG_FL_MOUSE_INSIDE_CHILD</span>
05194 <span class="preprocessor"></span><span class="preprocessor"># undef wxPG_FL_CUR_USES_CUSTOM_IMAGE</span>
05195 <span class="preprocessor"></span><span class="preprocessor"># undef wxPG_FL_PRIMARY_FILLS_ENTIRE</span>
05196 <span class="preprocessor"></span><span class="preprocessor"># undef wxPG_FL_VALUE_MODIFIED</span>
05197 <span class="preprocessor"></span><span class="preprocessor"># undef wxPG_FL_MOUSE_INSIDE</span>
05198 <span class="preprocessor"></span><span class="preprocessor"># undef wxPG_FL_FOCUSED</span>
05199 <span class="preprocessor"></span><span class="preprocessor"># undef wxPG_FL_MOUSE_CAPTURED</span>
05200 <span class="preprocessor"></span><span class="preprocessor"># undef wxPG_FL_INITIALIZED</span>
05201 <span class="preprocessor"></span><span class="preprocessor"># undef wxPG_FL_ACTIVATION_BY_CLICK</span>
05202 <span class="preprocessor"></span><span class="preprocessor"># undef wxPG_FL_DONT_CENTER_SPLITTER</span>
05203 <span class="preprocessor"></span><span class="preprocessor"># undef wxPG_SUPPORT_TOOLTIPS</span>
05204 <span class="preprocessor"></span><span class="preprocessor"># undef wxPG_USE_CUSTOM_CONTROLS</span>
05205 <span class="preprocessor"></span><span class="preprocessor"># undef wxPG_DOUBLE_BUFFER</span>
05206 <span class="preprocessor"></span><span class="preprocessor"># undef wxPG_HEAVY_GFX</span>
05207 <span class="preprocessor"></span><span class="preprocessor"># undef wxPG_ICON_WIDTH</span>
05208 <span class="preprocessor"></span><span class="preprocessor"># undef wxPG_USE_RENDERER_NATIVE</span>
05209 <span class="preprocessor"></span><span class="comment">// Following are needed by the manager headers</span>
05210 <span class="comment">//# undef wxPGIdGen</span>
05211 <span class="comment">//# undef wxPGNameStr</span>
05212 <span class="comment">//# undef wxPGIdToPtr</span>
05213 <span class="preprocessor">#endif</span>
05214 <span class="preprocessor"></span>
05215 <span class="comment">// Doxygen special</span>
05216 <span class="preprocessor">#if !defined(_WX_WINDOW_H_BASE_) &amp;&amp; !defined(SWIG)</span>
05217 <span class="preprocessor"></span><span class="preprocessor"># include "manager.h"</span>
05218 <span class="preprocessor">#endif</span>
05219 <span class="preprocessor"></span>
05220 <span class="comment">// -----------------------------------------------------------------------</span>
05221 
05222 <span class="preprocessor">#endif // __WX_PROPGRID_H__</span>
</pre></div><hr size="1"><address style="align: right;"><small>Generated on Tue May 3 19:33:41 2005 for wxPropertyGrid by
<a href="http://www.doxygen.org/index.html">
<img src="doxygen.png" alt="doxygen" align="middle" border=0 > 
</a>1.3.6 </small></address>
</body>
</html>
