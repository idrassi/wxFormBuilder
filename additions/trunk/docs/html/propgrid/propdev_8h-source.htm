<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN">
<html><head><meta http-equiv="Content-Type" content="text/html;charset=iso-8859-1">
<title>wxPropertyGrid: propdev.h Source File</title>
<link href="doxygen.css" rel="stylesheet" type="text/css">
</head><body>
<!-- Generated by Doxygen 1.3.6 -->
<div class="qindex"><a class="qindex" href="index.htm">Main&nbsp;Page</a> | <a class="qindex" href="modules.htm">Modules</a> | <a class="qindex" href="hierarchy.htm">Class&nbsp;Hierarchy</a> | <a class="qindex" href="annotated.htm">Class&nbsp;List</a> | <a class="qindex" href="files.htm">File&nbsp;List</a> | <a class="qindex" href="functions.htm">Class&nbsp;Members</a></div>
<h1>propdev.h</h1><div class="fragment"><pre>00001 
00002 <span class="comment">// Name:        propdev.h</span>
00003 <span class="comment">// Purpose:     wxPropertyGrid Internal/Property Developer Header</span>
00004 <span class="comment">// Author:      Jaakko Salli</span>
00005 <span class="comment">// Modified by:</span>
00006 <span class="comment">// Created:     Nov-23-2004</span>
00007 <span class="comment">// RCS-ID:      $Id:</span>
00008 <span class="comment">// Copyright:   (c) Jaakko Salli</span>
00009 <span class="comment">// Licence:     wxWindows license</span>
00011 <span class="comment"></span>
00012 <span class="preprocessor">#ifndef _WX_PROPGRID_PROPDEV_H_</span>
00013 <span class="preprocessor"></span><span class="preprocessor">#define _WX_PROPGRID_PROPDEV_H_</span>
00014 <span class="preprocessor"></span>
00015 <span class="comment">// -----------------------------------------------------------------------</span>
00016 
00017 <span class="preprocessor">#ifdef _WX_PROPGRID_ADVPROPS_H_</span>
00018 <span class="preprocessor"></span><span class="preprocessor"># error "propdev.h must be included *before* advprops.h"</span>
00019 <span class="preprocessor"></span><span class="preprocessor">#endif</span>
00020 <span class="preprocessor"></span>
00021 <span class="comment">//#if wxPG_USE_CUSTOM_CONTROLS</span>
00022 <span class="comment">//# include "wx/propertygrid/custctrl.h"</span>
00023 <span class="comment">//#endif</span>
00024 
00025 <span class="comment">// -----------------------------------------------------------------------</span>
00026 
00027 <span class="comment">// These are intuitive substitutes for base property classes.</span>
00028 <span class="keyword">typedef</span> <a class="code" href="classwxPGProperty.htm">wxPGProperty</a>                <a class="code" href="classwxPGProperty.htm">wxBasePropertyClass</a>;
00029 <span class="keyword">typedef</span> <a class="code" href="classwxPGPropertyWithChildren.htm">wxPGPropertyWithChildren</a>    <a class="code" href="classwxPGPropertyWithChildren.htm">wxBaseParentPropertyClass</a>;
00030 
00031 <span class="comment">// -----------------------------------------------------------------------</span>
00032 
00033 <span class="comment">// wxWidgets &lt; 2.5.4 compatibility.</span>
00034 <span class="comment">// TODO: After officially included in library, remove this section.</span>
00035 <span class="preprocessor">#if wxMINOR_VERSION &lt; 5 || ( wxMINOR_VERSION == 5 &amp;&amp; wxRELEASE_NUMBER &lt; 3 )</span>
00036 <span class="preprocessor"></span><span class="preprocessor"># if wxUSE_UNICODE</span>
00037 <span class="preprocessor"></span><span class="preprocessor">    #include &lt;string.h&gt;</span> <span class="comment">//for mem funcs</span>
00038 
00039     <span class="keyword">inline</span> wxChar* wxTmemcpy(wxChar* szOut, <span class="keyword">const</span> wxChar* szIn, size_t len)
00040     {
00041         <span class="keywordflow">return</span> (wxChar*) memcpy(szOut, szIn, len * <span class="keyword">sizeof</span>(wxChar));
00042     }
00043 <span class="preprocessor"># else</span>
00044 <span class="preprocessor"></span><span class="preprocessor">    #define wxTmemcpy memcpy</span>
00045 <span class="preprocessor"></span><span class="preprocessor"># endif</span>
00046 <span class="preprocessor"></span><span class="preprocessor"># ifndef wxFIXED_MINSIZE</span>
00047 <span class="preprocessor"></span><span class="preprocessor">#  define wxFIXED_MINSIZE    0</span>
00048 <span class="preprocessor"></span><span class="preprocessor"># endif</span>
00049 <span class="preprocessor"></span><span class="preprocessor">#elif ( wxMINOR_VERSION == 5 &amp;&amp; wxRELEASE_NUMBER &lt; 4 )</span>
00050 <span class="preprocessor"></span><span class="preprocessor">    #define wxTmemcpy wxMemcpy</span>
00051 <span class="preprocessor"></span><span class="preprocessor">#endif</span>
00052 <span class="preprocessor"></span>
00053 <span class="comment">// -----------------------------------------------------------------------</span>
00054 
00055 
00056 <span class="comment">// This is required for sharing common global variables.</span>
00057 <span class="comment">// TODO: Automatic locking mechanism?</span>
00058 <span class="keyword">class </span>WXDLLIMPEXP_PG wxPGGlobalVarsClass
00059 {
00060 <span class="keyword">public</span>:
00061 
00062     wxPGGlobalVarsClass();
00063     ~wxPGGlobalVarsClass();
00064 
00065     wxString            m_pDefaultImageWildcard; <span class="comment">// Used by advprops, but here to make things easier.</span>
00066 
00067     wxArrayPtrVoid      m_arrEditorClasses; <span class="comment">// List of editor class instances.</span>
00068 
00069     wxPGHashMapS2P      m_dictValueType; <span class="comment">// Valuename -&gt; Value type object instance.</span>
00070 
00071     wxPGHashMapS2P      m_dictPropertyClassInfo; <span class="comment">// PropertyName -&gt; ClassInfo</span>
00072 
00073     <span class="comment">// void* so we don't have to declare class in headers</span>
00074     <span class="keywordtype">void</span>*               m_dictChoices;
00075 
00076     <a class="code" href="classwxPGChoices.htm">wxPGChoices</a>*        m_fontFamilyChoices;
00077 
00078 <span class="preprocessor">#if wxUSE_VALIDATORS</span>
00079 <span class="preprocessor"></span>    wxValidator*        m_filenameValidator;
00080 <span class="preprocessor">#endif</span>
00081 <span class="preprocessor"></span>
00082     wxString            m_boolChoices[2]; <span class="comment">// default is ["False", "True"]</span>
00083 
00084     <a class="code" href="classwxPGChoices.htm">wxPGChoices</a>         m_emptyChoices;
00085 
00086     <span class="keywordtype">bool</span>                m_autoGetTranslation; <span class="comment">// If true then some things are automatically translated</span>
00087 
00088     <span class="keywordtype">int</span>                 m_offline; <span class="comment">// &gt; 0 if errors cannot or should not be shown in statusbar etc.</span>
00089 
00090 <span class="comment">/*#if wxUSE_THREADS</span>
00091 <span class="comment">    wxCriticalSection   m_critSect; // To allow different property grids to be addressed from different threads</span>
00092 <span class="comment">#endif*/</span>
00093 };
00094 
00095 <span class="keyword">extern</span> WXDLLIMPEXP_PG wxPGGlobalVarsClass* wxPGGlobalVars;
00096 
00097 <span class="preprocessor">#define wxPGUnRefChoices(PCHOICES) \</span>
00098 <span class="preprocessor">    wxPGChoices::UnRef(PCHOICES)</span>
00099 <span class="preprocessor"></span>
00100 <span class="comment">// TODO: This locks on Linux, fix it!</span>
00101 <span class="comment">/*#if wxUSE_THREADS</span>
00102 <span class="comment">    #define WX_PG_GLOBALS_LOCKER() \</span>
00103 <span class="comment">        wxCriticalSectionLocker _globalVarsLocker_(wxPGGlobalVars-&gt;m_critSect);</span>
00104 <span class="comment">#else*/</span>
00105 <span class="preprocessor">    #define WX_PG_GLOBALS_LOCKER()</span>
00106 <span class="preprocessor"></span><span class="comment">//#endif</span>
00107 
00108 <span class="comment">// -----------------------------------------------------------------------</span>
00109 <span class="comment">// wxPGEditor class.</span>
00110 
<a name="l00116"></a><a class="code" href="classwxPGEditor.htm">00116</a> <span class="keyword">class </span>WXDLLIMPEXP_PG wxPGEditor
00117 {
00118 <span class="keyword">public</span>:
00119 
00121     <span class="keyword">virtual</span> ~wxPGEditor() = 0;
00122 
00124     <span class="keyword">virtual</span> wxPGCtrlClass* CreateControls ( <a class="code" href="classwxPropertyGrid.htm">wxPropertyGrid</a>* propgrid, <a class="code" href="classwxPGProperty.htm">wxPGProperty</a>* property,
00125         <span class="keyword">const</span> wxPoint&amp; pos, <span class="keyword">const</span> wxSize&amp; sz, wxPGCtrlClass** psecondary ) <span class="keyword">const</span> = 0;
00126 
00128     <span class="keyword">virtual</span> <span class="keywordtype">void</span> UpdateControl ( <a class="code" href="classwxPGProperty.htm">wxPGProperty</a>* property, wxPGCtrlClass* ctrl ) <span class="keyword">const</span> = 0;
00129 
00135     <span class="keyword">virtual</span> <span class="keywordtype">void</span> DrawValue ( wxDC&amp; dc, <a class="code" href="classwxPGProperty.htm">wxPGProperty</a>* property, <span class="keyword">const</span> wxRect&amp; rect ) <span class="keyword">const</span>;
00136 
00140     <span class="keyword">virtual</span> <span class="keywordtype">bool</span> OnEvent ( <a class="code" href="classwxPropertyGrid.htm">wxPropertyGrid</a>* propgrid, <a class="code" href="classwxPGProperty.htm">wxPGProperty</a>* property,
00141         wxPGCtrlClass* wnd_primary, wxEvent&amp; event ) <span class="keyword">const</span> = 0;
00142 
00146     <span class="keyword">virtual</span> <span class="keywordtype">bool</span> CopyValueFromControl ( <a class="code" href="classwxPGProperty.htm">wxPGProperty</a>* property, wxPGCtrlClass* ctrl ) <span class="keyword">const</span> = 0;
00147 
00149     <span class="keyword">virtual</span> <span class="keywordtype">void</span> SetValueToUnspecified ( wxPGCtrlClass* ctrl ) <span class="keyword">const</span> = 0;
00150 
00152     <span class="keyword">virtual</span> <span class="keywordtype">void</span> SetControlStringValue ( wxPGCtrlClass* ctrl, <span class="keyword">const</span> wxString&amp; txt ) <span class="keyword">const</span>;
00153 
00155     <span class="keyword">virtual</span> <span class="keywordtype">void</span> SetControlIntValue ( wxPGCtrlClass* ctrl, <span class="keywordtype">int</span> value ) <span class="keyword">const</span>;
00156 
00160     <span class="keyword">virtual</span> <span class="keywordtype">int</span> AppendItem ( wxPGCtrlClass* ctrl, <span class="keyword">const</span> wxString&amp; label ) <span class="keyword">const</span>;
00161 
00165     <span class="keyword">virtual</span> <span class="keywordtype">bool</span> CanContainCustomImage () <span class="keyword">const</span>;
00166 
00167 <span class="keyword">protected</span>:
00168 };
00169 
00170 <span class="preprocessor">#define WX_PG_IMPLEMENT_EDITOR_CLASS_CONSTFUNC(EDITOR,CLASSNAME,PARENTCLASS) \</span>
00171 <span class="preprocessor">wxPGEditor* wxPGEditor_##EDITOR = (wxPGEditor*) NULL; \</span>
00172 <span class="preprocessor">wxPGEditor* wxPGConstruct##EDITOR##EditorClass() \</span>
00173 <span class="preprocessor">{ \</span>
00174 <span class="preprocessor">    wxASSERT ( !wxPGEditor_##EDITOR ); \</span>
00175 <span class="preprocessor">    return new CLASSNAME(); \</span>
00176 <span class="preprocessor">}</span>
00177 <span class="preprocessor"></span>
00178 <span class="preprocessor">#define WX_PG_IMPLEMENT_EDITOR_CLASS_STD_METHODS() \</span>
00179 <span class="preprocessor">virtual wxPGCtrlClass* CreateControls ( wxPropertyGrid* propgrid, wxPGProperty* property, \</span>
00180 <span class="preprocessor">    const wxPoint&amp; pos, const wxSize&amp; sz, wxPGCtrlClass** psecondary ) const; \</span>
00181 <span class="preprocessor">virtual void UpdateControl ( wxPGProperty* property, wxPGCtrlClass* ctrl ) const; \</span>
00182 <span class="preprocessor">virtual bool OnEvent ( wxPropertyGrid* propgrid, wxPGProperty* property, \</span>
00183 <span class="preprocessor">    wxPGCtrlClass* primary, wxEvent&amp; event ) const; \</span>
00184 <span class="preprocessor">virtual bool CopyValueFromControl ( wxPGProperty* property, wxPGCtrlClass* ctrl ) const; \</span>
00185 <span class="preprocessor">virtual void SetValueToUnspecified ( wxPGCtrlClass* ctrl ) const;</span>
00186 <span class="preprocessor"></span>
00187 <span class="preprocessor">#define WX_PG_IMPLEMENT_EDITOR_CLASS(EDITOR,CLASSNAME,PARENTCLASS) \</span>
00188 <span class="preprocessor">class CLASSNAME; \</span>
00189 <span class="preprocessor">class CLASSNAME : public PARENTCLASS \</span>
00190 <span class="preprocessor">{ \</span>
00191 <span class="preprocessor">public: \</span>
00192 <span class="preprocessor">    virtual ~CLASSNAME(); \</span>
00193 <span class="preprocessor">    WX_PG_IMPLEMENT_EDITOR_CLASS_STD_METHODS() \</span>
00194 <span class="preprocessor">}; \</span>
00195 <span class="preprocessor">WX_PG_IMPLEMENT_EDITOR_CLASS_CONSTFUNC(EDITOR,CLASSNAME,PARENTCLASS)</span>
00196 <span class="preprocessor"></span>
00197 
00198 <span class="comment">// There are various potential customizations for the standard wxPGTextCtrlEditor,</span>
00199 <span class="comment">// so unlike others it is made available here.</span>
00200 <span class="keyword">class </span>wxPGTextCtrlEditor : <span class="keyword">public</span> wxPGEditor
00201 {
00202 <span class="keyword">public</span>:
00203     <span class="keyword">virtual</span> ~wxPGTextCtrlEditor();
00204 
00205     WX_PG_IMPLEMENT_EDITOR_CLASS_STD_METHODS()
00206 
00207     <span class="keyword">virtual</span> <span class="keywordtype">void</span> <a class="code" href="classwxPGEditor.htm#wxPGEditora4">DrawValue</a> ( wxDC&amp; dc, <a class="code" href="classwxPGProperty.htm">wxPGProperty</a>* property, <span class="keyword">const</span> wxRect&amp; rect ) <span class="keyword">const</span>;
00208     <span class="keyword">virtual</span> <span class="keywordtype">void</span> <a class="code" href="classwxPGEditor.htm#wxPGEditora7">SetControlStringValue</a> ( wxPGCtrlClass* ctrl, <span class="keyword">const</span> wxString&amp; txt ) <span class="keyword">const</span>;
00209 };
00210 
00211 
00212 <span class="comment">// -----------------------------------------------------------------------</span>
00213 <span class="comment">// Variant setter macros.</span>
00214 <span class="comment">// TODO: When sure this is feature is out, remove these.</span>
00215 
00216 <span class="preprocessor">#if wxPG_EMBED_VARIANT</span>
00217 <span class="preprocessor"></span><span class="preprocessor"># define wxPG_SetVariantValue(VALUE) \</span>
00218 <span class="preprocessor">    ((wxVariant&amp;)*this) = VALUE</span>
00219 <span class="preprocessor"></span><span class="preprocessor"># define wxPG_SetVariantWxObjectValue() \</span>
00220 <span class="preprocessor">    ((wxVariant&amp;)*this) = wxVariant((wxObject*)DoGetValue().GetRawPtr(),m_name);</span>
00221 <span class="preprocessor"></span><span class="preprocessor"># define wxPG_SetVariantValueVoidPtr() \</span>
00222 <span class="preprocessor">    ((wxVariant&amp;)*this) = wxPGVariantToVoidPtr(DoGetValue())</span>
00223 <span class="preprocessor"></span><span class="preprocessor">#else</span>
00224 <span class="preprocessor"></span><span class="preprocessor"># define wxPG_SetVariantValue(VALUE)            { }</span>
00225 <span class="preprocessor"></span><span class="preprocessor"># define wxPG_SetVariantWxObjectValue()         { }</span>
00226 <span class="preprocessor"></span><span class="preprocessor"># define wxPG_SetVariantValueVoidPtr()          { }</span>
00227 <span class="preprocessor"></span><span class="preprocessor">#endif</span>
00228 <span class="preprocessor"></span>
00229 <span class="comment">// -----------------------------------------------------------------------</span>
00230 <span class="comment">// Value type registeration macros</span>
00231 
00232 <span class="preprocessor">#define wxPGRegisterValueType(TYPENAME) \</span>
00233 <span class="preprocessor">    if ( wxPGValueType_##TYPENAME == (wxPGValueType*) NULL ) \</span>
00234 <span class="preprocessor">    { \</span>
00235 <span class="preprocessor">        wxPGValueType_##TYPENAME = wxPropertyGrid::RegisterValueType( new wxPGValueType##TYPENAME##Class ); \</span>
00236 <span class="preprocessor">    }</span>
00237 <span class="preprocessor"></span>
00238 <span class="comment">// Use this in RegisterDefaultValues.</span>
00239 <span class="preprocessor">#define wxPGRegisterDefaultValueType(TYPENAME) \</span>
00240 <span class="preprocessor">    if ( wxPGValueType_##TYPENAME == (wxPGValueType*) NULL ) \</span>
00241 <span class="preprocessor">    { \</span>
00242 <span class="preprocessor">        wxPGValueType_##TYPENAME = wxPropertyGrid::RegisterValueType( new wxPGValueType##TYPENAME##Class, TRUE ); \</span>
00243 <span class="preprocessor">    }</span>
00244 <span class="preprocessor"></span>
00245 <span class="preprocessor">#define wxPG_INIT_REQUIRED_TYPE(T) \</span>
00246 <span class="preprocessor">    wxPGRegisterValueType(T)</span>
00247 <span class="preprocessor"></span>
00248 <span class="comment">// -----------------------------------------------------------------------</span>
00249 <span class="comment">// Editor class registeration macros</span>
00250 
00251 <span class="preprocessor">#define wxPGRegisterEditorClass(EDITOR) \</span>
00252 <span class="preprocessor">    if ( wxPGEditor_##EDITOR == (wxPGEditor*) NULL ) \</span>
00253 <span class="preprocessor">    { \</span>
00254 <span class="preprocessor">        wxPGEditor_##EDITOR = wxPropertyGrid::RegisterEditorClass( wxPGConstruct##EDITOR##EditorClass() ); \</span>
00255 <span class="preprocessor">    }</span>
00256 <span class="preprocessor"></span>
00257 <span class="comment">// Use this in RegisterDefaultEditors.</span>
00258 <span class="preprocessor">#define wxPGRegisterDefaultEditorClass(EDITOR) \</span>
00259 <span class="preprocessor">if ( wxPGEditor_##EDITOR == (wxPGEditor*) NULL ) \</span>
00260 <span class="preprocessor">    { \</span>
00261 <span class="preprocessor">        wxPGEditor_##EDITOR = wxPropertyGrid::RegisterEditorClass( wxPGConstruct##EDITOR##EditorClass(), TRUE ); \</span>
00262 <span class="preprocessor">    }</span>
00263 <span class="preprocessor"></span>
00264 <span class="preprocessor">#define wxPG_INIT_REQUIRED_EDITOR(T) \</span>
00265 <span class="preprocessor">    wxPGRegisterEditorClass(T)</span>
00266 <span class="preprocessor"></span>
00267 <span class="comment">// -----------------------------------------------------------------------</span>
00268 
00269 <span class="preprocessor">#define WX_PG_IMPLEMENT_SUBTYPE(VALUETYPE,CVALUETYPE,DEFPROPERTY,TYPESTRING,GETTER,DEFVAL) \</span>
00270 <span class="preprocessor">const wxPGValueType *wxPGValueType_##VALUETYPE = (wxPGValueType*) NULL; \</span>
00271 <span class="preprocessor">class wxPGValueType##VALUETYPE##Class : public wxPGValueType \</span>
00272 <span class="preprocessor">{ \</span>
00273 <span class="preprocessor">public: \</span>
00274 <span class="preprocessor">    virtual const wxChar* GetTypeName() const { return TYPESTRING; } \</span>
00275 <span class="preprocessor">    virtual wxPGVariant GetDefaultValue () const { return wxPGVariant(m_default); } \</span>
00276 <span class="preprocessor">    virtual wxVariant GenerateVariant ( wxPGVariant value, const wxString&amp; name ) const \</span>
00277 <span class="preprocessor">    { return wxVariant ( value.GETTER(), name ); } \</span>
00278 <span class="preprocessor">    virtual wxPGProperty* GenerateProperty ( const wxString&amp; label, const wxString&amp; name ) const \</span>
00279 <span class="preprocessor">    { \</span>
00280 <span class="preprocessor">        return wxPG_CONSTFUNC(DEFPROPERTY)(label,name); \</span>
00281 <span class="preprocessor">    } \</span>
00282 <span class="preprocessor">    virtual void SetValueFromVariant ( wxPGProperty* property, wxVariant&amp; value ) const \</span>
00283 <span class="preprocessor">    { \</span>
00284 <span class="preprocessor">        wxASSERT_MSG( wxStrcmp(GetTypeName(),value.GetType().c_str()) == 0, \</span>
00285 <span class="preprocessor">            wxT("SetValueFromVariant: wxVariant type mismatch.") ); \</span>
00286 <span class="preprocessor">        property-&gt;DoSetValue(value.GETTER()); \</span>
00287 <span class="preprocessor">    } \</span>
00288 <span class="preprocessor">    wxPGValueType##VALUETYPE##Class(); \</span>
00289 <span class="preprocessor">    virtual ~wxPGValueType##VALUETYPE##Class(); \</span>
00290 <span class="preprocessor">protected: \</span>
00291 <span class="preprocessor">    CVALUETYPE m_default; \</span>
00292 <span class="preprocessor">}; \</span>
00293 <span class="preprocessor">wxPGValueType##VALUETYPE##Class::wxPGValueType##VALUETYPE##Class() { m_default = DEFVAL; } \</span>
00294 <span class="preprocessor">wxPGValueType##VALUETYPE##Class::~wxPGValueType##VALUETYPE##Class() { }</span>
00295 <span class="preprocessor"></span>
00296 <span class="preprocessor">#define WX_PG_IMPLEMENT_VALUE_TYPE(VALUETYPE,DEFPROPERTY,TYPESTRING,GETTER,DEFVAL) \</span>
00297 <span class="preprocessor">WX_PG_IMPLEMENT_SUBTYPE(VALUETYPE,VALUETYPE,DEFPROPERTY,TYPESTRING,GETTER,DEFVAL)</span>
00298 <span class="preprocessor"></span>
00299 <span class="comment">//</span>
00300 <span class="comment">// Implements wxVariantData for the type.</span>
00301 <span class="comment">//</span>
00302 <span class="preprocessor">#define WX_PG_IMPLEMENT_VALUE_TYPE_VDC(VDCLASS,VALUETYPE) \</span>
00303 <span class="preprocessor">IMPLEMENT_DYNAMIC_CLASS(VDCLASS,wxVariantData) \</span>
00304 <span class="preprocessor">VDCLASS::VDCLASS() { } \</span>
00305 <span class="preprocessor">VDCLASS::VDCLASS(const VALUETYPE&amp; value) \</span>
00306 <span class="preprocessor">{ \</span>
00307 <span class="preprocessor">    m_value = value; \</span>
00308 <span class="preprocessor">} \</span>
00309 <span class="preprocessor">void VDCLASS::Copy(wxVariantData&amp; data) \</span>
00310 <span class="preprocessor">{ \</span>
00311 <span class="preprocessor">    wxASSERT_MSG( data.GetType() == GetType(), wxT(#VDCLASS) wxT("::Copy: Can't copy to this type of data") ); \</span>
00312 <span class="preprocessor">    VDCLASS&amp; otherData = (VDCLASS&amp;) data; \</span>
00313 <span class="preprocessor">    otherData.m_value = m_value; \</span>
00314 <span class="preprocessor">} \</span>
00315 <span class="preprocessor">wxString VDCLASS::GetType() const \</span>
00316 <span class="preprocessor">{ \</span>
00317 <span class="preprocessor">    return wxString(wxT(#VALUETYPE)); \</span>
00318 <span class="preprocessor">} \</span>
00319 <span class="preprocessor">bool VDCLASS::Eq(wxVariantData&amp; data) const \</span>
00320 <span class="preprocessor">{ \</span>
00321 <span class="preprocessor">    wxASSERT_MSG( data.GetType() == GetType(), wxT(#VDCLASS) wxT("::Eq: argument mismatch") ); \</span>
00322 <span class="preprocessor">    VDCLASS&amp; otherData = (VDCLASS&amp;) data; \</span>
00323 <span class="preprocessor">    return otherData.m_value == m_value; \</span>
00324 <span class="preprocessor">} \</span>
00325 <span class="preprocessor">void* VDCLASS::GetValuePtr() { return (void*)&amp;m_value; }</span>
00326 <span class="preprocessor"></span>
00327 <span class="comment">// TODO: When ready, remove GetValueClassInfo</span>
00328 <span class="preprocessor">#define WX_PG_IMPLEMENT_VALUE_TYPE_WXOBJ_BASE(VALUETYPE,DEFPROPERTY,DEFVAL) \</span>
00329 <span class="preprocessor">class WX_PG_DECLARE_VALUE_TYPE_VDC(VALUETYPE) \</span>
00330 <span class="preprocessor">    virtual wxClassInfo* GetValueClassInfo(); \</span>
00331 <span class="preprocessor">}; \</span>
00332 <span class="preprocessor">WX_PG_IMPLEMENT_VALUE_TYPE_VDC(wxVariantData_##VALUETYPE,VALUETYPE) \</span>
00333 <span class="preprocessor">wxClassInfo* wxVariantData_##VALUETYPE::GetValueClassInfo() \</span>
00334 <span class="preprocessor">{ \</span>
00335 <span class="preprocessor">    return m_value.GetClassInfo(); \</span>
00336 <span class="preprocessor">} \</span>
00337 <span class="preprocessor">const wxPGValueType *wxPGValueType_##VALUETYPE = (wxPGValueType*) NULL; \</span>
00338 <span class="preprocessor">class wxPGValueType##VALUETYPE##Class : public wxPGValueType \</span>
00339 <span class="preprocessor">{ \</span>
00340 <span class="preprocessor">public: \</span>
00341 <span class="preprocessor">    virtual const wxChar* GetTypeName() const { return CLASSINFO(VALUETYPE)-&gt;GetClassName(); } \</span>
00342 <span class="preprocessor">    virtual wxVariant GenerateVariant ( wxPGVariant value, const wxString&amp; name ) const \</span>
00343 <span class="preprocessor">    { return wxVariant ( new wxVariantData_##VALUETYPE( (*(VALUETYPE*)value.GetRawPtr()) ), name ); } \</span>
00344 <span class="preprocessor">    virtual wxPGProperty* GenerateProperty ( const wxString&amp; label, const wxString&amp; name ) const \</span>
00345 <span class="preprocessor">    { \</span>
00346 <span class="preprocessor">        return wxPG_CONSTFUNC(DEFPROPERTY)(label,name); \</span>
00347 <span class="preprocessor">    } \</span>
00348 <span class="preprocessor">    virtual void SetValueFromVariant ( wxPGProperty* property, wxVariant&amp; value ) const \</span>
00349 <span class="preprocessor">    { \</span>
00350 <span class="preprocessor">        const VALUETYPE* real_value; \</span>
00351 <span class="preprocessor">        wxASSERT_MSG( wxStrcmp(GetTypeName(),value.GetType().c_str()) == 0, \</span>
00352 <span class="preprocessor">            wxT("GetPtrFromVariant: wxVariant type mismatch.") ); \</span>
00353 <span class="preprocessor">        wxVariantData_##VALUETYPE* vd = (wxVariantData_##VALUETYPE*)value.GetData(); \</span>
00354 <span class="preprocessor">        if ( vd-&gt;IsKindOf(CLASSINFO(wxVariantData_##VALUETYPE)) ) \</span>
00355 <span class="preprocessor">            real_value = &amp;vd-&gt;GetValue(); \</span>
00356 <span class="preprocessor">        else \</span>
00357 <span class="preprocessor">            real_value  = ((const VALUETYPE*)value.GetWxObjectPtr()); \</span>
00358 <span class="preprocessor">        property-&gt;DoSetValue( *real_value ); \</span>
00359 <span class="preprocessor">    }</span>
00360 <span class="preprocessor"></span>
00361 <span class="preprocessor">#define WX_PG_IMPLEMENT_VALUE_TYPE_WXOBJ(VALUETYPE,DEFPROPERTY,DEFVAL) \</span>
00362 <span class="preprocessor">WX_PG_IMPLEMENT_VALUE_TYPE_WXOBJ_BASE(VALUETYPE,DEFPROPERTY,DEFVAL) \</span>
00363 <span class="preprocessor">    virtual wxPGVariant GetDefaultValue () const { return wxPGVariant(DEFVAL); } \</span>
00364 <span class="preprocessor">};</span>
00365 <span class="preprocessor"></span>
00366 <span class="preprocessor">#define WX_PG_IMPLEMENT_VALUE_TYPE_WXOBJ_OWNDEFAULT(VALUETYPE,DEFPROPERTY,DEFVAL) \</span>
00367 <span class="preprocessor">WX_PG_IMPLEMENT_VALUE_TYPE_WXOBJ_BASE(VALUETYPE,DEFPROPERTY,DEFVAL) \</span>
00368 <span class="preprocessor">    wxPGValueType##VALUETYPE##Class() { m_default = DEFVAL; } \</span>
00369 <span class="preprocessor">    virtual ~wxPGValueType##VALUETYPE##Class() { } \</span>
00370 <span class="preprocessor">    virtual wxPGVariant GetDefaultValue () const { return wxPGVariant(&amp;m_default); } \</span>
00371 <span class="preprocessor">protected: \</span>
00372 <span class="preprocessor">    VALUETYPE   m_default; \</span>
00373 <span class="preprocessor">};</span>
00374 <span class="preprocessor"></span>
00375 <span class="comment">//    virtual const wxChar* GetTypeName() const { return wxPGValueType_void-&gt;GetTypeName(); }</span>
00376 
00377 <span class="preprocessor">#define WX_PG_IMPLEMENT_VALUE_TYPE_VOIDP_BASE(VALUETYPE,DEFPROPERTY,DEFVAL) \</span>
00378 <span class="preprocessor">const wxPGValueType *wxPGValueType_##VALUETYPE = (wxPGValueType*)NULL; \</span>
00379 <span class="preprocessor">class wxPGValueType##VALUETYPE##Class : public wxPGValueType \</span>
00380 <span class="preprocessor">{ \</span>
00381 <span class="preprocessor">protected: \</span>
00382 <span class="preprocessor">    VALUETYPE   m_default; \</span>
00383 <span class="preprocessor">public: \</span>
00384 <span class="preprocessor">    virtual const wxChar* GetTypeName() const { return wxT(#VALUETYPE); } \</span>
00385 <span class="preprocessor">    virtual const wxChar* GetCustomTypeName() const { return wxT(#VALUETYPE); } \</span>
00386 <span class="preprocessor">    virtual wxPGVariant GetDefaultValue () const { return wxPGVariant((void*)&amp;m_default); } \</span>
00387 <span class="preprocessor">    virtual wxPGProperty* GenerateProperty ( const wxString&amp; label, const wxString&amp; name ) const \</span>
00388 <span class="preprocessor">    { \</span>
00389 <span class="preprocessor">        return wxPG_CONSTFUNC(DEFPROPERTY)(label,name); \</span>
00390 <span class="preprocessor">    } \</span>
00391 <span class="preprocessor">    virtual void SetValueFromVariant ( wxPGProperty* property, wxVariant&amp; value ) const \</span>
00392 <span class="preprocessor">    { \</span>
00393 <span class="preprocessor">        wxASSERT_MSG( wxStrcmp(GetTypeName(),value.GetType().c_str()) == 0, \</span>
00394 <span class="preprocessor">            wxT("SetValueFromVariant: wxVariant type mismatch.") ); \</span>
00395 <span class="preprocessor">        wxVariantData_##VALUETYPE* vd = (wxVariantData_##VALUETYPE*)value.GetData(); \</span>
00396 <span class="preprocessor">        wxASSERT_MSG( vd-&gt;IsKindOf(CLASSINFO(wxVariantData_##VALUETYPE)), \</span>
00397 <span class="preprocessor">            wxT("SetValueFromVariant: wxVariantData mismatch.")); \</span>
00398 <span class="preprocessor">        property-&gt;DoSetValue((void*)&amp;vd-&gt;GetValue() ); \</span>
00399 <span class="preprocessor">    } \</span>
00400 <span class="preprocessor">    wxPGValueType##VALUETYPE##Class() { m_default = DEFVAL; } \</span>
00401 <span class="preprocessor">    virtual ~wxPGValueType##VALUETYPE##Class() { }</span>
00402 <span class="preprocessor"></span>
00403 <span class="preprocessor">#define WX_PG_IMPLEMENT_VALUE_TYPE_VOIDP_SIMPLE(VALUETYPE,DEFPROPERTY,DEFVAL) \</span>
00404 <span class="preprocessor">WX_PG_IMPLEMENT_VALUE_TYPE_VOIDP_BASE(VALUETYPE,DEFPROPERTY,DEFVAL) \</span>
00405 <span class="preprocessor">    virtual wxVariant GenerateVariant ( wxPGVariant value, const wxString&amp; name ) const \</span>
00406 <span class="preprocessor">    { \</span>
00407 <span class="preprocessor">        void* ptr = (void*)value.GetRawPtr(); \</span>
00408 <span class="preprocessor">        wxASSERT ( ptr ); \</span>
00409 <span class="preprocessor">        return wxVariant ( ptr, name ); \</span>
00410 <span class="preprocessor">    } \</span>
00411 <span class="preprocessor">};</span>
00412 <span class="preprocessor"></span>
00413 <span class="preprocessor">#define WX_PG_IMPLEMENT_VALUE_TYPE_VOIDP_CVD(VALUETYPE,DEFPROPERTY,DEFVAL,VDCLASS) \</span>
00414 <span class="preprocessor">WX_PG_IMPLEMENT_VALUE_TYPE_VOIDP_BASE(VALUETYPE,DEFPROPERTY,DEFVAL) \</span>
00415 <span class="preprocessor">    virtual wxVariant GenerateVariant ( wxPGVariant value, const wxString&amp; name ) const \</span>
00416 <span class="preprocessor">    { \</span>
00417 <span class="preprocessor">        void* ptr = (void*)value.GetRawPtr(); \</span>
00418 <span class="preprocessor">        wxASSERT ( ptr ); \</span>
00419 <span class="preprocessor">        return wxVariant ( new VDCLASS(*((VALUETYPE*)ptr)), name ); \</span>
00420 <span class="preprocessor">    } \</span>
00421 <span class="preprocessor">};</span>
00422 <span class="preprocessor"></span>
00423 <span class="preprocessor">#define WX_PG_IMPLEMENT_VALUE_TYPE_VOIDP2(VALUETYPE,DEFPROPERTY,DEFVAL,VDCLASS) \</span>
00424 <span class="preprocessor">WX_PG_IMPLEMENT_VALUE_TYPE_VDC(VDCLASS,VALUETYPE) \</span>
00425 <span class="preprocessor">WX_PG_IMPLEMENT_VALUE_TYPE_VOIDP_CVD(VALUETYPE,DEFPROPERTY,DEFVAL,VDCLASS)</span>
00426 <span class="preprocessor"></span>
00427 <span class="preprocessor">#define WX_PG_IMPLEMENT_VALUE_TYPE_VOIDP(VALUETYPE,DEFPROPERTY,DEFVAL) \</span>
00428 <span class="preprocessor">WX_PG_IMPLEMENT_VALUE_TYPE_VOIDP2(VALUETYPE,DEFPROPERTY,DEFVAL,wxVariantData_##VALUETYPE)</span>
00429 <span class="preprocessor"></span>
00430 <span class="comment">//</span>
00431 <span class="comment">// Use this to create a new type with a different default value.</span>
00432 <span class="preprocessor">#define WX_PG_IMPLEMENT_DERIVED_TYPE(VALUETYPE,PARENTVT,DEFVAL) \</span>
00433 <span class="preprocessor">const wxPGValueType *wxPGValueType_##VALUETYPE = (wxPGValueType*) NULL; \</span>
00434 <span class="preprocessor">class wxPGValueType##VALUETYPE##Class : public wxPGValueType \</span>
00435 <span class="preprocessor">{ \</span>
00436 <span class="preprocessor">protected: \</span>
00437 <span class="preprocessor">    const wxPGValueType*    m_parentClass; \</span>
00438 <span class="preprocessor">    PARENTVT                m_default; \</span>
00439 <span class="preprocessor">public: \</span>
00440 <span class="preprocessor">    virtual const wxChar* GetTypeName() const { return m_parentClass-&gt;GetTypeName(); } \</span>
00441 <span class="preprocessor">    virtual const wxChar* GetCustomTypeName() const { return wxT(#VALUETYPE); } \</span>
00442 <span class="preprocessor">    virtual wxPGVariant GetDefaultValue () const { return wxPGVariant(m_default); } \</span>
00443 <span class="preprocessor">    virtual wxVariant GenerateVariant ( wxPGVariant value, const wxString&amp; name ) const \</span>
00444 <span class="preprocessor">    { return m_parentClass-&gt;GenerateVariant(value,name); } \</span>
00445 <span class="preprocessor">    virtual wxPGProperty* GenerateProperty ( const wxString&amp; label, const wxString&amp; name ) const \</span>
00446 <span class="preprocessor">    { return m_parentClass-&gt;GenerateProperty(label,name); } \</span>
00447 <span class="preprocessor">    virtual void SetValueFromVariant ( wxPGProperty* property, wxVariant&amp; value ) const \</span>
00448 <span class="preprocessor">    { m_parentClass-&gt;SetValueFromVariant(property,value); } \</span>
00449 <span class="preprocessor">    wxPGValueType##VALUETYPE##Class(); \</span>
00450 <span class="preprocessor">    virtual ~wxPGValueType##VALUETYPE##Class(); \</span>
00451 <span class="preprocessor">}; \</span>
00452 <span class="preprocessor">wxPGValueType##VALUETYPE##Class::wxPGValueType##VALUETYPE##Class() \</span>
00453 <span class="preprocessor">{ \</span>
00454 <span class="preprocessor">    m_default = DEFVAL; \</span>
00455 <span class="preprocessor">    m_parentClass = wxPGValueType_##PARENTVT; \</span>
00456 <span class="preprocessor">    wxASSERT ( m_parentClass != (wxPGValueType*) NULL); \</span>
00457 <span class="preprocessor">} \</span>
00458 <span class="preprocessor">wxPGValueType##VALUETYPE##Class::~wxPGValueType##VALUETYPE##Class() { }</span>
00459 <span class="preprocessor"></span>
00460 <span class="comment">// -----------------------------------------------------------------------</span>
00461 
00462 <span class="comment">//</span>
00463 <span class="comment">// Additional property class declaration helper macros</span>
00464 <span class="comment">//</span>
00465 
00466 <span class="preprocessor">#define WX_PG_DECLARE_DERIVED_PROPERTY_CLASS() \</span>
00467 <span class="preprocessor">public: \</span>
00468 <span class="preprocessor">    WX_PG_DECLARE_GETCLASSNAME() \</span>
00469 <span class="preprocessor">    WX_PG_DECLARE_GETCLASSINFO() \</span>
00470 <span class="preprocessor">private:</span>
00471 <span class="preprocessor"></span>
00472 <span class="comment">// -----------------------------------------------------------------------</span>
00473 
00474 <span class="comment">//</span>
00475 <span class="comment">// Property class implementation helper macros.</span>
00476 <span class="comment">//</span>
00477 
00478 <span class="preprocessor">#define WX_PG_DECLARE_PARENTAL_TYPE_METHODS() \</span>
00479 <span class="preprocessor">    virtual void DoSetValue ( wxPGVariant value ); \</span>
00480 <span class="preprocessor">    virtual wxPGVariant DoGetValue () const;</span>
00481 <span class="preprocessor"></span>
00482 <span class="preprocessor">#define WX_PG_DECLARE_BASIC_TYPE_METHODS() \</span>
00483 <span class="preprocessor">    virtual void DoSetValue ( wxPGVariant value ); \</span>
00484 <span class="preprocessor">    virtual wxPGVariant DoGetValue () const; \</span>
00485 <span class="preprocessor">    virtual wxString GetValueAsString ( int arg_flags = 0 ) const; \</span>
00486 <span class="preprocessor">    virtual bool SetValueFromString ( const wxString&amp; text, int flags = 0 );</span>
00487 <span class="preprocessor"></span>
00488 <span class="comment">// class WXDLLIMPEXP_PG</span>
00489 <span class="preprocessor">#define wxPG_BEGIN_PROPERTY_CLASS_BODY2(CLASSNAME,UPCLASS,T,INTERNAL_T,T_AS_ARG,DECL) \</span>
00490 <span class="preprocessor">DECL CLASSNAME : public UPCLASS \</span>
00491 <span class="preprocessor">{ \</span>
00492 <span class="preprocessor">    WX_PG_DECLARE_PROPERTY_CLASS() \</span>
00493 <span class="preprocessor">protected: \</span>
00494 <span class="preprocessor">    INTERNAL_T      m_value; \</span>
00495 <span class="preprocessor">public: \</span>
00496 <span class="preprocessor">    CLASSNAME( const wxString&amp; label, const wxString&amp; name, T_AS_ARG value ); \</span>
00497 <span class="preprocessor">    virtual ~CLASSNAME();</span>
00498 <span class="preprocessor"></span>
00499 <span class="preprocessor">#define wxPG_BEGIN_PROPERTY_CLASS_BODY(NAME,UPCLASS,T,T_AS_ARG) \</span>
00500 <span class="preprocessor">wxPG_BEGIN_PROPERTY_CLASS_BODY2(wxPG_PROPCLASS(NAME),UPCLASS,T,T,T_AS_ARG,class)</span>
00501 <span class="preprocessor"></span>
00502 <span class="preprocessor">#define wxPG_BEGIN_PROPERTY_CLASS_BODY_WITH_DECL(NAME,UPCLASS,T,T_AS_ARG,DECL) \</span>
00503 <span class="preprocessor">wxPG_BEGIN_PROPERTY_CLASS_BODY2(wxPG_PROPCLASS(NAME),UPCLASS,T,T,T_AS_ARG,class DECL)</span>
00504 <span class="preprocessor"></span>
00505 <span class="preprocessor">#define wxPG_END_PROPERTY_CLASS_BODY() \</span>
00506 <span class="preprocessor">};</span>
00507 <span class="preprocessor"></span>
00508 <span class="preprocessor">#define WX_PG_DECLARE_CHOICE_METHODS() \</span>
00509 <span class="preprocessor">    virtual bool SetValueFromInt ( long value, int flags = 0 ); \</span>
00510 <span class="preprocessor">    virtual int GetChoiceInfo ( wxPGChoiceInfo* choiceinfo );</span>
00511 <span class="preprocessor"></span>
00512 <span class="preprocessor">#define WX_PG_DECLARE_EVENT_METHODS() \</span>
00513 <span class="preprocessor">    virtual bool OnEvent ( wxPropertyGrid* propgrid, wxPGCtrlClass* primary, wxEvent&amp; event );</span>
00514 <span class="preprocessor"></span>
00515 <span class="preprocessor">#define WX_PG_DECLARE_PARENTAL_METHODS() \</span>
00516 <span class="preprocessor">    virtual void ChildChanged ( wxPGProperty* p ); \</span>
00517 <span class="preprocessor">    virtual void RefreshChildren ();</span>
00518 <span class="preprocessor"></span>
00519 <span class="preprocessor">#define WX_PG_DECLARE_CUSTOM_PAINT_METHODS() \</span>
00520 <span class="preprocessor">    virtual wxSize GetImageSize() const; \</span>
00521 <span class="preprocessor">    virtual void OnCustomPaint ( wxDC&amp; dc, const wxRect&amp; rect, wxPGPaintData&amp; paintdata );</span>
00522 <span class="preprocessor"></span>
00523 <span class="preprocessor">#define WX_PG_DECLARE_ATTRIBUTE_METHODS() \</span>
00524 <span class="preprocessor">    virtual void SetAttribute ( int id, wxVariant&amp; value );</span>
00525 <span class="preprocessor"></span>
00526 <span class="preprocessor">#if wxPG_INCLUDE_WXOBJECT</span>
00527 <span class="preprocessor"></span><span class="preprocessor"># define wxPG_GETCLASSNAME_IMPLEMENTATION(PROPNAME)</span>
00528 <span class="preprocessor"></span><span class="preprocessor">#else</span>
00529 <span class="preprocessor"></span><span class="preprocessor"># define wxPG_GETCLASSNAME_IMPLEMENTATION(PROPNAME) \</span>
00530 <span class="preprocessor">    static const wxChar* PROPNAME##_ClassName = wxT(#PROPNAME); \</span>
00531 <span class="preprocessor">    const wxChar* PROPNAME##Class::GetClassName() const { return PROPNAME##_ClassName; }</span>
00532 <span class="preprocessor"></span><span class="preprocessor">#endif</span>
00533 <span class="preprocessor"></span>
00534 <span class="comment">// Implements sans constructor function. Also, first arg is class name, not property name.</span>
00535 <span class="preprocessor">#define WX_PG_IMPLEMENT_PROPERTY_CLASS_PLAIN(PROPNAME,T,EDITOR) \</span>
00536 <span class="preprocessor">wxPG_GETCLASSNAME_IMPLEMENTATION(PROPNAME) \</span>
00537 <span class="preprocessor">const wxPGValueType* PROPNAME##Class::GetValueType () const \</span>
00538 <span class="preprocessor">{ \</span>
00539 <span class="preprocessor">    return wxPGValueType_##T; \</span>
00540 <span class="preprocessor">} \</span>
00541 <span class="preprocessor">const wxPGEditor* PROPNAME##Class::DoGetEditorClass () const \</span>
00542 <span class="preprocessor">{ \</span>
00543 <span class="preprocessor">    return wxPGEditor_##EDITOR; \</span>
00544 <span class="preprocessor">}</span>
00545 <span class="preprocessor"></span>
00546 
00547 <span class="preprocessor">#define WX_PG_IMPLEMENT_CLASSINFO(NAME,UPCLASS) \</span>
00548 <span class="preprocessor">static wxPGProperty* NAME##Class2 (const wxString&amp; label, const wxString&amp; name) \</span>
00549 <span class="preprocessor">{ \</span>
00550 <span class="preprocessor">    return wxPG_CONSTFUNC(NAME)(label,name); \</span>
00551 <span class="preprocessor">} \</span>
00552 <span class="preprocessor">wxPGPropertyClassInfo NAME##ClassInfo = {wxT(#NAME),&amp;UPCLASS##Info,&amp;NAME##Class2}; \</span>
00553 <span class="preprocessor">const wxPGPropertyClassInfo* NAME##Class::GetClassInfo() const \</span>
00554 <span class="preprocessor">{ \</span>
00555 <span class="preprocessor">    return &amp;NAME##ClassInfo; \</span>
00556 <span class="preprocessor">}</span>
00557 <span class="preprocessor"></span>
00558 
00559 <span class="comment">// second constfunc and classinfo is for creating properties w/o value from text</span>
00560 <span class="comment">// (should be changed to simpler scheme in 1.2)</span>
00561 <span class="preprocessor">#define WX_PG_IMPLEMENT_CONSTFUNC(NAME,T_AS_ARG) \</span>
00562 <span class="preprocessor">wxPGProperty* wxPG_CONSTFUNC(NAME)( const wxString&amp; label, const wxString&amp; name, T_AS_ARG value ) \</span>
00563 <span class="preprocessor">{ \</span>
00564 <span class="preprocessor">    return new wxPG_PROPCLASS(NAME)(label,name,value); \</span>
00565 <span class="preprocessor">}</span>
00566 <span class="preprocessor"></span>
00567 <span class="comment">// Adds constructor function as well.</span>
00568 <span class="preprocessor">#define WX_PG_IMPLEMENT_PROPERTY_CLASS2(NAME,CLASSNAME,UPCLASS,T,T_AS_ARG,EDITOR) \</span>
00569 <span class="preprocessor">WX_PG_IMPLEMENT_CONSTFUNC(NAME,T_AS_ARG) \</span>
00570 <span class="preprocessor">WX_PG_IMPLEMENT_CLASSINFO(NAME,UPCLASS) \</span>
00571 <span class="preprocessor">WX_PG_IMPLEMENT_PROPERTY_CLASS_PLAIN(NAME,T,EDITOR)</span>
00572 <span class="preprocessor"></span>
00573 <span class="comment">// A regular property</span>
00574 <span class="preprocessor">#define WX_PG_IMPLEMENT_PROPERTY_CLASS(NAME,UPNAME,T,T_AS_ARG,EDITOR) \</span>
00575 <span class="preprocessor">WX_PG_IMPLEMENT_PROPERTY_CLASS2(NAME,wxPG_PROPCLASS(NAME),wxPG_PROPCLASS(UPNAME),T,T_AS_ARG,EDITOR)</span>
00576 <span class="preprocessor"></span>
00577 <span class="comment">// Derived property class is one that inherits from an existing working property</span>
00578 <span class="comment">// class, but assumes same value and editor type.</span>
00579 <span class="preprocessor">#define WX_PG_IMPLEMENT_DERIVED_PROPERTY_CLASS(NAME,UPNAME,T_AS_ARG) \</span>
00580 <span class="preprocessor">WX_PG_IMPLEMENT_CONSTFUNC(NAME,T_AS_ARG) \</span>
00581 <span class="preprocessor">WX_PG_IMPLEMENT_CLASSINFO(NAME,UPNAME##Class) \</span>
00582 <span class="preprocessor">wxPG_GETCLASSNAME_IMPLEMENTATION(NAME)</span>
00583 <span class="preprocessor"></span>
00584 <span class="comment">// -----------------------------------------------------------------------</span>
00585 
00586 <span class="preprocessor">#define WX_PG_IMPLEMENT_STRING_PROPERTY_WITH_INIT(NAME) \</span>
00587 <span class="preprocessor">class wxPG_PROPCLASS(NAME) : public wxLongStringPropertyClass \</span>
00588 <span class="preprocessor">{ \</span>
00589 <span class="preprocessor">    WX_PG_DECLARE_DERIVED_PROPERTY_CLASS() \</span>
00590 <span class="preprocessor">public: \</span>
00591 <span class="preprocessor">    wxPG_PROPCLASS(NAME)( const wxString&amp; name, const wxString&amp; label, const wxString&amp; value ); \</span>
00592 <span class="preprocessor">    virtual ~wxPG_PROPCLASS(NAME)(); \</span>
00593 <span class="preprocessor">    virtual bool OnButtonClick ( wxPropertyGrid* propgrid, wxString&amp; value ); \</span>
00594 <span class="preprocessor">private: \</span>
00595 <span class="preprocessor">    void CustomInit(); \</span>
00596 <span class="preprocessor">}; \</span>
00597 <span class="preprocessor">WX_PG_IMPLEMENT_DERIVED_PROPERTY_CLASS(NAME,wxLongStringProperty,const wxString&amp;) \</span>
00598 <span class="preprocessor">wxPG_PROPCLASS(NAME)::wxPG_PROPCLASS(NAME)( const wxString&amp; name, const wxString&amp; label, const wxString&amp; value ) \</span>
00599 <span class="preprocessor">  : wxLongStringPropertyClass(name,label,value) \</span>
00600 <span class="preprocessor">{ \</span>
00601 <span class="preprocessor">    CustomInit(); \</span>
00602 <span class="preprocessor">} \</span>
00603 <span class="preprocessor">wxPG_PROPCLASS(NAME)::~wxPG_PROPCLASS(NAME)() { }</span>
00604 <span class="preprocessor"></span>
00605 <span class="preprocessor">#define WX_PG_IMPLEMENT_STRING_PROPERTY(NAME) \</span>
00606 <span class="preprocessor">WX_PG_IMPLEMENT_STRING_PROPERTY_WITH_INIT(NAME) \</span>
00607 <span class="preprocessor">void wxPG_PROPCLASS(NAME)::CustomInit() { }</span>
00608 <span class="preprocessor"></span>
00609 <span class="comment">// -----------------------------------------------------------------------</span>
00610 
00611 <span class="comment">// This will create interface for wxFlagsProperty derived class</span>
00612 <span class="comment">// named CLASSNAME.</span>
00613 <span class="preprocessor">#define WX_PG_IMPLEMENT_CUSTOM_FLAGS_PROPERTY2(NAME,CLASSNAME,LABELS,VALUES,ITEMCOUNT,DEFVAL) \</span>
00614 <span class="preprocessor">class CLASSNAME : public wxFlagsPropertyClass \</span>
00615 <span class="preprocessor">{ \</span>
00616 <span class="preprocessor">    WX_PG_DECLARE_PROPERTY_CLASS() \</span>
00617 <span class="preprocessor">public: \</span>
00618 <span class="preprocessor">    CLASSNAME ( const wxString&amp; label, const wxString&amp; name, long value ); \</span>
00619 <span class="preprocessor">    virtual ~CLASSNAME(); \</span>
00620 <span class="preprocessor">}; \</span>
00621 <span class="preprocessor">WX_PG_IMPLEMENT_DERIVED_TYPE(long_##NAME,long,DEFVAL) \</span>
00622 <span class="preprocessor">WX_PG_IMPLEMENT_PROPERTY_CLASS(NAME,wxFlagsProperty,long_##NAME,long,TextCtrl) \</span>
00623 <span class="preprocessor">CLASSNAME::CLASSNAME ( const wxString&amp; label, const wxString&amp; name, long value ) \</span>
00624 <span class="preprocessor">    : wxFlagsPropertyClass(label,name,LABELS,VALUES,ITEMCOUNT,value!=-1?value:DEFVAL) \</span>
00625 <span class="preprocessor">{ \</span>
00626 <span class="preprocessor">    wxPG_INIT_REQUIRED_TYPE(long_##NAME) \</span>
00627 <span class="preprocessor">    m_flags |= wxPG_PROP_STATIC_CHOICES; \</span>
00628 <span class="preprocessor">} \</span>
00629 <span class="preprocessor">CLASSNAME::~CLASSNAME() { }</span>
00630 <span class="preprocessor"></span>
00631 <span class="preprocessor">#define WX_PG_IMPLEMENT_CUSTOM_FLAGS_PROPERTY(NAME,LABELS,VALUES,ITEMCOUNT,DEFVAL) \</span>
00632 <span class="preprocessor">WX_PG_IMPLEMENT_CUSTOM_FLAGS_PROPERTY2(NAME,wxPG_PROPCLASS(NAME),LABELS,VALUES,ITEMCOUNT,DEFVAL)</span>
00633 <span class="preprocessor"></span>
00634 <span class="comment">// -----------------------------------------------------------------------</span>
00635 
00636 <span class="comment">// This will create interface for Enum property derived class</span>
00637 <span class="comment">// named CLASSNAME.</span>
00638 <span class="preprocessor">#define WX_PG_IMPLEMENT_CUSTOM_ENUM_PROPERTY2(NAME,CLASSNAME,LABELS,VALUES,ITEMCOUNT,DEFVAL) \</span>
00639 <span class="preprocessor">class CLASSNAME : public wxEnumPropertyClass \</span>
00640 <span class="preprocessor">{ \</span>
00641 <span class="preprocessor">    WX_PG_DECLARE_PROPERTY_CLASS() \</span>
00642 <span class="preprocessor">public: \</span>
00643 <span class="preprocessor">    CLASSNAME ( const wxString&amp; label, const wxString&amp; name, int value ); \</span>
00644 <span class="preprocessor">    virtual ~CLASSNAME(); \</span>
00645 <span class="preprocessor">}; \</span>
00646 <span class="preprocessor">WX_PG_IMPLEMENT_DERIVED_TYPE(long_##NAME,long,DEFVAL) \</span>
00647 <span class="preprocessor">WX_PG_IMPLEMENT_PROPERTY_CLASS(NAME,wxEnumProperty,long_##NAME,int,Choice) \</span>
00648 <span class="preprocessor">CLASSNAME::CLASSNAME ( const wxString&amp; label, const wxString&amp; name, int value ) \</span>
00649 <span class="preprocessor">    : wxEnumPropertyClass(label,name,LABELS,VALUES,ITEMCOUNT,value!=-1?value:DEFVAL) \</span>
00650 <span class="preprocessor">{ \</span>
00651 <span class="preprocessor">    wxPG_INIT_REQUIRED_TYPE(long_##NAME) \</span>
00652 <span class="preprocessor">    m_flags |= wxPG_PROP_STATIC_CHOICES; \</span>
00653 <span class="preprocessor">} \</span>
00654 <span class="preprocessor">CLASSNAME::~CLASSNAME() { }</span>
00655 <span class="preprocessor"></span>
00656 <span class="preprocessor">#define WX_PG_IMPLEMENT_CUSTOM_ENUM_PROPERTY(NAME,LABELS,VALUES,ITEMCOUNT,DEFVAL) \</span>
00657 <span class="preprocessor">WX_PG_IMPLEMENT_CUSTOM_ENUM_PROPERTY2(NAME,wxPG_PROPCLASS(NAME),LABELS,VALUES,ITEMCOUNT,DEFVAL)</span>
00658 <span class="preprocessor"></span>
00659 <span class="comment">// -----------------------------------------------------------------------</span>
00660 
00661 <span class="comment">// Implementation for user wxColour editor property</span>
00662 
00663 <span class="preprocessor">#define WX_PG_IMPLEMENT_CUSTOM_COLOUR_PROPERTY2(NAME,CLASSNAME,LABELS,VALUES,COLOURS,ITEMCOUNT) \</span>
00664 <span class="preprocessor">class CLASSNAME : public wxPG_PROPCLASS(wxSystemColourProperty) \</span>
00665 <span class="preprocessor">{ \</span>
00666 <span class="preprocessor">    WX_DECLARE_DERIVED_PROPERTY_CLASS() \</span>
00667 <span class="preprocessor">public: \</span>
00668 <span class="preprocessor">    CLASSNAME( const wxString&amp; label, const wxString&amp; name, \</span>
00669 <span class="preprocessor">        const wxColourPropertyValue&amp; value ); \</span>
00670 <span class="preprocessor">    virtual ~CLASSNAME (); \</span>
00671 <span class="preprocessor">    virtual long GetColour ( int index ); \</span>
00672 <span class="preprocessor">}; \</span>
00673 <span class="preprocessor">WX_PG_IMPLEMENT_DERIVED_PROPERTY_CLASS(NAME,wxSystemColourProperty,const wxColour&amp;) \</span>
00674 <span class="preprocessor">CLASSNAME::CLASSNAME( const wxString&amp; label, const wxString&amp; name, \</span>
00675 <span class="preprocessor">    const wxColourPropertyValue&amp; value ) \</span>
00676 <span class="preprocessor">    : wxPG_PROPCLASS(wxSystemColourProperty)(label,name,LABELS,VALUES,ITEMCOUNT,value ) \</span>
00677 <span class="preprocessor">{ \</span>
00678 <span class="preprocessor">    wxPG_INIT_REQUIRED_TYPE(wxColourPropertyValue) \</span>
00679 <span class="preprocessor">    m_flags |= wxPG_PROP_TRANSLATE_CUSTOM; \</span>
00680 <span class="preprocessor">    DoSetValue ( &amp;m_value ); \</span>
00681 <span class="preprocessor">} \</span>
00682 <span class="preprocessor">CLASSNAME::~CLASSNAME () { } \</span>
00683 <span class="preprocessor">long CLASSNAME::GetColour ( int index ) \</span>
00684 <span class="preprocessor">{ \</span>
00685 <span class="preprocessor">    const wxArrayInt&amp; values = GetValues(); \</span>
00686 <span class="preprocessor">    if ( !values ) \</span>
00687 <span class="preprocessor">    { \</span>
00688 <span class="preprocessor">        wxASSERT ( index &lt; (int)GetCount() ); \</span>
00689 <span class="preprocessor">        return COLOURS[index); \</span>
00690 <span class="preprocessor">    } \</span>
00691 <span class="preprocessor">    return COLOURS[values[index]]; \</span>
00692 <span class="preprocessor">}</span>
00693 <span class="preprocessor"></span>
00694 <span class="preprocessor">#define WX_PG_IMPLEMENT_CUSTOM_COLOUR_PROPERTY(NAME,LABELS,VALUES,COLOURS,ITEMCOUNT) \</span>
00695 <span class="preprocessor">    WX_PG_IMPLEMENT_CUSTOM_COLOUR_PROPERTY2(NAME,wxPG_PROPCLASS(NAME),LABELS,VALUES,COLOURS,ITEMCOUNT)</span>
00696 <span class="preprocessor"></span>
00697 <span class="comment">// -----------------------------------------------------------------------</span>
00698 
00699 <span class="preprocessor">#define WX_PG_IMPLEMENT_CUSTOM_COLOUR_PROPERTY_USES_WXCOLOUR2(NAME,CLASSNAME,LABELS,VALUES,COLOURS,ITEMCOUNT) \</span>
00700 <span class="preprocessor">class CLASSNAME : public wxPG_PROPCLASS(wxSystemColourProperty) \</span>
00701 <span class="preprocessor">{ \</span>
00702 <span class="preprocessor">    WX_PG_DECLARE_PROPERTY_CLASS() \</span>
00703 <span class="preprocessor">public: \</span>
00704 <span class="preprocessor">    CLASSNAME( const wxString&amp; label, const wxString&amp; name, \</span>
00705 <span class="preprocessor">        const wxColour&amp; value ); \</span>
00706 <span class="preprocessor">    virtual ~CLASSNAME (); \</span>
00707 <span class="preprocessor">    virtual void DoSetValue ( wxPGVariant value ); \</span>
00708 <span class="preprocessor">    virtual wxPGVariant DoGetValue () const; \</span>
00709 <span class="preprocessor">    virtual long GetColour ( int index ); \</span>
00710 <span class="preprocessor">}; \</span>
00711 <span class="preprocessor">WX_PG_IMPLEMENT_PROPERTY_CLASS(NAME,wxSystemColourProperty,wxColour,const wxColour&amp;,Choice) \</span>
00712 <span class="preprocessor">CLASSNAME::CLASSNAME( const wxString&amp; label, const wxString&amp; name, const wxColour&amp; value ) \</span>
00713 <span class="preprocessor">    : wxPG_PROPCLASS(wxSystemColourProperty)(label,name,LABELS,VALUES,ITEMCOUNT,value ) \</span>
00714 <span class="preprocessor">{ \</span>
00715 <span class="preprocessor">    wxPG_INIT_REQUIRED_TYPE(wxColour) \</span>
00716 <span class="preprocessor">    m_flags |= wxPG_PROP_TRANSLATE_CUSTOM; \</span>
00717 <span class="preprocessor">    DoSetValue(&amp;m_value.m_colour); \</span>
00718 <span class="preprocessor">} \</span>
00719 <span class="preprocessor">CLASSNAME::~CLASSNAME () { } \</span>
00720 <span class="preprocessor">void CLASSNAME::DoSetValue ( wxPGVariant value ) \</span>
00721 <span class="preprocessor">{ \</span>
00722 <span class="preprocessor">    wxASSERT ( value.GetRawPtr() ); \</span>
00723 <span class="preprocessor">    wxColour* pval = wxPGVariantToWxObjectPtr(value,wxColour); \</span>
00724 <span class="preprocessor">    m_value.m_type = wxPG_COLOUR_CUSTOM; \</span>
00725 <span class="preprocessor">    if ( m_flags &amp; wxPG_PROP_TRANSLATE_CUSTOM ) \</span>
00726 <span class="preprocessor">    { \</span>
00727 <span class="preprocessor">        int found_ind = ColToInd(*pval); \</span>
00728 <span class="preprocessor">        if ( found_ind != wxNOT_FOUND ) m_value.m_type = found_ind; \</span>
00729 <span class="preprocessor">    } \</span>
00730 <span class="preprocessor">    m_value.m_colour = *pval; \</span>
00731 <span class="preprocessor">    wxPG_SetVariantWxObjectValue(); \</span>
00732 <span class="preprocessor">    if ( m_value.m_type &lt; wxPG_COLOUR_WEB_BASE ) \</span>
00733 <span class="preprocessor">        wxPG_PROPCLASS(wxEnumProperty)::DoSetValue ( (long)m_value.m_type ); \</span>
00734 <span class="preprocessor">    else \</span>
00735 <span class="preprocessor">        m_index = GetItemCount()-1; \</span>
00736 <span class="preprocessor">} \</span>
00737 <span class="preprocessor">wxPGVariant CLASSNAME::DoGetValue () const \</span>
00738 <span class="preprocessor">{ \</span>
00739 <span class="preprocessor">    return wxPGVariant(&amp;m_value.m_colour); \</span>
00740 <span class="preprocessor">} \</span>
00741 <span class="preprocessor">long CLASSNAME::GetColour ( int index ) \</span>
00742 <span class="preprocessor">{ \</span>
00743 <span class="preprocessor">    const wxArrayInt&amp; values = GetValues(); \</span>
00744 <span class="preprocessor">    if ( !values.GetCount() ) \</span>
00745 <span class="preprocessor">    { \</span>
00746 <span class="preprocessor">        wxASSERT ( index &lt; (int)GetItemCount() ); \</span>
00747 <span class="preprocessor">        return COLOURS[index]; \</span>
00748 <span class="preprocessor">    } \</span>
00749 <span class="preprocessor">    return COLOURS[values[index]]; \</span>
00750 <span class="preprocessor">}</span>
00751 <span class="preprocessor"></span>
00752 <span class="preprocessor">#define WX_PG_IMPLEMENT_CUSTOM_COLOUR_PROPERTY_USES_WXCOLOUR(NAME,LABELS,VALUES,COLOURS,ITEMCOUNT) \</span>
00753 <span class="preprocessor">    WX_PG_IMPLEMENT_CUSTOM_COLOUR_PROPERTY_USES_WXCOLOUR2(NAME,wxPG_PROPCLASS(NAME),LABELS,VALUES,COLOURS,ITEMCOUNT)</span>
00754 <span class="preprocessor"></span>
00755 <span class="comment">// -----------------------------------------------------------------------</span>
00756 
00757 <span class="comment">// These may be useful for external properties (I think these could be any two values)</span>
00758 <span class="preprocessor">#define wxPG_SUBID1                     11485</span>
00759 <span class="preprocessor"></span><span class="preprocessor">#define wxPG_SUBID2                     11486</span>
00760 <span class="preprocessor"></span>
00761 <span class="comment">// -----------------------------------------------------------------------</span>
00762 
<a name="l00767"></a><a class="code" href="structwxPGPaintData.htm">00767</a> <span class="keyword">struct </span><a class="code" href="structwxPGPaintData.htm">wxPGPaintData</a>
00768 {
<a name="l00770"></a><a class="code" href="structwxPGPaintData.htm#wxPGPaintDatao3">00770</a>     <a class="code" href="classwxPropertyGrid.htm">wxPropertyGrid</a>* <a class="code" href="structwxPGPaintData.htm#wxPGPaintDatao3">m_parent</a>;
00771 
<a name="l00773"></a><a class="code" href="structwxPGPaintData.htm#wxPGPaintDatao0">00773</a>     <span class="keywordtype">int</span>             <a class="code" href="structwxPGPaintData.htm#wxPGPaintDatao0">m_choiceItem</a>;
00774 
<a name="l00776"></a><a class="code" href="structwxPGPaintData.htm#wxPGPaintDatao2">00776</a>     <span class="keywordtype">int</span>             <a class="code" href="structwxPGPaintData.htm#wxPGPaintDatao2">m_drawnWidth</a>;
00777 
<a name="l00779"></a><a class="code" href="structwxPGPaintData.htm#wxPGPaintDatao1">00779</a>     <span class="keywordtype">int</span>             <a class="code" href="structwxPGPaintData.htm#wxPGPaintDatao1">m_drawnHeight</a>;
00780 
00781 };
00782 
00783 <span class="preprocessor">#if defined(_WX_WINDOW_H_BASE_) // !DOXYGEN</span>
00784 <span class="preprocessor"></span>
00785 
00786 <span class="comment">// -----------------------------------------------------------------------</span>
00787 <span class="comment">// Some property class definitions (these should be useful to inherit from).</span>
00788 <span class="comment">// -----------------------------------------------------------------------</span>
00789 
00790 wxPG_BEGIN_PROPERTY_CLASS_BODY(wxStringProperty,<a class="code" href="classwxPGProperty.htm">wxPGProperty</a>,wxString,<span class="keyword">const</span> wxString&amp;)
00791     WX_PG_DECLARE_BASIC_TYPE_METHODS()
00792     WX_PG_DECLARE_ATTRIBUTE_METHODS()
00793 wxPG_END_PROPERTY_CLASS_BODY()
00794 
00795 <span class="comment">// -----------------------------------------------------------------------</span>
00796 
00797 <span class="comment">// This provides base for wxEnumPropertyClass and any custom</span>
00798 <span class="comment">// "dynamic" enum property classes.</span>
00799 <span class="keyword">class </span>WXDLLIMPEXP_PG wxBaseEnumPropertyClass : <span class="keyword">public</span> <a class="code" href="classwxPGProperty.htm">wxPGProperty</a>
00800 {
00801 <span class="keyword">public</span>:
00802     wxBaseEnumPropertyClass( <span class="keyword">const</span> wxString&amp; label, <span class="keyword">const</span> wxString&amp; name );
00803 
00804     <span class="keyword">virtual</span> <span class="keywordtype">void</span> <a class="code" href="classwxPGProperty.htm#wxPropertyCategoryClassa8">DoSetValue</a> ( wxPGVariant value );
00805     <span class="keyword">virtual</span> wxPGVariant <a class="code" href="classwxPGProperty.htm#wxPropertyCategoryClassa6">DoGetValue</a> () <span class="keyword">const</span>;
00806     <span class="keyword">virtual</span> wxString <a class="code" href="classwxPGProperty.htm#wxPGPropertya28">GetValueAsString</a> ( <span class="keywordtype">int</span> arg_flags ) <span class="keyword">const</span>;
00807     <span class="keyword">virtual</span> <span class="keywordtype">bool</span> <a class="code" href="classwxPGProperty.htm#wxPGPropertya50">SetValueFromString</a> ( <span class="keyword">const</span> wxString&amp; text, <span class="keywordtype">int</span> arg_flags );
00808     <span class="keyword">virtual</span> <span class="keywordtype">bool</span> <a class="code" href="classwxPGProperty.htm#wxPropertyCategoryClassa63">SetValueFromInt</a> ( <span class="keywordtype">long</span> value, <span class="keywordtype">int</span> arg_flags );
00809 
00810     <span class="comment">//</span>
00811     <span class="comment">// Additional virtuals</span>
00812 
00813     <span class="comment">// This must be overridden to have non-index based value</span>
00814     <span class="keyword">virtual</span> <span class="keywordtype">int</span> GetIndexForValue( <span class="keywordtype">int</span> value ) <span class="keyword">const</span>;
00815 
00816     <span class="comment">// This returns string and value for index</span>
00817     <span class="comment">// Returns NULL if beyond last item</span>
00818     <span class="comment">// pvalue is never NULL - always set it.</span>
00819     <span class="keyword">virtual</span> <span class="keyword">const</span> wxString* GetEntry( size_t index, <span class="keywordtype">int</span>* pvalue ) <span class="keyword">const</span> = 0;
00820 
00821 <span class="keyword">protected</span>:
00822 
00823     <span class="keywordtype">int</span>                     m_index;
00824 };
00825 
00826 <span class="comment">// -----------------------------------------------------------------------</span>
00827 
00828 <span class="comment">// If set, then selection of choices is static and should not be</span>
00829 <span class="comment">// changed (i.e. returns NULL in GetPropertyChoices).</span>
00830 <span class="preprocessor">#define wxPG_PROP_STATIC_CHOICES    wxPG_PROP_CLASS_SPECIFIC_1</span>
00831 <span class="preprocessor"></span>
00832 <span class="keyword">class </span>WXDLLIMPEXP_PG wxEnumPropertyClass : <span class="keyword">public</span> wxBaseEnumPropertyClass <span class="comment">// wxPGProperty</span>
00833 {
00834     WX_PG_DECLARE_PROPERTY_CLASS()
00835 <span class="keyword">public</span>:
00836 
00837     wxEnumPropertyClass ( <span class="keyword">const</span> wxString&amp; label, <span class="keyword">const</span> wxString&amp; name, <span class="keyword">const</span> wxChar** labels,
00838         <span class="keyword">const</span> <span class="keywordtype">long</span>* values = NULL, <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> itemcount = 0, <span class="keywordtype">int</span> value = 0 );
00839     wxEnumPropertyClass ( <span class="keyword">const</span> wxString&amp; label, <span class="keyword">const</span> wxString&amp; name, 
00840         <a class="code" href="classwxPGChoices.htm">wxPGChoices</a>&amp; choices, <span class="keywordtype">int</span> value = 0 );
00841     <span class="keyword">virtual</span> ~wxEnumPropertyClass ();
00842 
00843     <span class="keyword">virtual</span> <span class="keywordtype">int</span> GetChoiceInfo ( wxPGChoiceInfo* choiceinfo );
00844     <span class="keyword">virtual</span> <span class="keywordtype">int</span> GetIndexForValue( <span class="keywordtype">int</span> value ) <span class="keyword">const</span>;
00845     <span class="keyword">virtual</span> <span class="keyword">const</span> wxString* GetEntry( size_t index, <span class="keywordtype">int</span>* pvalue ) <span class="keyword">const</span>;
00846 
00847     <span class="keyword">inline</span> size_t GetItemCount ()<span class="keyword"> const </span>{ <span class="keywordflow">return</span> m_choices-&gt;GetCount(); }
00848     <span class="keyword">inline</span> <span class="keyword">const</span> wxArrayInt&amp; GetValues()<span class="keyword"> const </span>{ <span class="keywordflow">return</span> m_choices-&gt;GetValues(); }
00849 
00850     <span class="keyword">inline</span> <a class="code" href="classwxPGChoices.htm">wxPGChoices</a>&amp; GetChoices()<span class="keyword"> const </span>{ <span class="keywordflow">return</span> *m_choices; }
00851 
00852 <span class="keyword">protected</span>:
00853     <a class="code" href="classwxPGChoices.htm">wxPGChoices</a>*          m_choices;
00854 };
00855 
00856 <span class="comment">// -----------------------------------------------------------------------</span>
00857 
00858 <span class="keyword">class </span>WXDLLIMPEXP_PG wxFlagsPropertyClass : <span class="keyword">public</span> <a class="code" href="classwxPGPropertyWithChildren.htm">wxPGPropertyWithChildren</a>
00859 {
00860     WX_PG_DECLARE_PROPERTY_CLASS()
00861 <span class="keyword">public</span>:
00862 
00863     wxFlagsPropertyClass ( <span class="keyword">const</span> wxString&amp; label, <span class="keyword">const</span> wxString&amp; name, <span class="keyword">const</span> wxChar** labels,
00864         <span class="keyword">const</span> <span class="keywordtype">long</span>* values = NULL, <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> itemcount = 0, <span class="keywordtype">long</span> value = 0 );
00865     wxFlagsPropertyClass ( <span class="keyword">const</span> wxString&amp; label, <span class="keyword">const</span> wxString&amp; name, 
00866         <a class="code" href="classwxPGChoices.htm">wxPGChoices</a>&amp; choices, <span class="keywordtype">long</span> value = 0 );
00867     <span class="keyword">virtual</span> ~wxFlagsPropertyClass ();
00868 
00869     <span class="keyword">virtual</span> <span class="keywordtype">void</span> <a class="code" href="classwxPGProperty.htm#wxPropertyCategoryClassa8">DoSetValue</a> ( wxPGVariant value );
00870     <span class="keyword">virtual</span> wxPGVariant <a class="code" href="classwxPGProperty.htm#wxPropertyCategoryClassa6">DoGetValue</a> () <span class="keyword">const</span>;
00871     <span class="keyword">virtual</span> wxString <a class="code" href="classwxPGPropertyWithChildren.htm#wxPGRootPropertyClassa34">GetValueAsString</a> ( <span class="keywordtype">int</span> arg_flags ) <span class="keyword">const</span>;
00872     <span class="keyword">virtual</span> <span class="keywordtype">bool</span> <a class="code" href="classwxPGPropertyWithChildren.htm#wxPropertyCategoryClassa64">SetValueFromString</a> ( <span class="keyword">const</span> wxString&amp; text, <span class="keywordtype">int</span> flags );
00873     <span class="keyword">virtual</span> <span class="keywordtype">void</span> <a class="code" href="classwxPGPropertyWithChildren.htm#wxPropertyCategoryClassa3">ChildChanged</a> ( <a class="code" href="classwxPGProperty.htm">wxPGProperty</a>* p );
00874     <span class="keyword">virtual</span> <span class="keywordtype">void</span> <a class="code" href="classwxPGPropertyWithChildren.htm#wxPropertyCategoryClassa54">RefreshChildren</a>();
00875 
00876     <span class="comment">// this is necessary for conveying m_choices</span>
00877     <span class="keyword">virtual</span> <span class="keywordtype">int</span> <a class="code" href="classwxPGProperty.htm#wxPropertyCategoryClassa14">GetChoiceInfo</a> ( wxPGChoiceInfo* choiceinfo );
00878 
00879     <span class="comment">// helpers</span>
00880     <span class="keyword">inline</span> size_t GetItemCount()<span class="keyword"> const </span>{ <span class="keywordflow">return</span> m_choices-&gt;GetCount(); }
00881     <span class="keyword">inline</span> <span class="keyword">const</span> wxArrayInt&amp; GetValues()<span class="keyword"> const </span>{ <span class="keywordflow">return</span> m_choices-&gt;GetValues(); }
00882     <span class="keyword">inline</span> <span class="keyword">const</span> wxString&amp; <a class="code" href="classwxPGProperty.htm#wxPropertyCategoryClassa29">GetLabel</a>( size_t ind )<span class="keyword"> const </span>{ <span class="keywordflow">return</span> m_choices-&gt;GetLabel(ind); }
00883 
00884 <span class="keyword">protected</span>:
00885     <a class="code" href="classwxPGChoices.htm">wxPGChoices</a>*          m_choices;
00886 
00887     <span class="keywordtype">long</span>                    m_value;
00888 
00889     <span class="comment">// Converts string id to a relevant bit.</span>
00890     <span class="keywordtype">long</span> IdToBit ( <span class="keyword">const</span> wxString&amp; <span class="keywordtype">id</span> ) <span class="keyword">const</span>;
00891 
00892     <span class="comment">// Creates children and sets value.</span>
00893     <span class="keywordtype">void</span> Init ( <span class="keywordtype">long</span> value );
00894 
00895 };
00896 
00897 <span class="comment">// -----------------------------------------------------------------------</span>
00898 
00899 <span class="preprocessor">#include &lt;wx/filename.h&gt;</span>
00900 
00901 <span class="comment">// Indicates first bit useable by derived properties.</span>
00902 <span class="preprocessor">#define wxPG_PROP_SHOW_FULL_FILENAME  wxPG_PROP_CLASS_SPECIFIC_1</span>
00903 <span class="preprocessor"></span>
00904 <span class="keyword">class </span>WXDLLIMPEXP_PG wxFilePropertyClass : <span class="keyword">public</span> <a class="code" href="classwxPGProperty.htm">wxPGProperty</a>
00905 {
00906     WX_PG_DECLARE_PROPERTY_CLASS()
00907 <span class="keyword">public</span>:
00908 
00909     wxFilePropertyClass ( <span class="keyword">const</span> wxString&amp; label, <span class="keyword">const</span> wxString&amp; name = wxPG_LABEL,
00910         <span class="keyword">const</span> wxString&amp; value = wxEmptyString );
00911     <span class="keyword">virtual</span> ~wxFilePropertyClass ();
00912 
00913     <span class="keyword">virtual</span> <span class="keywordtype">void</span> <a class="code" href="classwxPGProperty.htm#wxPropertyCategoryClassa8">DoSetValue</a> ( wxPGVariant value );
00914     <span class="keyword">virtual</span> wxPGVariant <a class="code" href="classwxPGProperty.htm#wxPropertyCategoryClassa6">DoGetValue</a> () <span class="keyword">const</span>;
00915     <span class="keyword">virtual</span> wxString <a class="code" href="classwxPGProperty.htm#wxPGPropertya28">GetValueAsString</a> ( <span class="keywordtype">int</span> arg_flags ) <span class="keyword">const</span>;
00916     <span class="keyword">virtual</span> <span class="keywordtype">bool</span> <a class="code" href="classwxPGProperty.htm#wxPGPropertya50">SetValueFromString</a> ( <span class="keyword">const</span> wxString&amp; text, <span class="keywordtype">int</span> flags );
00917     <span class="keyword">virtual</span> <span class="keywordtype">bool</span> <a class="code" href="classwxPGProperty.htm#wxPropertyCategoryClassa51">OnEvent</a> ( <a class="code" href="classwxPropertyGrid.htm">wxPropertyGrid</a>* propgrid, wxPGCtrlClass* wnd_primary, wxEvent&amp; event );
00918 
00919     <span class="keyword">virtual</span> <span class="keywordtype">void</span> <a class="code" href="classwxPGProperty.htm#wxPropertyCategoryClassa55">SetAttribute</a> ( <span class="keywordtype">int</span> <span class="keywordtype">id</span>, wxVariant&amp; value );
00920 
00921 <span class="preprocessor">#if wxUSE_VALIDATORS</span>
00922 <span class="preprocessor"></span>
00923     <span class="keyword">static</span> <span class="keywordtype">void</span> PrepareFilenameValidator();
00924 <span class="preprocessor">#endif</span>
00925 <span class="preprocessor"></span>
00926 <span class="keyword">protected</span>:
00927     wxString    m_wildcard;
00928     wxString    m_fnstr; <span class="comment">// needed for return value</span>
00929     wxFileName  m_filename; <span class="comment">// used as primary storage</span>
00930     <span class="keywordtype">int</span>         m_indFilter; <span class="comment">// index to the selected filter</span>
00931 };
00932 
00933 <span class="comment">// -----------------------------------------------------------------------</span>
00934 
00935 <span class="comment">//</span>
00936 <span class="comment">// In wxTextCtrl, strings a space delimited C-like strings. For example:</span>
00937 <span class="comment">// "String 1" "String 2" "String 3"</span>
00938 <span class="comment">//</span>
00939 <span class="comment">// To have " in a string, use \".</span>
00940 <span class="comment">// To have \ in a string, use \\.</span>
00941 <span class="comment">//</span>
00942 <span class="keyword">class </span>WXDLLIMPEXP_PG wxLongStringPropertyClass : <span class="keyword">public</span> <a class="code" href="classwxPGProperty.htm">wxPGProperty</a>
00943 {
00944     WX_PG_DECLARE_PROPERTY_CLASS()
00945 <span class="keyword">public</span>:
00946 
00947     wxLongStringPropertyClass ( <span class="keyword">const</span> wxString&amp; label, <span class="keyword">const</span> wxString&amp; name = wxPG_LABEL, <span class="keyword">const</span> wxString&amp; value = wxEmptyString );
00948     <span class="keyword">virtual</span> ~wxLongStringPropertyClass ();
00949 
00950     <span class="keyword">virtual</span> <span class="keywordtype">void</span> <a class="code" href="classwxPGProperty.htm#wxPropertyCategoryClassa8">DoSetValue</a> ( wxPGVariant value );
00951     <span class="keyword">virtual</span> wxPGVariant <a class="code" href="classwxPGProperty.htm#wxPropertyCategoryClassa6">DoGetValue</a> () <span class="keyword">const</span>;
00952     <span class="keyword">virtual</span> wxString <a class="code" href="classwxPGProperty.htm#wxPGPropertya28">GetValueAsString</a> ( <span class="keywordtype">int</span> arg_flags = 0 ) <span class="keyword">const</span>;
00953     <span class="keyword">virtual</span> <span class="keywordtype">bool</span> <a class="code" href="classwxPGProperty.htm#wxPGPropertya50">SetValueFromString</a> ( <span class="keyword">const</span> wxString&amp; text, <span class="keywordtype">int</span> flags );
00954     <span class="keyword">virtual</span> <span class="keywordtype">bool</span> <a class="code" href="classwxPGProperty.htm#wxPropertyCategoryClassa51">OnEvent</a> ( <a class="code" href="classwxPropertyGrid.htm">wxPropertyGrid</a>* propgrid, wxPGCtrlClass* wnd_primary, wxEvent&amp; event );
00955 
00956     <span class="comment">//  Shows string editor dialog. Value to be edited should be read from value, and</span>
00957     <span class="comment">//  if dialog is not cancelled, it should be stored back and TRUE should be returned</span>
00958     <span class="comment">//  if that was the case.</span>
00959     <span class="keyword">virtual</span> <span class="keywordtype">bool</span> OnButtonClick ( <a class="code" href="classwxPropertyGrid.htm">wxPropertyGrid</a>* propgrid, wxString&amp; value );
00960 
00961 <span class="keyword">protected</span>:
00962     wxString    m_value;
00963 };
00964 
00965 <span class="comment">// -----------------------------------------------------------------------</span>
00966 
00967 <span class="keyword">class </span>WXDLLIMPEXP_PG wxArrayStringPropertyClass : <span class="keyword">public</span> <a class="code" href="classwxPGProperty.htm">wxPGProperty</a>
00968 {
00969     WX_PG_DECLARE_PROPERTY_CLASS()
00970 <span class="keyword">public</span>:
00971 
00972     wxArrayStringPropertyClass ( <span class="keyword">const</span> wxString&amp; label, <span class="keyword">const</span> wxString&amp; name,
00973         <span class="keyword">const</span> wxArrayString&amp; value );
00974     <span class="keyword">virtual</span> ~wxArrayStringPropertyClass ();
00975 
00976     WX_PG_DECLARE_BASIC_TYPE_METHODS()
00977     WX_PG_DECLARE_EVENT_METHODS()
00978     <span class="keyword">virtual</span> <span class="keywordtype">void</span> GenerateValueAsString ();
00979 
00980     <span class="comment">//  Shows string editor dialog. Value to be edited should be read from value, and</span>
00981     <span class="comment">//  if dialog is not cancelled, it should be stored back and TRUE should be returned</span>
00982     <span class="comment">//  if that was the case.</span>
00983     <span class="keyword">virtual</span> <span class="keywordtype">bool</span> OnCustomStringEdit ( wxWindow* parent, wxString&amp; value );
00984 
00985     <span class="comment">// Helper.</span>
00986     <span class="keywordtype">bool</span> OnButtonClick ( <a class="code" href="classwxPropertyGrid.htm">wxPropertyGrid</a>* propgrid, wxPGCtrlClass* primary,
00987         <span class="keyword">const</span> wxChar* cbt );
00988 
00989 <span class="keyword">protected</span>:
00990     wxArrayString   m_value;
00991     wxString        m_display; <span class="comment">// Cache for displayed text.</span>
00992 };
00993 
00994 <span class="preprocessor">#define WX_PG_IMPLEMENT_ARRAYSTRING_PROPERTY_WITH_INIT(PROPNAME,DELIMCHAR,CUSTBUTTXT) \</span>
00995 <span class="preprocessor">class wxPG_PROPCLASS(PROPNAME) : public wxPG_PROPCLASS(wxArrayStringProperty) \</span>
00996 <span class="preprocessor">{ \</span>
00997 <span class="preprocessor">    WX_PG_DECLARE_PROPERTY_CLASS() \</span>
00998 <span class="preprocessor">public: \</span>
00999 <span class="preprocessor">    wxPG_PROPCLASS(PROPNAME) ( const wxString&amp; label, const wxString&amp; name, const wxArrayString&amp; value ); \</span>
01000 <span class="preprocessor">    ~wxPG_PROPCLASS(PROPNAME) (); \</span>
01001 <span class="preprocessor">    virtual void GenerateValueAsString (); \</span>
01002 <span class="preprocessor">    virtual bool SetValueFromString ( const wxString&amp; text, int ); \</span>
01003 <span class="preprocessor">    virtual bool OnEvent ( wxPropertyGrid* propgrid, wxPGCtrlClass* primary, wxEvent&amp; event ); \</span>
01004 <span class="preprocessor">    virtual bool OnCustomStringEdit ( wxWindow* parent, wxString&amp; value ); \</span>
01005 <span class="preprocessor">private: \</span>
01006 <span class="preprocessor">    void CustomInit(); \</span>
01007 <span class="preprocessor">}; \</span>
01008 <span class="preprocessor">WX_PG_IMPLEMENT_PROPERTY_CLASS(PROPNAME,wxArrayStringProperty,wxArrayString,const wxArrayString&amp;,TextCtrlAndButton) \</span>
01009 <span class="preprocessor">wxPG_PROPCLASS(PROPNAME)::wxPG_PROPCLASS(PROPNAME) ( const wxString&amp; label, const wxString&amp; name, const wxArrayString&amp; value ) \</span>
01010 <span class="preprocessor">    : wxPG_PROPCLASS(wxArrayStringProperty)(label,name,value) \</span>
01011 <span class="preprocessor">{ \</span>
01012 <span class="preprocessor">    CustomInit(); \</span>
01013 <span class="preprocessor">} \</span>
01014 <span class="preprocessor">wxPG_PROPCLASS(PROPNAME)::~wxPG_PROPCLASS(PROPNAME)() { } \</span>
01015 <span class="preprocessor">void wxPG_PROPCLASS(PROPNAME)::GenerateValueAsString () \</span>
01016 <span class="preprocessor">{ \</span>
01017 <span class="preprocessor">    wxChar delim_char = DELIMCHAR; \</span>
01018 <span class="preprocessor">    if ( delim_char == wxT('"') ) \</span>
01019 <span class="preprocessor">        wxPG_PROPCLASS(wxArrayStringProperty)::GenerateValueAsString(); \</span>
01020 <span class="preprocessor">    else \</span>
01021 <span class="preprocessor">        wxPropertyGrid::ArrayStringToString(m_display,m_value,0,DELIMCHAR,0); \</span>
01022 <span class="preprocessor">} \</span>
01023 <span class="preprocessor">bool wxPG_PROPCLASS(PROPNAME)::SetValueFromString ( const wxString&amp; text, int ) \</span>
01024 <span class="preprocessor">{ \</span>
01025 <span class="preprocessor">    wxChar delim_char = DELIMCHAR; \</span>
01026 <span class="preprocessor">    if ( delim_char == wxT('"') ) \</span>
01027 <span class="preprocessor">        return wxPG_PROPCLASS(wxArrayStringProperty)::SetValueFromString(text,0); \</span>
01028 <span class="preprocessor">    \</span>
01029 <span class="preprocessor">    m_value.Empty(); \</span>
01030 <span class="preprocessor">    WX_PG_TOKENIZER1_BEGIN(text,DELIMCHAR) \</span>
01031 <span class="preprocessor">        m_value.Add ( token ); \</span>
01032 <span class="preprocessor">    WX_PG_TOKENIZER1_END() \</span>
01033 <span class="preprocessor">    GenerateValueAsString(); \</span>
01034 <span class="preprocessor">    return TRUE; \</span>
01035 <span class="preprocessor">} \</span>
01036 <span class="preprocessor">bool wxPG_PROPCLASS(PROPNAME)::OnEvent ( wxPropertyGrid* propgrid, wxPGCtrlClass* primary, wxEvent&amp; event ) \</span>
01037 <span class="preprocessor">{ \</span>
01038 <span class="preprocessor">    if ( event.GetEventType() == wxEVT_COMMAND_BUTTON_CLICKED ) \</span>
01039 <span class="preprocessor">        return OnButtonClick(propgrid,primary,(const wxChar*) CUSTBUTTXT); \</span>
01040 <span class="preprocessor">    return FALSE; \</span>
01041 <span class="preprocessor">}</span>
01042 <span class="preprocessor"></span>
01043 <span class="preprocessor">#define WX_PG_IMPLEMENT_ARRAYSTRING_PROPERTY(PROPNAME,DELIMCHAR,CUSTBUTTXT) \</span>
01044 <span class="preprocessor">WX_PG_IMPLEMENT_ARRAYSTRING_PROPERTY_WITH_INIT(PROPNAME,DELIMCHAR,CUSTBUTTXT) \</span>
01045 <span class="preprocessor">void wxPG_PROPCLASS(PROPNAME)::CustomInit() { }</span>
01046 <span class="preprocessor"></span>
01047 <span class="comment">// -----------------------------------------------------------------------</span>
01048 <span class="comment">// wxArrayEditorDialog</span>
01049 <span class="comment">// -----------------------------------------------------------------------</span>
01050 
01051 <span class="preprocessor">#include &lt;wx/textctrl.h&gt;</span>
01052 <span class="preprocessor">#include &lt;wx/button.h&gt;</span>
01053 <span class="preprocessor">#include &lt;wx/listbox.h&gt;</span>
01054 
01055 <span class="preprocessor">#define wxAEDIALOG_STYLE \</span>
01056 <span class="preprocessor">    (wxDEFAULT_DIALOG_STYLE | wxRESIZE_BORDER | wxOK | wxCANCEL | wxCENTRE)</span>
01057 <span class="preprocessor"></span>
01058 <span class="keyword">class </span>WXDLLIMPEXP_PG wxArrayEditorDialog : <span class="keyword">public</span> wxDialog
01059 {
01060 <span class="keyword">public</span>:
01061     wxArrayEditorDialog();
01062 
01063     <span class="keywordtype">void</span> Init();
01064 
01065     wxArrayEditorDialog(wxWindow *parent,
01066                               <span class="keyword">const</span> wxString&amp; message,
01067                               <span class="keyword">const</span> wxString&amp; caption,
01068                               <span class="keywordtype">long</span> style = wxAEDIALOG_STYLE,
01069                               <span class="keyword">const</span> wxPoint&amp; pos = wxDefaultPosition,
01070                               <span class="keyword">const</span> wxSize&amp; sz = wxDefaultSize );
01071 
01072     <span class="keywordtype">bool</span> Create(wxWindow *parent,
01073                 <span class="keyword">const</span> wxString&amp; message,
01074                 <span class="keyword">const</span> wxString&amp; caption,
01075                 <span class="keywordtype">long</span> style = wxAEDIALOG_STYLE,
01076                 <span class="keyword">const</span> wxPoint&amp; pos = wxDefaultPosition,
01077                 <span class="keyword">const</span> wxSize&amp; sz = wxDefaultSize );
01078 
01079     <span class="comment">/*</span>
01080 <span class="comment">    inline void SetCustomButton ( const wxChar* custBtText, wxArrayStringPropertyClass* pcc )</span>
01081 <span class="comment">    {</span>
01082 <span class="comment">        m_custBtText = custBtText;</span>
01083 <span class="comment">        m_pCallingClass = pcc;</span>
01084 <span class="comment">    }*/</span>
01085 
01086     <span class="comment">// Returns TRUE if array was actually modified</span>
01087     <span class="keywordtype">bool</span> IsModified()<span class="keyword"> const </span>{ <span class="keywordflow">return</span> m_modified; }
01088 
01089     <span class="comment">//const wxArrayString&amp; GetStrings() const { return m_array; }</span>
01090 
01091     <span class="comment">// implementation from now on</span>
01092     <span class="keywordtype">void</span> OnUpdateClick(wxCommandEvent&amp; event);
01093     <span class="keywordtype">void</span> OnAddClick(wxCommandEvent&amp; event);
01094     <span class="keywordtype">void</span> OnDeleteClick(wxCommandEvent&amp; event);
01095     <span class="keywordtype">void</span> OnListBoxClick(wxCommandEvent&amp; event);
01096     <span class="keywordtype">void</span> OnUpClick(wxCommandEvent&amp; event);
01097     <span class="keywordtype">void</span> OnDownClick(wxCommandEvent&amp; event);
01098     <span class="comment">//void OnCustomEditClick(wxCommandEvent&amp; event);</span>
01099     <span class="keywordtype">void</span> OnIdle(wxIdleEvent&amp; event);
01100 
01101 <span class="keyword">protected</span>:
01102     wxTextCtrl*     m_edValue;
01103     wxListBox*      m_lbStrings;
01104 
01105     wxButton*       m_butAdd;       <span class="comment">// Button pointers</span>
01106     wxButton*       m_butCustom;    <span class="comment">// required for disabling/enabling changing.</span>
01107     wxButton*       m_butUpdate;
01108     wxButton*       m_butRemove;
01109     wxButton*       m_butUp;
01110     wxButton*       m_butDown;
01111 
01112     <span class="comment">//wxArrayString   m_array;</span>
01113 
01114     <span class="keyword">const</span> wxChar*   m_custBtText;
01115     <span class="comment">//wxArrayStringPropertyClass*     m_pCallingClass;</span>
01116 
01117     <span class="keywordtype">bool</span>            m_modified;
01118 
01119     <span class="keywordtype">unsigned</span> <span class="keywordtype">char</span>   m_curFocus;
01120 
01121     <span class="comment">// These must be overridden - must return TRUE on success.</span>
01122     <span class="keyword">virtual</span> wxString ArrayGet( size_t index ) = 0;
01123     <span class="keyword">virtual</span> size_t ArrayGetCount() = 0;
01124     <span class="keyword">virtual</span> <span class="keywordtype">bool</span> ArrayInsert( <span class="keyword">const</span> wxString&amp; str, <span class="keywordtype">int</span> index ) = 0;
01125     <span class="keyword">virtual</span> <span class="keywordtype">bool</span> ArraySet( size_t index, <span class="keyword">const</span> wxString&amp; str ) = 0;
01126     <span class="keyword">virtual</span> <span class="keywordtype">void</span> ArrayRemoveAt( <span class="keywordtype">int</span> index ) = 0;
01127     <span class="keyword">virtual</span> <span class="keywordtype">void</span> ArraySwap( size_t first, size_t second ) = 0;
01128 
01129 <span class="keyword">private</span>:
01130     DECLARE_DYNAMIC_CLASS_NO_COPY(wxArrayEditorDialog)
01131     DECLARE_EVENT_TABLE()
01132 };
01133 
01134 <span class="comment">// -----------------------------------------------------------------------</span>
01135 
01136 
01141 <span class="keyword">class </span>wxParentPropertyClass : <span class="keyword">public</span> <a class="code" href="classwxPGPropertyWithChildren.htm">wxPGPropertyWithChildren</a>
01142 {
01143     WX_PG_DECLARE_PROPERTY_CLASS()
01144 <span class="keyword">public</span>:
01145 
01146     wxParentPropertyClass ( <span class="keyword">const</span> wxString&amp; label, <span class="keyword">const</span> wxString&amp; name = wxPG_LABEL );
01147     <span class="keyword">virtual</span> ~wxParentPropertyClass ();
01148 
01149     <span class="keyword">virtual</span> <span class="keywordtype">void</span> <a class="code" href="classwxPGProperty.htm#wxPropertyCategoryClassa8">DoSetValue</a> ( wxPGVariant value );
01150     <span class="keyword">virtual</span> wxPGVariant <a class="code" href="classwxPGProperty.htm#wxPropertyCategoryClassa6">DoGetValue</a> () <span class="keyword">const</span>;
01151     <span class="keyword">virtual</span> <span class="keywordtype">void</span> <a class="code" href="classwxPGPropertyWithChildren.htm#wxPropertyCategoryClassa3">ChildChanged</a> ( <a class="code" href="classwxPGProperty.htm">wxPGProperty</a>* p );
01152 
01153 <span class="keyword">protected</span>:
01154     wxString    m_string;
01155 };
01156 
01157 
01158 <span class="comment">// -----------------------------------------------------------------------</span>
01159 
01174 <span class="keyword">class </span>wxCustomPropertyClass : <span class="keyword">public</span> <a class="code" href="classwxPGPropertyWithChildren.htm">wxPGPropertyWithChildren</a>
01175 {
01176     WX_PG_DECLARE_PROPERTY_CLASS()
01177 <span class="keyword">public</span>:
01178 
01179     wxCustomPropertyClass ( <span class="keyword">const</span> wxString&amp; label, <span class="keyword">const</span> wxString&amp; name = wxPG_LABEL );
01180     <span class="keyword">virtual</span> ~wxCustomPropertyClass ();
01181 
01182     <span class="keyword">virtual</span> <span class="keywordtype">void</span> <a class="code" href="classwxPGProperty.htm#wxPropertyCategoryClassa8">DoSetValue</a> ( wxPGVariant value );
01183     <span class="keyword">virtual</span> wxPGVariant <a class="code" href="classwxPGProperty.htm#wxPropertyCategoryClassa6">DoGetValue</a> () <span class="keyword">const</span>;
01184     <span class="keyword">virtual</span> <span class="keywordtype">bool</span> <a class="code" href="classwxPGPropertyWithChildren.htm#wxPropertyCategoryClassa64">SetValueFromString</a> ( <span class="keyword">const</span> wxString&amp; text, <span class="keywordtype">int</span> flags );
01185     <span class="keyword">virtual</span> wxString <a class="code" href="classwxPGPropertyWithChildren.htm#wxPGRootPropertyClassa34">GetValueAsString</a> ( <span class="keywordtype">int</span> arg_flags ) <span class="keyword">const</span>;
01186 
01187 <span class="preprocessor">#ifdef wxPG_COMPATIBILITY_1_0_0</span>
01188 <span class="preprocessor"></span>    <span class="keyword">virtual</span> <span class="keywordtype">bool</span> <a class="code" href="classwxPGProperty.htm#wxPropertyCategoryClassa51">OnEvent</a> ( <a class="code" href="classwxPropertyGrid.htm">wxPropertyGrid</a>* propgrid, wxPGCtrlClass* primary, wxEvent&amp; event );
01189 <span class="preprocessor">#endif</span>
01190 <span class="preprocessor"></span>
01191     <span class="keyword">virtual</span> <span class="keywordtype">bool</span> <a class="code" href="classwxPGProperty.htm#wxPropertyCategoryClassa63">SetValueFromInt</a> ( <span class="keywordtype">long</span> value, <span class="keywordtype">int</span> );
01192     <span class="keyword">virtual</span> <span class="keywordtype">int</span> <a class="code" href="classwxPGProperty.htm#wxPropertyCategoryClassa14">GetChoiceInfo</a> ( wxPGChoiceInfo* choiceinfo );
01193 
01194     <span class="keyword">virtual</span> <span class="keywordtype">void</span> <a class="code" href="classwxPGProperty.htm#wxPropertyCategoryClassa55">SetAttribute</a> ( <span class="keywordtype">int</span> <span class="keywordtype">id</span>, wxVariant&amp; value );
01195 
01196 <span class="keyword">protected</span>:
01197     <a class="code" href="classwxPGChoices.htm">wxPGChoices</a>*            m_choices;
01198 <span class="preprocessor">#ifdef wxPG_COMPATIBILITY_1_0_0</span>
01199 <span class="preprocessor"></span>    wxPGEditor*             m_editor;
01200     wxBitmap*               m_bitmap;
01201     <a class="code" href="group__miscellaneous.htm#ga0">wxPropertyGridCallback</a>  m_callback;
01202 <span class="preprocessor">#endif</span>
01203 <span class="preprocessor"></span>    <a class="code" href="group__miscellaneous.htm#ga1">wxPGPaintCallback</a>       m_paintCallback;
01204 
01205     wxString                m_value;
01206 };
01207 
01208 <span class="comment">// -----------------------------------------------------------------------</span>
01209 
01210 <span class="comment">//</span>
01211 <span class="comment">// Tokenizer macros.</span>
01212 <span class="comment">// NOTE: I have made two versions - worse ones (performance and consistency</span>
01213 <span class="comment">//   wise) use wxStringTokenizer and better ones (may have unfound bugs)</span>
01214 <span class="comment">//   use custom code.</span>
01215 <span class="comment">//</span>
01216 
01217 <span class="preprocessor">#include &lt;wx/tokenzr.h&gt;</span>
01218 
01219 <span class="comment">// TOKENIZER1 can be done with wxStringTokenizer</span>
01220 <span class="preprocessor">#define WX_PG_TOKENIZER1_BEGIN(WXSTRING,DELIMITER) \</span>
01221 <span class="preprocessor">    wxStringTokenizer tkz(WXSTRING,DELIMITER,wxTOKEN_RET_EMPTY); \</span>
01222 <span class="preprocessor">    while ( tkz.HasMoreTokens() ) \</span>
01223 <span class="preprocessor">    { \</span>
01224 <span class="preprocessor">        wxString token = tkz.GetNextToken(); \</span>
01225 <span class="preprocessor">        token.Trim(TRUE); \</span>
01226 <span class="preprocessor">        token.Trim(FALSE);</span>
01227 <span class="preprocessor"></span>
01228 <span class="preprocessor">#define WX_PG_TOKENIZER1_END() \</span>
01229 <span class="preprocessor">    }</span>
01230 <span class="preprocessor"></span>
01231 
01232 <span class="comment">/*#define WX_PG_TOKENIZER1_BEGIN(WXSTRING,DELIMITER) \</span>
01233 <span class="comment">    const wxChar* ptr = WXSTRING.c_str(); \</span>
01234 <span class="comment">    wxString token; \</span>
01235 <span class="comment">    const wxChar* token_start = NULL; \</span>
01236 <span class="comment">    wxChar a = 0; \</span>
01237 <span class="comment">    do \</span>
01238 <span class="comment">    { \</span>
01239 <span class="comment">        a = *ptr; \</span>
01240 <span class="comment">        while ( a == ' ' ) { ptr++; a = *ptr; } \</span>
01241 <span class="comment">        token_start = ptr; \</span>
01242 <span class="comment">        while ( a != DELIMITER &amp;&amp; a != 0 ) { ptr++; a = *ptr; } \</span>
01243 <span class="comment">        if ( ptr &gt; token_start ) \</span>
01244 <span class="comment">        { \</span>
01245 <span class="comment">            unsigned int str_len = ptr-token_start; \</span>
01246 <span class="comment">            wxChar* store_ptr = token.GetWriteBuf ( str_len+1 ); \</span>
01247 <span class="comment">            wxTmemcpy ( store_ptr, token_start, str_len ); \</span>
01248 <span class="comment">            store_ptr[str_len] = 0; \</span>
01249 <span class="comment">            token.UngetWriteBuf ( str_len ); \</span>
01250 <span class="comment">            token.Trim(); \</span>
01251 <span class="comment">        } \</span>
01252 <span class="comment">        else \</span>
01253 <span class="comment">            token.Empty();</span>
01254 <span class="comment"></span>
01255 <span class="comment">#define WX_PG_TOKENIZER1_END() \</span>
01256 <span class="comment">        ptr++; \</span>
01257 <span class="comment">    } while ( a );*/</span>
01258 
01259 <span class="comment">/*</span>
01260 <span class="comment"></span>
01261 <span class="comment">#define WX_PG_TOKENIZER2_BEGIN(WXSTRING,DELIMITER) \</span>
01262 <span class="comment">    wxStringTokenizer tkz(WXSTRING,DELIMITER,wxTOKEN_RET_EMPTY); \</span>
01263 <span class="comment">    int phase = 0; \</span>
01264 <span class="comment">    while ( tkz.HasMoreTokens() ) \</span>
01265 <span class="comment">    { \</span>
01266 <span class="comment">        wxString token = tkz.GetNextToken(); \</span>
01267 <span class="comment">        if ( phase != 0 ) \</span>
01268 <span class="comment">        {</span>
01269 <span class="comment"></span>
01270 <span class="comment">#define WX_PG_TOKENIZER2_END() \</span>
01271 <span class="comment">            phase = -1; \</span>
01272 <span class="comment">        } \</span>
01273 <span class="comment">        phase += 1; \</span>
01274 <span class="comment">    }</span>
01275 <span class="comment"></span>
01276 <span class="comment">*/</span>
01277 
01278 <span class="comment">//</span>
01279 <span class="comment">// 2nd version: tokens are surrounded by DELIMITERs (for example, C-style strings).</span>
01280 <span class="comment">// TOKENIZER2 must use custom code (a class) for full compliancy</span>
01281 <span class="comment">// with " surrounded strings with \" inside.</span>
01282 <span class="comment">//</span>
01283 <span class="comment">// class implementation is in propgrid.cpp</span>
01284 <span class="comment">//</span>
01285 
01286 <span class="keyword">class </span>WXDLLIMPEXP_PG wxPGStringTokenizer
01287 {
01288 <span class="keyword">public</span>:
01289     wxPGStringTokenizer( <span class="keyword">const</span> wxString&amp; str, wxChar delimeter );
01290     ~wxPGStringTokenizer();
01291 
01292     <span class="keywordtype">bool</span> HasMoreTokens(); <span class="comment">// not const so we can do some stuff in it</span>
01293     wxString GetNextToken();
01294 
01295 <span class="keyword">protected</span>:
01296 
01297     <span class="keyword">const</span> wxString* m_str;
01298     <span class="keyword">const</span> wxChar*   m_curPos;
01299 <span class="preprocessor">#if wxUSE_STL</span>
01300 <span class="preprocessor"></span>    <span class="comment">//wxString        m_buffer;</span>
01301 <span class="preprocessor">#endif</span>
01302 <span class="preprocessor"></span>    wxString        m_readyToken;
01303     wxChar          m_delimeter;
01304 };
01305 
01306 <span class="preprocessor">#define WX_PG_TOKENIZER2_BEGIN(WXSTRING,DELIMITER) \</span>
01307 <span class="preprocessor">    wxPGStringTokenizer tkz(WXSTRING,DELIMITER); \</span>
01308 <span class="preprocessor">    while ( tkz.HasMoreTokens() ) \</span>
01309 <span class="preprocessor">    { \</span>
01310 <span class="preprocessor">        wxString token = tkz.GetNextToken();</span>
01311 <span class="preprocessor"></span>
01312 <span class="preprocessor">#define WX_PG_TOKENIZER2_END() \</span>
01313 <span class="preprocessor">    }</span>
01314 <span class="preprocessor"></span>
01315 <span class="comment">/*</span>
01316 <span class="comment">#if wxUSE_STL</span>
01317 <span class="comment"></span>
01318 <span class="comment">// 2nd version: tokens are surrounded by DELIMITERs (for example, C-style strings).</span>
01319 <span class="comment">// TOKENIZER2 must use custom code for full compliancy</span>
01320 <span class="comment">// with " surrounded strings with \" inside.</span>
01321 <span class="comment">#define WX_PG_TOKENIZER2_BEGIN(WXSTRING,DELIMITER) \</span>
01322 <span class="comment">    const wxChar* ptr = WXSTRING.c_str(); \</span>
01323 <span class="comment">    wxString token; \</span>
01324 <span class="comment">    wxStringBuffer strbuf(token,2048); \</span>
01325 <span class="comment">    wxChar* store_ptr_start = NULL; \</span>
01326 <span class="comment">    wxChar* store_ptr = NULL; \</span>
01327 <span class="comment">    wxChar a = *ptr; \</span>
01328 <span class="comment">    wxChar prev_a = 0; \</span>
01329 <span class="comment">    while ( a ) \</span>
01330 <span class="comment">    { \</span>
01331 <span class="comment">        if ( !store_ptr_start ) \</span>
01332 <span class="comment">        { \</span>
01333 <span class="comment">            if ( a == DELIMITER ) \</span>
01334 <span class="comment">            { \</span>
01335 <span class="comment">                store_ptr_start = store_ptr = strbuf; \</span>
01336 <span class="comment">                prev_a = 0; \</span>
01337 <span class="comment">            } \</span>
01338 <span class="comment">        } \</span>
01339 <span class="comment">        else \</span>
01340 <span class="comment">        { \</span>
01341 <span class="comment">            if ( prev_a != wxT('\\') ) \</span>
01342 <span class="comment">            { \</span>
01343 <span class="comment">                if ( a != DELIMITER ) \</span>
01344 <span class="comment">                { \</span>
01345 <span class="comment">                    if ( a != wxT('\\') ) \</span>
01346 <span class="comment">                    { \</span>
01347 <span class="comment">                        *store_ptr = a; \</span>
01348 <span class="comment">                        store_ptr++; \</span>
01349 <span class="comment">                    } \</span>
01350 <span class="comment">                } \</span>
01351 <span class="comment">                else \</span>
01352 <span class="comment">                { \</span>
01353 <span class="comment">                    *store_ptr = 0; \</span>
01354 <span class="comment">                    wxASSERT ( (store_ptr-store_ptr_start) &lt; 2048 );</span>
01355 <span class="comment"></span>
01356 <span class="comment">#define WX_PG_TOKENIZER2_END() \</span>
01357 <span class="comment">                    store_ptr_start = NULL; \</span>
01358 <span class="comment">                } \</span>
01359 <span class="comment">                prev_a = a; \</span>
01360 <span class="comment">            } \</span>
01361 <span class="comment">            else \</span>
01362 <span class="comment">            { \</span>
01363 <span class="comment">                *store_ptr = a; \</span>
01364 <span class="comment">                store_ptr++; \</span>
01365 <span class="comment">                prev_a = 0; \</span>
01366 <span class="comment">            } \</span>
01367 <span class="comment">        } \</span>
01368 <span class="comment">        ptr++; \</span>
01369 <span class="comment">        a = *ptr; \</span>
01370 <span class="comment">    }</span>
01371 <span class="comment"></span>
01372 <span class="comment"></span>
01373 <span class="comment">#else // wxUSE_STL</span>
01374 <span class="comment"></span>
01375 <span class="comment">//</span>
01376 <span class="comment">// NON USE_STL COMPLIANT VERSION</span>
01377 <span class="comment">//</span>
01378 <span class="comment">// 2nd version: tokens are surrounded by DELIMITERs (for example, C-style strings).</span>
01379 <span class="comment">// TOKENIZER2 must use custom code for full compliancy</span>
01380 <span class="comment">// with " surrounded strings with \" inside.</span>
01381 <span class="comment">#define WX_PG_TOKENIZER2_BEGIN(WXSTRING,DELIMITER) \</span>
01382 <span class="comment">    const wxChar* ptr = WXSTRING.c_str(); \</span>
01383 <span class="comment">    const wxChar* ptr_end = &amp;ptr[WXSTRING.length()]; \</span>
01384 <span class="comment">    wxString token; \</span>
01385 <span class="comment">    wxChar* store_ptr_start = NULL; \</span>
01386 <span class="comment">    wxChar* store_ptr = NULL; \</span>
01387 <span class="comment">    wxChar a = *ptr; \</span>
01388 <span class="comment">    wxChar prev_a = 0; \</span>
01389 <span class="comment">    while ( a ) \</span>
01390 <span class="comment">    { \</span>
01391 <span class="comment">        if ( !store_ptr_start ) \</span>
01392 <span class="comment">        { \</span>
01393 <span class="comment">            if ( a == DELIMITER ) \</span>
01394 <span class="comment">            { \</span>
01395 <span class="comment">                store_ptr_start = store_ptr = token.GetWriteBuf ( ptr_end-ptr+1 ); \</span>
01396 <span class="comment">                prev_a = 0; \</span>
01397 <span class="comment">            } \</span>
01398 <span class="comment">        } \</span>
01399 <span class="comment">        else \</span>
01400 <span class="comment">        { \</span>
01401 <span class="comment">            if ( prev_a != wxT('\\') ) \</span>
01402 <span class="comment">            { \</span>
01403 <span class="comment">                if ( a != DELIMITER ) \</span>
01404 <span class="comment">                { \</span>
01405 <span class="comment">                    if ( a != wxT('\\') ) \</span>
01406 <span class="comment">                    { \</span>
01407 <span class="comment">                        *store_ptr = a; \</span>
01408 <span class="comment">                        store_ptr++; \</span>
01409 <span class="comment">                    } \</span>
01410 <span class="comment">                } \</span>
01411 <span class="comment">                else \</span>
01412 <span class="comment">                { \</span>
01413 <span class="comment">                    *store_ptr = 0; \</span>
01414 <span class="comment">                    token.UngetWriteBuf ( store_ptr-store_ptr_start ); \</span>
01415 <span class="comment"></span>
01416 <span class="comment">#define WX_PG_TOKENIZER2_END() \</span>
01417 <span class="comment">                    store_ptr_start = NULL; \</span>
01418 <span class="comment">                } \</span>
01419 <span class="comment">                prev_a = a; \</span>
01420 <span class="comment">            } \</span>
01421 <span class="comment">            else \</span>
01422 <span class="comment">            { \</span>
01423 <span class="comment">                *store_ptr = a; \</span>
01424 <span class="comment">                store_ptr++; \</span>
01425 <span class="comment">                prev_a = 0; \</span>
01426 <span class="comment">            } \</span>
01427 <span class="comment">        } \</span>
01428 <span class="comment">        ptr++; \</span>
01429 <span class="comment">        a = *ptr; \</span>
01430 <span class="comment">    } \</span>
01431 <span class="comment">    if ( store_ptr_start ) \</span>
01432 <span class="comment">        token.UngetWriteBuf ( store_ptr-store_ptr_start );</span>
01433 <span class="comment"></span>
01434 <span class="comment">#endif // !wxUSE_STL</span>
01435 <span class="comment"></span>
01436 <span class="comment">*/</span>
01437 <span class="comment">// -----------------------------------------------------------------------</span>
01438 
01439 <span class="preprocessor">#endif // !DOXYGEN</span>
01440 <span class="preprocessor"></span>
01441 <span class="preprocessor">#endif // _WX_PROPGRID_PROPDEV_H_</span>
</pre></div><hr size="1"><address style="align: right;"><small>Generated on Tue May 3 19:33:41 2005 for wxPropertyGrid by
<a href="http://www.doxygen.org/index.html">
<img src="doxygen.png" alt="doxygen" align="middle" border=0 > 
</a>1.3.6 </small></address>
</body>
</html>
