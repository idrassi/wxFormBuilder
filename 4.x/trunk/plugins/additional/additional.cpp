///////////////////////////////////////////////////////////////////////////////
//
// wxFormBuilder - A Visual Dialog Editor for wxWidgets.
// Copyright (C) 2005 José Antonio Hurtado
//
// This program is free software; you can redistribute it and/or
// modify it under the terms of the GNU General Public License
// as published by the Free Software Foundation; either version 2
// of the License, or (at your option) any later version.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with this program; if not, write to the Free Software
// Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA  02111-1307, USA.
//
// Written by
//   José Antonio Hurtado - joseantonio.hurtado@gmail.com
//   Juan Antonio Ortega  - jortegalalmolda@gmail.com
//
///////////////////////////////////////////////////////////////////////////////

#include <component.h>
#include <plugin.h>
#include <xrcconv.h>
#include <ticpp.h>

#include <wx/arrstr.h>
#include <wx/bmpcbox.h>
#include <wx/calctrl.h>
#include <wx/checklst.h>
#include <wx/dataview.h>
#include <wx/dirctrl.h>
#include <wx/hyperlink.h>
#include <wx/htmllbox.h>
#include <wx/imaglist.h>
#include <wx/scrolbar.h>
#include <wx/spinbutt.h>
#include <wx/spinctrl.h>
#include <wx/srchctrl.h>
#include <wx/treectrl.h>
#include <wx/html/htmlwin.h>

#include "smiley.xpm"

/**
Event handler for events generated by controls in this plugin
*/
class ComponentEvtHandler : public wxEvtHandler
{
private:
	wxWindow* m_window;
	IManager* m_manager;

public:
	ComponentEvtHandler( wxWindow* win, IManager* manager )
	:
	m_window( win ),
	m_manager( manager ) {}

protected:
	void OnText( wxCommandEvent& event ); 					// wxSearchCtrl
	void OnGenericDirCtrlExpandItem( wxTreeEvent& event );
	//void OnColClick( wxDataViewEvent& event );
	//void OnColEndDrag( wxDataViewEvent& event );
	//void OnLeftDClick( wxDataViewEvent& event );
	DECLARE_EVENT_TABLE()
};

BEGIN_EVENT_TABLE( ComponentEvtHandler, wxEvtHandler )
	EVT_TEXT( wxID_ANY, ComponentEvtHandler::OnText )
END_EVENT_TABLE()

/**
Event handler for events generated by wxGenericDirCtrl.
*/
class GenericDirCtrlEvtHandler : public wxEvtHandler
{
public:
	GenericDirCtrlEvtHandler( wxWindow* win, IManager* manager )
	:
	m_window( win ),
	m_manager( manager ) {}
	
protected:
	void OnGenericDirCtrlLeftClick( wxMouseEvent& event );
	DECLARE_EVENT_TABLE()

private:
	wxWindow* m_window;
	IManager* m_manager;
};

BEGIN_EVENT_TABLE( GenericDirCtrlEvtHandler, wxEvtHandler )
	// GenericDirCtrl also seems to ignore clicks
	EVT_LEFT_DOWN( GenericDirCtrlEvtHandler::OnGenericDirCtrlLeftClick )
END_EVENT_TABLE()

///////////////////////////////////////////////////////////////////////////////
class BitmapComboBoxComponent : public ComponentBase
{
public:
	wxObject* Create(IObject *obj, wxObject *parent)
	{
		wxBitmapComboBox *bcombo = new wxBitmapComboBox((wxWindow *)parent,-1,
			obj->GetPropertyAsString(_("value")),
			obj->GetPropertyAsPoint(_("pos")),
			obj->GetPropertyAsSize(_("size")),
			0,
			NULL,
			obj->GetPropertyAsInteger(_("style")) | obj->GetPropertyAsInteger(_("window_style")));

		// choices
		wxArrayString choices = obj->GetPropertyAsArrayString(_("choices"));
		for (unsigned int i=0; i<choices.Count(); i++)
		{
			wxImage img(choices[i].BeforeFirst(wxChar(58)));
			bcombo->Append(choices[i].AfterFirst(wxChar(58)), wxBitmap(img));
		}
			
		return bcombo;
	}
	
	ticpp::Element* ExportToXrc(IObject *obj)
	{
		ObjectToXrcFilter xrc(obj, _("wxBitmapComboBox"), obj->GetPropertyAsString(_("name")));
		xrc.AddWindowProperties();
		xrc.AddProperty(_("value"),_("value"),XRC_TYPE_TEXT);
		xrc.AddProperty(_("choices"),_("content"),XRC_TYPE_STRINGLIST);
		return xrc.GetXrcObject();
	}

	ticpp::Element* ImportFromXrc( ticpp::Element* xrcObj )
	{
		XrcToXfbFilter filter(xrcObj, _("wxBitmapComboBox"));
		filter.AddWindowProperties();
		filter.AddProperty(_("value"),_("value"),XRC_TYPE_TEXT);
		filter.AddProperty(_("content"),_("choices"),XRC_TYPE_STRINGLIST);
		return filter.GetXfbObject();
	}
};

class CalendarCtrlComponent : public ComponentBase
{
public:
	wxObject* Create(IObject *obj, wxObject *parent)
	{
		return new wxCalendarCtrl( (wxWindow *)parent, -1,
									wxDefaultDateTime,
									obj->GetPropertyAsPoint("pos"),
									obj->GetPropertyAsSize("size"),
									obj->GetPropertyAsInteger("style") |
									obj->GetPropertyAsInteger("window_style") );
	}

	ticpp::Element* ExportToXrc(IObject *obj)
	{
		ObjectToXrcFilter xrc( obj, "wxCalendarCtrl", obj->GetPropertyAsString("name") );
		xrc.AddWindowProperties();
		return xrc.GetXrcObject();
	}

	ticpp::Element* ImportFromXrc( ticpp::Element* xrcObj )
	{
		XrcToXfbFilter filter( xrcObj, "wxCalendarCtrl" );
		filter.AddWindowProperties();
		return filter.GetXfbObject();
	}
};

class CheckListBoxComponent : public ComponentBase
{
public:

	wxObject* Create(IObject *obj, wxObject *parent)
	{
		wxArrayString choices ( obj->GetPropertyAsArrayString("choices") );
		wxCheckListBox *cl =
			new wxCheckListBox(	(wxWindow *)parent, -1,
								obj->GetPropertyAsPoint("pos"),
								obj->GetPropertyAsSize("size"), choices,
								obj->GetPropertyAsInteger("style") |
								obj->GetPropertyAsInteger("window_style") );
		return cl;
	}
	
	virtual void Cleanup( wxObject* obj )
    {
    }


	ticpp::Element* ExportToXrc(IObject *obj)
	{
		ObjectToXrcFilter xrc( obj, "wxCheckListBox", obj->GetPropertyAsString("name") );
		xrc.AddWindowProperties();
		xrc.AddProperty( "choices", "content", XRC_TYPE_STRINGLIST );
		return xrc.GetXrcObject();
	}

	ticpp::Element* ImportFromXrc( ticpp::Element* xrcObj )
	{
		XrcToXfbFilter filter( xrcObj, "wxCheckListBox" );
		filter.AddWindowProperties();
		filter.AddProperty( "content", "choices", XRC_TYPE_STRINGLIST );
		return filter.GetXfbObject();
	}
};

class DataViewCtrlComponent : public ComponentBase
{
public:
	wxObject* Create( IObject *obj, wxObject *parent )
	{
/*
		wxDataViewCtrl *dv = new wxDataViewCtrl((wxWindow *)parent, -1,
												obj->GetPropertyAsPoint("pos"),
												obj->GetPropertyAsSize("size"),
												obj->GetPropertyAsInteger("style") |
												obj->GetPropertyAsInteger("window_style") );
        return dv;
*/
		wxLog::EnableLogging(false);
		int style = obj->GetPropertyAsInteger("style");

		wxDataViewTreeCtrl* tc =
				new wxDataViewTreeCtrl( (wxWindow *) parent, wxID_ANY,
										obj->GetPropertyAsPoint("pos"),
										obj->GetPropertyAsSize("size"), style );

		wxImageList *ilist = new wxImageList( 16, 16 );
		ilist->Add( wxIcon(smiley_xpm) );
		tc->SetImageList( ilist );

		wxDataViewItem item =
			tc->AppendContainer( wxDataViewItem(0), _("The Root"), 0 );
			tc->AppendItem( item, _("Child 1"), 0 );
			tc->AppendItem( item, _("Child 2"), 0 );
			tc->AppendItem( item, _("Child 3, very long, long, long, long"), 0 );

		wxDataViewItem cont =
			tc->AppendContainer( item, "Container child", 0 );
			tc->AppendItem( cont, _("Child 4"), 0 );
			tc->AppendItem( cont, _("Child 5"), 0 );

		tc->Expand(cont);

		return tc;
	}
/*
	ticpp::Element* ExportToXrc( IObject *obj )
	{
		ObjectToXrcFilter xrc( obj, "wxDataViewCtrl", obj->GetPropertyAsString("name") );
		xrc.AddWindowProperties();
		return xrc.GetXrcObject();
	}

	ticpp::Element* ImportFromXrc( ticpp::Element* xrcObj )
	{
		XrcToXfbFilter filter( xrcObj, "wxDataViewCtrl" );
		filter.AddWindowProperties();
		return filter.GetXfbObject();
	}
*/
};

class DataViewColumnComponent : public ComponentBase
{
public:
	void OnCreated( wxObject* wxobject, wxWindow* wxparent )
	{
		// Easy read-only property access
		IObject* obj = GetManager()->GetIObject( wxobject );
		wxDataViewCtrl* dataView = wxDynamicCast( wxparent, wxDataViewCtrl );

		// Error checking
		if ( !( obj && dataView ) )
		{
			wxLogError( _("DataViewColumnComponent is missing its wxFormBuilder object(%i) or its parent(%i)"), obj,dataView );
			return;
		}
		
		wxString renderer = obj->GetPropertyAsString("flags");
		
		if( renderer == "wxDataViewTextRenderer" )
		{
			dataView->AppendTextColumn( _("Column with strings"), 0, wxDATAVIEW_CELL_INERT );
		}
		else if( renderer == "wxDataViewIconTextRenderer" )
		{
			dataView->AppendIconTextColumn( _("Column with icons"), 0, wxDATAVIEW_CELL_INERT );
		}
		else if( renderer == "wxDataViewToggleRenderer" )
		{
			dataView->AppendToggleColumn( _("ToggleCol"), 0, wxDATAVIEW_CELL_INERT );
		}
		else if( renderer == "wxDataViewProgressRenderer" )
		{
			dataView->AppendProgressColumn( _("ProgressCol"), 0, wxDATAVIEW_CELL_INERT );
		}
		else if( renderer == "wxDataViewBitmapRenderer" )
		{
			dataView->AppendBitmapColumn( _("BitmapCol"), 0, wxDATAVIEW_CELL_INERT );
		}
		else if( renderer == "wxDataViewDateRenderer" )
		{
			dataView->AppendDateColumn( _("DateCol"), 0, wxDATAVIEW_CELL_INERT  );
		}
		else
		{
			dataView->AppendTextColumn( _("StringCol"), 0, wxDATAVIEW_CELL_INERT );
		}
	}

	void OnSelected( wxObject* wxobject )
	{

	}
};

class GenericDirCtrlComponent : public ComponentBase
{
public:
	GenericDirCtrlEvtHandler* m_evtHandler;
	wxGenericDirCtrl* m_ctrl;
	wxObject* Create( IObject* obj, wxObject* parent )
	{
		wxGenericDirCtrl* ctrl = new wxGenericDirCtrl(	(wxWindow*)parent, wxID_ANY,
														obj->GetPropertyAsString("defaultfolder"),
														obj->GetPropertyAsPoint("pos"),
														obj->GetPropertyAsSize("size"),
														obj->GetPropertyAsInteger("style") |
														obj->GetPropertyAsInteger("window_style"),
														obj->GetPropertyAsString("filter"),
														obj->GetPropertyAsInteger("defaultfilter") );

		ctrl->ShowHidden( obj->GetPropertyAsInteger("show_hidden") != 0 );
		m_evtHandler = new GenericDirCtrlEvtHandler( ctrl, GetManager() );
		ctrl->GetTreeCtrl()->PushEventHandler( m_evtHandler );
		m_ctrl = ctrl;
		return ctrl;
	}
	
	virtual void Cleanup( wxObject* obj )
    {
		m_ctrl->GetTreeCtrl()->RemoveEventHandler(m_evtHandler);
		delete m_evtHandler;
    }

	ticpp::Element* ExportToXrc( IObject *obj )
	{
		ObjectToXrcFilter xrc( obj, "wxGenericDirCtrl", obj->GetPropertyAsString("name") );
		xrc.AddProperty( "defaultfolder", "defaultfolder", XRC_TYPE_TEXT );
		xrc.AddProperty( "filter", "filter", XRC_TYPE_TEXT );
		xrc.AddProperty( "defaultfilter", "defaultfilter", XRC_TYPE_INTEGER );
		xrc.AddWindowProperties();
		return xrc.GetXrcObject();
	}

	ticpp::Element* ImportFromXrc( ticpp::Element* xrcObj )
	{
		XrcToXfbFilter filter( xrcObj, "wxGenericDirCtrl" );
		filter.AddProperty( "defaultfolder", "defaultfolder", XRC_TYPE_TEXT );
		filter.AddProperty( "filter", "filter", XRC_TYPE_TEXT );
		filter.AddProperty( "defaultfilter", "defaultfilter", XRC_TYPE_INTEGER );
		filter.AddWindowProperties();
		return filter.GetXfbObject();
	}
};

void GenericDirCtrlEvtHandler::OnGenericDirCtrlLeftClick( wxMouseEvent& event )
{
	m_manager->SelectObject( m_window );
	event.Skip();
}

#if wxUSE_MEDIACTRL
#include <wx/mediactrl.h>

class MediaCtrlComponent : public ComponentBase
{
public:
    wxObject* Create(IObject *obj, wxObject *parent)
	{
		wxMediaCtrl* mc = new wxMediaCtrl( (wxWindow *)parent, wxID_ANY, wxEmptyString,
											obj->GetPropertyAsPoint("pos"),
											obj->GetPropertyAsSize("size"),
											obj->GetPropertyAsInteger("style") |
											obj->GetPropertyAsInteger("window_style") );
		if ( !obj->IsNull("file") )
		{
			if ( mc->Load( obj->GetPropertyAsString("file") ) )
			{
				if ( !obj->IsNull("playback_rate") )
					mc->SetPlaybackRate( obj->GetPropertyAsFloat("playback_rate") );

				if ( !obj->IsNull("volume") && ( obj->GetPropertyAsFloat("volume") >=0 ) && ( obj->GetPropertyAsFloat("volume") <=1 ) ) 
					mc->SetPlaybackRate( obj->GetPropertyAsFloat("volume") );

				if ( !obj->IsNull(_("player_controls")))
				{
					if ( obj->GetPropertyAsString("player_controls") == "STEP" )
						mc->ShowPlayerControls( wxMEDIACTRLPLAYERCONTROLS_STEP );

					if ( obj->GetPropertyAsString("player_controls") == "VOLUME" )
						mc->ShowPlayerControls( wxMEDIACTRLPLAYERCONTROLS_VOLUME );

					if ( obj->GetPropertyAsString("player_controls") == "DEFAULT" )
						mc->ShowPlayerControls( wxMEDIACTRLPLAYERCONTROLS_DEFAULT );

					if ( obj->GetPropertyAsString("player_controls") == "NONE" )
						mc->ShowPlayerControls( wxMEDIACTRLPLAYERCONTROLS_NONE );
				}
				
				if ( !obj->IsNull( _("play") ) && ( obj->GetPropertyAsInteger( _("play") ) == 1 ) )
					mc->Play();
				else
					mc->Stop();
				
				//GetManager()->ModifyProperty( m_window, wxT("size"), mc->GetBestSize() );
			}
		}
		
		if( !obj->IsNull("style") )
			mc->ShowPlayerControls( wxMEDIACTRLPLAYERCONTROLS_STEP );

		mc->PushEventHandler( new ComponentEvtHandler( mc, GetManager() ) );

		return mc;
	}

	ticpp::Element* ExportToXrc(IObject *obj)
	{
		ObjectToXrcFilter xrc( obj, "wxMediaCtrl", obj->GetPropertyAsString("name") );
		xrc.AddWindowProperties();
		return xrc.GetXrcObject();
	}

	ticpp::Element* ImportFromXrc( ticpp::Element* xrcObj )
	{
		XrcToXfbFilter filter( xrcObj, "wxMediaCtrl" );
		filter.AddWindowProperties();
		return filter.GetXfbObject();
	}
};
#endif

class ScrollBarComponent : public ComponentBase
{
public:
	wxObject* Create( IObject *obj, wxObject *parent )
	{
		wxScrollBar *sb = new wxScrollBar(	(wxWindow *)parent, -1,
											obj->GetPropertyAsPoint("pos"),
											obj->GetPropertyAsSize("size"),
											obj->GetPropertyAsInteger("style") |
											obj->GetPropertyAsInteger("window_style") );

        sb->SetScrollbar( 	obj->GetPropertyAsInteger("value"),
							obj->GetPropertyAsInteger("thumbsize"),
							obj->GetPropertyAsInteger("range"),
							obj->GetPropertyAsInteger("pagesize") );
        return sb;
	}

	ticpp::Element* ExportToXrc( IObject *obj )
	{
		ObjectToXrcFilter xrc( obj, "wxScrollBar", obj->GetPropertyAsString("name") );
		xrc.AddWindowProperties();
		xrc.AddProperty( "value", "value", XRC_TYPE_INTEGER );
		xrc.AddProperty( "thumbsize", "thumbsize", XRC_TYPE_INTEGER );
		xrc.AddProperty( "range", "range", XRC_TYPE_INTEGER );
		xrc.AddProperty( "pagesize", "pagesize", XRC_TYPE_INTEGER );
		return xrc.GetXrcObject();
	}

	ticpp::Element* ImportFromXrc( ticpp::Element* xrcObj )
	{
		XrcToXfbFilter filter( xrcObj, "wxScrollBar" );
		filter.AddWindowProperties();
		filter.AddProperty( "value", "value", XRC_TYPE_INTEGER );
		filter.AddProperty( "thumbsize", "thumbsize", XRC_TYPE_INTEGER );
		filter.AddProperty( "range", "range", XRC_TYPE_INTEGER );
		filter.AddProperty( "pagesize", "pagesize", XRC_TYPE_INTEGER );
		return filter.GetXfbObject();
	}
};

class SearchCtrlComponent : public ComponentBase
{
public:

	wxObject* Create(IObject *obj, wxObject *parent)
	{
		wxSearchCtrl* sc = new wxSearchCtrl((wxWindow *)parent, wxID_ANY,
											obj->GetPropertyAsString("value"),
											obj->GetPropertyAsPoint("pos"),
											obj->GetPropertyAsSize("size"),
											obj->GetPropertyAsInteger("style") |
											obj->GetPropertyAsInteger("window_style") );

		if ( !obj->IsNull("search_button") )
		{
			sc->ShowSearchButton( 0!= obj->GetPropertyAsInteger("search_button") );
		}
		
		if ( !obj->IsNull("cancel_button") )
		{
			sc->ShowCancelButton( 0!= obj->GetPropertyAsInteger("cancel_button") );
		}

		sc->PushEventHandler( new ComponentEvtHandler( sc, GetManager() ) );

		return sc;
	}

	ticpp::Element* ExportToXrc( IObject *obj )
	{
		ObjectToXrcFilter xrc( obj, "wxSearchCtrl", obj->GetPropertyAsString("name") );
		xrc.AddWindowProperties();
		xrc.AddProperty( "value", "value", XRC_TYPE_TEXT );
		return xrc.GetXrcObject();
	}

	ticpp::Element* ImportFromXrc( ticpp::Element* xrcObj )
	{
		XrcToXfbFilter filter( xrcObj, "wxSearchCtrl" );
		filter.AddWindowProperties();
		filter.AddProperty( "value", "value", XRC_TYPE_TEXT );
		return filter.GetXfbObject();
	}
};

void ComponentEvtHandler::OnText( wxCommandEvent& event)
{
	wxSearchCtrl* sc = wxDynamicCast( m_window, wxSearchCtrl );
	if ( sc != NULL )
	{
		m_manager->ModifyProperty( m_window, "value", sc->GetValue() );
		sc->SetInsertionPointEnd();
		sc->SetFocus();
	}
	event.Skip();
}

class SpinButtonComponent : public ComponentBase
{
public:
	wxObject* Create(IObject *obj, wxObject *parent)
	{
		return new wxSpinButton((wxWindow *)parent, -1,
								obj->GetPropertyAsPoint("pos"),
								obj->GetPropertyAsSize("size"),
								obj->GetPropertyAsInteger("style") |
								obj->GetPropertyAsInteger("window_style") );
	}

	ticpp::Element* ExportToXrc(IObject *obj)
	{
		ObjectToXrcFilter xrc( obj, "wxSpinButton", obj->GetPropertyAsString("name") );
		xrc.AddWindowProperties();
		return xrc.GetXrcObject();
	}

	ticpp::Element* ImportFromXrc( ticpp::Element* xrcObj )
	{
		XrcToXfbFilter filter( xrcObj, "wxSpinButton" );
		filter.AddWindowProperties();
		return filter.GetXfbObject();
	}
};

class SpinCtrlComponent : public ComponentBase, public wxEvtHandler
{
public:
	wxObject* Create(IObject *obj, wxObject *parent)
	{
		wxSpinCtrl* window = new wxSpinCtrl((wxWindow *)parent, -1,
											obj->GetPropertyAsString("value"),
											obj->GetPropertyAsPoint("pos"),
											obj->GetPropertyAsSize("size"),
											obj->GetPropertyAsInteger("style") |
											obj->GetPropertyAsInteger("window_style"),
											obj->GetPropertyAsInteger("min"),
											obj->GetPropertyAsInteger("max"),
											obj->GetPropertyAsInteger("initial") );

		window->Connect(wxEVT_COMMAND_SPINCTRL_UPDATED,
						wxSpinEventHandler( SpinCtrlComponent::OnSpin ), NULL, this );
		return window;
	}

	void OnSpin( wxSpinEvent& event )
	{
		wxSpinCtrl* window = dynamic_cast< wxSpinCtrl* >( event.GetEventObject() );
		if ( 0 != window )
		{
			wxString value;
			value.Printf( "%i", window->GetValue() );
			GetManager()->ModifyProperty( window, "initial", value );
			window->SetFocus();
		}
	}

	void Cleanup( wxObject* obj )
	{
		wxSpinCtrl* window = dynamic_cast< wxSpinCtrl* >( obj );
		if ( 0 != window )
		{
			window->Disconnect( wxEVT_COMMAND_SPINCTRL_UPDATED,
								wxSpinEventHandler( SpinCtrlComponent::OnSpin ), NULL, this );
		}
		ComponentBase::Cleanup( obj );
	}

	ticpp::Element* ExportToXrc( IObject *obj )
	{
		ObjectToXrcFilter xrc( obj, "wxSpinCtrl", obj->GetPropertyAsString("name") );
		xrc.AddWindowProperties();
		xrc.AddProperty( "initial", "value", XRC_TYPE_TEXT );
		xrc.AddProperty( "min", "min", XRC_TYPE_INTEGER );
		xrc.AddProperty( "max", "max", XRC_TYPE_INTEGER );
		return xrc.GetXrcObject();
	}

	ticpp::Element* ImportFromXrc( ticpp::Element* xrcObj )
	{
		XrcToXfbFilter filter( xrcObj, "wxSpinCtrl" );
		filter.AddWindowProperties();
		filter.AddProperty( "value", "value", XRC_TYPE_TEXT );
		filter.AddProperty( "value", "initial", XRC_TYPE_TEXT );
		filter.AddProperty( "min", "min", XRC_TYPE_INTEGER );
		filter.AddProperty( "max", "max", XRC_TYPE_INTEGER );
		return filter.GetXfbObject();
	}
};

class TreeCtrlComponent : public ComponentBase
{
public:
	wxObject* Create( IObject *obj, wxObject *parent )
	{
		int style = obj->GetPropertyAsInteger("style");
		wxTreeCtrl *tc = new wxTreeCtrl((wxWindow *)parent,-1,
										obj->GetPropertyAsPoint("pos"),
										obj->GetPropertyAsSize("size"),
										style | obj->GetPropertyAsInteger("window_style") );

		// Dummy nodes
		wxTreeItemId root = tc->AddRoot("root node");
		wxTreeItemId node1 = tc->AppendItem( root, 	"node1" );
		wxTreeItemId node2 = tc->AppendItem( root, 	"node2" );
		wxTreeItemId node3 = tc->AppendItem( node2, "node3" );
		if ( ( style & wxTR_HIDE_ROOT ) == 0 )
			tc->Expand(root);

		tc->Expand(node1);
		tc->Expand(node2);
		tc->Expand(node3);

		return tc;
	}
	
	virtual void Cleanup( wxObject* obj )
    {
    }


	ticpp::Element* ExportToXrc( IObject *obj )
	{
		ObjectToXrcFilter xrc( obj, "wxTreeCtrl", obj->GetPropertyAsString("name") );
		xrc.AddWindowProperties();
		return xrc.GetXrcObject();
	}

	ticpp::Element* ImportFromXrc( ticpp::Element* xrcObj )
	{
		XrcToXfbFilter filter( xrcObj, "wxTreeCtrl" );
		filter.AddWindowProperties();
		return filter.GetXfbObject();
	}
};

class HtmlWindowComponent : public ComponentBase
{
public:
	wxObject* Create(IObject *obj, wxObject *parent)
	{
		wxHtmlWindow *hw = new wxHtmlWindow((wxWindow *)parent, -1,
											obj->GetPropertyAsPoint("pos"),
											obj->GetPropertyAsSize("size"),
											obj->GetPropertyAsInteger("style") |
											obj->GetPropertyAsInteger("window_style") );

		wxString dummy_page = "<b>wxHtmlWindow</b><br />";
		dummy_page << _("This is a dummy page.");
		dummy_page << "</body></html>";

		hw->SetPage(dummy_page);

		return hw;
	}
	
	virtual void Cleanup( wxObject* obj )
    {
    }

	ticpp::Element* ExportToXrc(IObject *obj)
	{
		ObjectToXrcFilter xrc( obj, "wxHtmlWindow", obj->GetPropertyAsString("name") );
		xrc.AddWindowProperties();
		return xrc.GetXrcObject();
	}

	ticpp::Element* ImportFromXrc( ticpp::Element* xrcObj )
	{
		XrcToXfbFilter filter( xrcObj, "wxHtmlWindow" );
		filter.AddWindowProperties();
		return filter.GetXfbObject();
	}
};

class HyperlinkComponent : public ComponentBase
{
public:
	wxObject* Create( IObject *obj, wxObject *parent )
	{
		wxHyperlinkCtrl* ctrl = new wxHyperlinkCtrl((wxWindow*)parent, -1,
													obj->GetPropertyAsString("label"),
													obj->GetPropertyAsString("url"),
													obj->GetPropertyAsPoint("pos"),
													obj->GetPropertyAsSize("size"),
													obj->GetPropertyAsInteger("style") |
													obj->GetPropertyAsInteger("window_style") );
		if ( !obj->IsNull("hover_color") )
			ctrl->SetHoverColour( obj->GetPropertyAsColour("hover_color") );

		if ( !obj->IsNull("normal_color") )
			ctrl->SetNormalColour( obj->GetPropertyAsColour("normal_color") );

		if ( !obj->IsNull("visited_color") )
			ctrl->SetVisitedColour( obj->GetPropertyAsColour("visited_color") );

		return ctrl;
	}

	ticpp::Element* ExportToXrc( IObject *obj )
	{
		ObjectToXrcFilter xrc( obj, "wxHyperlinkCtrl", obj->GetPropertyAsString("name") );
		xrc.AddProperty( "label", "label", XRC_TYPE_TEXT );
		xrc.AddPropertyValue( "url", obj->GetPropertyAsString("url") );
		xrc.AddWindowProperties();
		return xrc.GetXrcObject();
	}

	ticpp::Element* ImportFromXrc( ticpp::Element* xrcObj )
	{
		XrcToXfbFilter filter( xrcObj, "wxHyperlinkCtrl" );
		filter.AddProperty( "label", "label" ,XRC_TYPE_TEXT );

		try
		{
			ticpp::Element *urlElement = xrcObj->FirstChildElement("url");
			wxString url( urlElement->GetText().c_str(), wxConvUTF8 );

			filter.AddPropertyValue( "url", url );
		}
		catch(ticpp::Exception&)
		{
		}

		filter.AddWindowProperties();
		return filter.GetXfbObject();
	}
};

class HtmlListBoxSimpleWindowComponent : public ComponentBase
{
public:
	wxObject* Create(IObject *obj, wxObject *parent)
	{
		wxSimpleHtmlListBox *hlb = new wxSimpleHtmlListBox((wxWindow *)parent, -1,
											obj->GetPropertyAsPoint("pos"),
											obj->GetPropertyAsSize("size"),
											obj->GetPropertyAsInteger("style") |
											obj->GetPropertyAsInteger("window_style") );

        // unlike wxHtmlListBox which is abstract, wxSimpleHtmlListBox is a
        // concrete control and doesn't support virtual mode, this we need
        // to add all of its items from the beginning
        wxArrayString arr;
        for (size_t n = 0; n < 10; n++ )
        {
            wxColour clr((unsigned char)(abs((int)n - 192) % 256),
                         (unsigned char)(abs((int)n - 256) % 256),
                         (unsigned char)(abs((int)n - 128) % 256));
            int level = n % 6 + 1;

            wxString label = wxString::Format(wxT("<h%d><font color=%s>")
                    wxT("Item</font> <b>%lu</b>")
                    wxT("</h%d>"),
                    level,
                    clr.GetAsString(wxC2S_HTML_SYNTAX).c_str(),
                    (unsigned long)n, level);
            arr.Add(label);
        }

        hlb->Append(arr);

		return hlb;
	}
	
	virtual void Cleanup( wxObject* obj )
    {
    }

	ticpp::Element* ExportToXrc(IObject *obj)
	{
		ObjectToXrcFilter xrc( obj, "wxSimpleHtmlListBox", obj->GetPropertyAsString("name") );
		xrc.AddWindowProperties();
		return xrc.GetXrcObject();
	}

	ticpp::Element* ImportFromXrc( ticpp::Element* xrcObj )
	{
		XrcToXfbFilter filter( xrcObj, "wxSimpleHtmlListBox" );
		filter.AddWindowProperties();
		return filter.GetXfbObject();
	}
};

class CustomControlComponent : public ComponentBase
{
public:
	wxObject* Create( IObject* /*obj*/, wxObject *parent )
	{
		return new wxPanel( (wxWindow *)parent, -1, wxDefaultPosition, wxDefaultSize, 0 );
	}

	ticpp::Element* ExportToXrc(IObject *obj)
	{
		ObjectToXrcFilter xrc( obj, obj->GetPropertyAsString("class"), obj->GetPropertyAsString("name") );
		return xrc.GetXrcObject();
	}
};

BEGIN_LIBRARY()

	WINDOW_COMPONENT( "wxBitmapComboBox", 	BitmapComboBoxComponent )

	WINDOW_COMPONENT( "wxCalendarCtrl",		CalendarCtrlComponent )
	MACRO(wxCAL_SUNDAY_FIRST)
	MACRO(wxCAL_MONDAY_FIRST)
	MACRO(wxCAL_SHOW_HOLIDAYS)
	MACRO(wxCAL_NO_YEAR_CHANGE)
	MACRO(wxCAL_NO_MONTH_CHANGE)
	MACRO(wxCAL_SHOW_SURROUNDING_WEEKS)
	MACRO(wxCAL_SEQUENTIAL_MONTH_SELECTION)

	WINDOW_COMPONENT( "wxCheckListBox",		CheckListBoxComponent )

	WINDOW_COMPONENT( 	"wxDataViewCtrl", 	DataViewCtrlComponent )
	ABSTRACT_COMPONENT( "wxDataViewColumn", DataViewColumnComponent )
	MACRO(wxDV_SINGLE)					// Single selection mode. This is the default. 
	MACRO(wxDV_MULTIPLE)				// Multiple selection mode. 
	MACRO(wxDV_ROW_LINES)				// Use alternating colours for rows if supported by platform and theme. 
	MACRO(wxDV_HORIZ_RULES)				// Display fine rules between row if supported. 
	MACRO(wxDV_VERT_RULES)				// Display fine rules between columns is supported. 
	MACRO(wxDV_VARIABLE_LINE_HEIGHT)	// Allow variable line heights. This can be inefficient when displaying large number of items. 
	MACRO(wxDV_NO_HEADER) 				// Do not show column headers (which are shown by default).

	WINDOW_COMPONENT( "wxGenericDirCtrl", GenericDirCtrlComponent )
	MACRO(wxDIRCTRL_DIR_ONLY)
	MACRO(wxDIRCTRL_3D_INTERNAL)
	MACRO(wxDIRCTRL_SELECT_FIRST)
	MACRO(wxDIRCTRL_SHOW_FILTERS)
	MACRO(wxDIRCTRL_EDIT_LABELS)

#if wxUSE_MEDIACTRL
//	WINDOW_COMPONENT( "wxMediaCtrl", MediaCtrlComponent ) TODO: wxMediaCtrl won't compile
#endif

	WINDOW_COMPONENT( "wxScrollBar", ScrollBarComponent )
	MACRO(wxSB_HORIZONTAL)
	MACRO(wxSB_VERTICAL)

	WINDOW_COMPONENT( "wxSearchCtrl", SearchCtrlComponent )
	MACRO(wxTE_PROCESS_ENTER);
	MACRO(wxTE_PROCESS_TAB);
	MACRO(wxTE_NOHIDESEL);
	MACRO(wxTE_LEFT);
	MACRO(wxTE_CENTER);
	MACRO(wxTE_RIGHT);
	MACRO(wxTE_CAPITALIZE);

	WINDOW_COMPONENT( "wxSpinButton", 	SpinButtonComponent )
	WINDOW_COMPONENT( "wxSpinCtrl", 	SpinCtrlComponent )
	MACRO(wxSP_ARROW_KEYS)
	MACRO(wxSP_WRAP)
	MACRO(wxSP_HORIZONTAL)
	MACRO(wxSP_VERTICAL)

	WINDOW_COMPONENT( "wxTreeCtrl", TreeCtrlComponent )
	MACRO(wxTR_EDIT_LABELS)
	MACRO(wxTR_NO_BUTTONS)
	MACRO(wxTR_HAS_BUTTONS)
	MACRO(wxTR_TWIST_BUTTONS)
	MACRO(wxTR_NO_LINES)
	MACRO(wxTR_FULL_ROW_HIGHLIGHT)
	MACRO(wxTR_LINES_AT_ROOT)
	MACRO(wxTR_HIDE_ROOT)
	MACRO(wxTR_ROW_LINES)
	MACRO(wxTR_HAS_VARIABLE_ROW_HEIGHT)
	MACRO(wxTR_SINGLE)
	MACRO(wxTR_MULTIPLE)
	MACRO(wxTR_EXTENDED)
	MACRO(wxTR_DEFAULT_STYLE)

	WINDOW_COMPONENT( "wxHtmlWindow", HtmlWindowComponent )
	MACRO(wxHW_SCROLLBAR_NEVER)
	MACRO(wxHW_SCROLLBAR_AUTO)
	MACRO(wxHW_NO_SELECTION)

	WINDOW_COMPONENT( "wxHyperlinkCtrl", HyperlinkComponent )
	MACRO(wxHL_ALIGN_LEFT)
	MACRO(wxHL_ALIGN_RIGHT)
	MACRO(wxHL_ALIGN_CENTRE)
	MACRO(wxHL_CONTEXTMENU)
	MACRO(wxHL_DEFAULT_STYLE)

	WINDOW_COMPONENT( "wxSimpleHtmlListBox", HtmlListBoxSimpleWindowComponent )
	MACRO(wxHLB_DEFAULT_STYLE)
	MACRO(wxHW_SCROLLBAR_AUTO)

	WINDOW_COMPONENT( "CustomControl", CustomControlComponent )

END_LIBRARY()
