<?xml version="1.0" encoding="UTF-8" standalone="yes" ?>
<!--
wxFormBuilder - A Visual Dialog Editor for wxWidgets.
Copyright (C) 2005 José Antonio Hurtado

This program is free software; you can redistribute it and/or
modify it under the terms of the GNU General Public License
as published by the Free Software Foundation; either version 2
of the License, or (at your option) any later version.

This program is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU General Public License for more details.

You should have received a copy of the GNU General Public License
along with this program; if not, write to the Free Software
Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA  02111-1307, USA.

Written by
  José Antonio Hurtado - joseantonio.hurtado@gmail.com
  Juan Antonio Ortega  - jortegalalmolda@gmail.com
-->
<package name="Additional" lib="libadditional" icon="treectrl.xpm" desc="wxWidgets additional controls">

	<objectinfo class="CustomControl" icon="custctrl.xpm" type="widget">
		<inherits class="wxWindow"/>
		<property name="name" 			type="text" help="The control is added to a sizer using this name.">m_customControl</property>
		<property name="class" 			type="text" help="The control is generated to XRC with this class."/>
		<property name="declaration" 	type="text" help="Code to generate for the declaration of this control."/>
		<property name="construction" 	type="text" help="Code to generate for the construction of this control."/>
		<property name="include" 		type="text" help="Code to generate for the include statements for this control."/>
		<property name="settings" 		type="text" help="Code to generate for the settings of this control."/>
	</objectinfo>

	<objectinfo class="wxBitmapComboBox" icon="bmpcbox.xpm" type="widget">
		<inherits class="wxWindow" />
		<property name="name" type="text">m_bcomboBox</property>
		<property name="value" type="wxString_i18n">Combo!</property>
		<property name="choices" type="stringlist" help="Contents of the Combo Box. Use format bitmap:choice "></property>
		<property name="style" type="bitlist">
			<option name="wxCB_READONLY"      help="Same as wxCB_DROPDOWN but only the strings specified as the combobox choices can be selected, it is impossible to select (even from a program) a string which is not in the choices list."/>
			<option name="wxCB_SORT"          help="Sorts the entries in the list alphabetically."/>
			<option name="wxTE_PROCESS_ENTER" help="The control will generate the event wxEVT_COMMAND_TEXT_ENTER (otherwise pressing Enter key is either processed internally by the control or used for navigation between dialog controls)."/>
		</property>
		<event name="OnCombobox" class="wxCommandEvent" help="Process a wxEVT_COMMAND_COMBOBOX_SELECTED event, when an item on the list is selected. Note that calling GetValue returns the new value of selection." />
		<event name="OnText" class="wxCommandEvent" help="Process a wxEVT_COMMAND_TEXT_UPDATED event, when the combobox text changes." />
		<event name="OnTextEnter" class="wxCommandEvent" help="Process a wxEVT_COMMAND_TEXT_ENTER event, when <RETURN> is pressed in the combobox." />
	</objectinfo>

	<objectinfo class="wxCalendarCtrl" startgroup="1" icon="calctrl.xpm" type="widget">
		<inherits class="wxWindow" />
		<property name="name" 	type="text">m_calendar</property>
		<property name="style" 	type="bitlist">
			<option name="wxCAL_SUNDAY_FIRST"               help="Show Sunday as the first day in the week." />
			<option name="wxCAL_MONDAY_FIRST"               help="Show Monday as the first day in the week." />
			<option name="wxCAL_SHOW_HOLIDAYS"              help="Highlight holidays in the calendar." />
			<option name="wxCAL_NO_YEAR_CHANGE"             help="Disable the year changing." />
			<option name="wxCAL_NO_MONTH_CHANGE"            help="Disable the month (and, implicitly, the year) changing." />
			<option name="wxCAL_SHOW_SURROUNDING_WEEKS"     help="Show the neighbouring weeks in the previous and next months." />
			<option name="wxCAL_SEQUENTIAL_MONTH_SELECTION" help="Use alternative, more compact, style for the month and year selection controls." />wxCAL_SHOW_HOLIDAYS</property>
		<event name="OnCalendar" 				class="wxCalendarEvent" help="A day was double clicked in the calendar." />
		<event name="OnCalendarSelChanged" 		class="wxCalendarEvent" help="The selected date changed." />
		<event name="OnCalendarDay" 			class="wxCalendarEvent" help="The selected day changed." />
		<event name="OnCalendarMonth" 			class="wxCalendarEvent" help="The selected month changed." />
		<event name="OnCalendarYear" 			class="wxCalendarEvent" help="The selected year changed." />
		<event name="OnCalendarWeekDayClicked" 	class="wxCalendarEvent" help="User clicked on the week day header." />
	</objectinfo>

	<objectinfo class="wxCheckListBox" icon="checklst.xpm" type="widget">
		<inherits class="wxWindow" />
		<property name="name" type="text">m_checkList</property>
		<property name="style" type="bitlist">
			<option name="wxLB_SINGLE"    help="Single-selection list." />
			<option name="wxLB_MULTIPLE"  help="Multiple-selection list: the user can toggle multiple items on and off." />
			<option name="wxLB_EXTENDED"  help="Extended-selection list: the user can select multiple items using the SHIFT key and the mouse or special key combinations." />
			<option name="wxLB_HSCROLL"   help="Create horizontal scrollbar if contents are too wide (Windows only)." />
			<option name="wxLB_ALWAYS_SB" help="Always show a vertical scrollbar." />
			<option name="wxLB_NEEDED_SB" help="Only create a vertical scrollbar if needed." />
			<option name="wxLB_SORT"      help="The listbox contents are sorted in alphabetical order." />
		</property>
		<property name="choices" type="stringlist" help="List of default values." />
		<event name="OnCheckListBoxToggled" class="wxCommandEvent" help="Process a wxEVT_COMMAND_CHECKLISTBOX_TOGGLED event, when an item in the check list box is checked or unchecked." />
		<event name="OnCheckListBox" 		class="wxCommandEvent" help="Process a wxEVT_COMMAND_LISTBOX_SELECTED event, when an item on the list is selected." />
		<event name="OnCheckListBoxDClick" 	class="wxCommandEvent" help="Process a wxEVT_COMMAND_LISTBOX_DOUBLECLICKED event, when the listbox is double-clicked." />
	</objectinfo>

	<objectinfo class="wxDataViewCtrl" icon="dataview.xpm" type="dataview">
		<inherits class="wxWindow"/>
		<property name="name" type="text">m_DataViewCtrl</property>
<!-- TODO: What about these ones?
		// ----------------------------------------------------------------------------
		// wxDataViewCtrl flags
		// ----------------------------------------------------------------------------

		// size of a wxDataViewRenderer without contents:
		#define wxDVC_DEFAULT_RENDERER_SIZE     20

		// the default width of new toggle columns:
		#define wxDVC_TOGGLE_DEFAULT_WIDTH      30

		// the default minimal width of the columns:
		#define wxDVC_DEFAULT_MINWIDTH          30

		// The default alignment of wxDataViewRenderers is to take
		// the alignment from the column it owns.
		#define wxDVR_DEFAULT_ALIGNMENT         -1
-->
		<property name="style" type="bitlist">
			<option name="wxDV_SINGLE" 					help="Single selection mode. This is the default."/>
			<option name="wxDV_MULTIPLE" 				help="Multiple selection mode."/>
			<option name="wxDV_ROW_LINES" 				help="Use alternating colours for rows if supported by platform and theme."/>
			<option name="wxDV_HORIZ_RULES" 			help="Display fine rules between row if supported."/>
			<option name="wxDV_VERT_RULES" 				help="Display fine rules between columns is supported."/>
			<option name="wxDV_VARIABLE_LINE_HEIGHT" 	help="Allow variable line heights. This can be inefficient when displaying large number of items."/>
			<option name="wxDV_NO_HEADER" 				help="Do not show column headers (which are shown by default)."/>
			wxDV_SINGLE
		</property>
		<event name="OnDataViewSelectionChanged" 	class="wxDataViewEvent" help="Process a wxEVT_COMMAND_DATAVIEW_SELECTION_CHANGED event." />
		<event name="OnDataViewItemActivated" 		class="wxDataViewEvent" help="Process a wxEVT_COMMAND_DATAVIEW_ITEM_ACTIVATED event." />
		<event name="OnDataViewItemEditingStarted" 	class="wxDataViewEvent" help="Process a wxEVT_COMMAND_DATAVIEW_ITEM_EDITING_STARTED event." />
		<event name="OnDataViewItemEditingDone" 	class="wxDataViewEvent" help="Process a wxEVT_COMMAND_DATAVIEW_ITEM_EDITING_DONE event." />
		<event name="OnDataViewItemCollapsing" 		class="wxDataViewEvent" help="Process a wxEVT_COMMAND_DATAVIEW_ITEM_COLLAPSING event." />
		<event name="OnDataViewItemCollapsed" 		class="wxDataViewEvent" help="Process a wxEVT_COMMAND_DATAVIEW_ITEM_COLLAPSED event." />
		<event name="OnDataViewItemExpanding" 		class="wxDataViewEvent" help="Process a wxEVT_COMMAND_DATAVIEW_ITEM_EXPANDING event." />
		<event name="OnDataViewItemExpanded" 		class="wxDataViewEvent" help="Process a wxEVT_COMMAND_DATAVIEW_ITEM_EXPANDED event." />
		<event name="OnDataViewItemValueChanged" 	class="wxDataViewEvent" help="Process a wxEVT_COMMAND_DATAVIEW_ITEM_VALUE_CHANGED event." />
		<event name="OnDataViewItemContextMenu" 	class="wxDataViewEvent" help="Process a wxEVT_COMMAND_DATAVIEW_ITEM_CONTEXT_MENU event." />
		<event name="OnDataViewColumnHeaderClick" 	class="wxDataViewEvent" help="Process a wxEVT_COMMAND_DATAVIEW_COLUMN_HEADER_CLICKED event." />
		<event name="OnDataViewColumnHeaderRClick" 	class="wxDataViewEvent" help="Process a wxEVT_COMMAND_DATAVIEW_COLUMN_HEADER_RIGHT_CLICKED event." />
		<event name="OnDataViewColumnSorted" 		class="wxDataViewEvent" help="Process a wxEVT_COMMAND_DATAVIEW_COLUMN_SORTED event." />
		<event name="OnDataViewColumnReordered" 	class="wxDataViewEvent" help="Process a wxEVT_COMMAND_DATAVIEW_COLUMN_REORDERED event." />
		<event name="OnDataViewItemBeginDrag" 		class="wxDataViewEvent" help="Process a wxEVT_COMMAND_DATAVIEW_ITEM_BEGIN_DRAG event." />
		<event name="OnDataViewItemDropPossible" 	class="wxDataViewEvent" help="Process a wxEVT_COMMAND_DATAVIEW_ITEM_DROP_POSSIBLE event." />
		<event name="OnDataViewItemDrop" 			class="wxDataViewEvent" help="Process a wxEVT_COMMAND_DATAVIEW_ITEM_DROP event." />
		<event name="OnDataViewCacheHint" 			class="wxDataViewEvent" help="Process a wxEVT_COMMAND_DATAVIEW_CACHE_HINT event." />
	</objectinfo>

	<objectinfo class="wxDataViewColumn" icon="datavcol.xpm" type="dataviewcolumn">
		<property name="title" 		type="wxString_i18n" 	help="The title of the column.">Column</property>
		<property name="bitmap" 	type="bitmap" 			help="The bitmap of the column. "/>
		<property name="renderer" 	type="option" 			help="The class which will render the contents of this column.">
			<option name="wxDataViewTextRenderer"			help="wxDataViewTextRenderer is used for rendering text. It supports in-place editing if desired."/>
			<option name="wxDataViewIconTextRenderer"		help="The wxDataViewIconTextRenderer class is used to display text with a small icon next to it as it is typically done in a file manager. This classes uses the wxDataViewIconText helper class to store its data. wxDataViewIconText can be converted to and from a wxVariant using the left shift operator."/>
			<option name="wxDataViewToggleRenderer" 		help="This class is used by wxDataViewCtrl to render toggle controls."/>
			<option name="wxDataViewProgressRenderer" 		help="This class is used by wxDataViewCtrl to render progress bars. "/>
			<option name="wxDataViewBitmapRenderer"			help="This class is used by wxDataViewCtrl to render bitmap controls."/>
			<option name="wxDataViewDateRenderer"			help="This class is used by wxDataViewCtrl to render calendar controls."/>
			<option name="wxDataViewSpinRenderer"			help="This is a specialized renderer for rendering integer values. It supports modifying the values in-place by using a wxSpinCtrl. The renderer only support variants of type long."/>
			<option name="wxDataViewCustomRenderer"			help="You need to derive a new class from wxDataViewCustomRenderer in order to write a new renderer. Note that a special event handler will be pushed onto that editor control which handles <ENTER> and focus out events in order to end the editing."/>
			wxDataViewTextRenderer
		</property>
<!--		<property name="model_column" type="option" help="The index of the model's column which is associated with this object.">
			<option name="wxDataViewListCtrl"/>
			<option name="wxDataViewTreeCtrl"/>
			wxDataViewTreeCtrl
		</property>
		<property name="width" type="uint" help="The width of the column. The wxDVC_DEFAULT_WIDTH value (80) is the fixed default value.">80</property>-->

<!-- TODO: wxAlignment is a generic enum (Generic alignment values. Can be combined together.): do we need an align type? -->

		<property name="align" type="bitlist" help="The alignment of the column title.">
			<option name="wxALIGN_INVALID" 				help="-1, A value different from any valid alignment value. Note that you shouldn't use 0 for this as it's the value of (valid) alignments wxALIGN_LEFT and wxALIGN_TOP. Since: 2.9.1"/>
			<option name="wxALIGN_NOT" 					help="0x0000"/>
			<option name="wxALIGN_CENTER_HORIZONTAL" 	help="0x0100, same as wxALIGN_CENTRE_HORIZONTAL."/>
			<option name="wxALIGN_LEFT" 				help="0x0000, same as wxALIGN_TOP, wxALIGN_NOT."/>
			<option name="wxALIGN_TOP" 					help="0x0000, same as wxALIGN_LEFT, wxALIGN_NOT."/>
			<option name="wxALIGN_RIGHT" 				help="0x0200"/>
			<option name="wxALIGN_BOTTOM" 				help="0x0400"/>
			<option name="wxALIGN_CENTER_VERTICAL" 		help="0x0800, same as wxALIGN_CENTRE_VERTICAL."/>
			<option name="wxALIGN_CENTER" 				help="Same as wxALIGN_CENTRE (wxALIGN_CENTER_HORIZONTAL | wxALIGN_CENTER_VERTICAL)."/>
			<option name="wxALIGN_MASK" 				help="0x0f00"/>
			wxALIGN_CENTER
		</property>
		<property name="flags" type="bitlist" 			help="One or more flags of the wxDataViewColumnFlags enumeration.">
			<option name="wxDATAVIEW_COL_RESIZABLE" 	help=""/>
			<option name="wxDATAVIEW_COL_SORTABLE" 		help=""/>
			<option name="wxDATAVIEW_COL_REORDERABLE" 	help=""/>
			<option name="wxDATAVIEW_COL_HIDDEN" 		help=""/>
			wxDATAVIEW_COL_RESIZABLE
		</property>
	</objectinfo>

	<objectinfo class="wxGenericDirCtrl" icon="dirctrl.xpm" type="expanded_widget">
		<inherits class="wxTreeCtrlBase"/>
		<inherits class="wxWindow">
			<property name="window_style">wxSUNKEN_BORDER</property>
		</inherits>
		<property name="name" 			type="text">m_genericDirCtrl</property>
		<property name="defaultfolder" 	type="wxString_i18n" 	help="Initial Directory."/>
		<property name="filter" 		type="wxString_i18n" 	help="A filter string, using the same syntax as that for wxFileDialog. This may be empty if filters are not being used. Example: &quot;All files (*.*)|*.*|JPEG files (*.jpg)|*.jpg&quot;."/>
		<property name="defaultfilter" 	type="uint" 			help="The zero-indexed default filter setting.">0</property>
		<property name="show_hidden" 	type="bool" 			help="Show hidden files">0</property>
		<property name="style" 			type="bitlist">
			<option name="wxDIRCTRL_DIR_ONLY" 		help="Only show directories, and not files."/>
			<option name="wxDIRCTRL_3D_INTERNAL" 	help="Use 3D borders for internal controls."/>
			<option name="wxDIRCTRL_SELECT_FIRST" 	help="When setting the default path, select the first file in the directory."/>
			<option name="wxDIRCTRL_SHOW_FILTERS" 	help="Show the drop-down filter list."/>
			<option name="wxDIRCTRL_EDIT_LABELS" 	help="Allow the folder and file labels to be editable."/>
			wxDIRCTRL_3D_INTERNAL
		</property>
	</objectinfo>

	<objectinfo class="wxGrid" icon="grid.xpm" type="widget">
		<inherits class="wxWindow" />
		<property name="name" type="text">m_grid</property>
		<category name="Grid">
			<property name="rows" 				type="uint" 	help="Number of Rows.">5</property>
			<property name="cols" 				type="uint" 	help="Number of Columns.">5</property>
			<property name="editing" 			type="bool" 	help="Allow editing grid contents.">1</property>
			<property name="grid_lines" 		type="bool" 	help="Show grid lines.">1</property>
			<property name="grid_line_color" 	type="wxColour" help="The colour used to draw grid lines."/>
			<property name="drag_grid_size" 	type="bool" 	help="Allow sizing rows and columns by dragging gridlines.">0</property>
			<property name="margin_width" 		type="uint" 	help="A grid may occupy more space than needed for its columns. This function allows to set how big this extra space is.">0</property>
			<property name="margin_height" 		type="uint" 	help="A grid may occupy more space than needed for its rows. This function allows to set how big this extra space is.">0</property>
		</category>
		<category name="Columns">
			<property 	name="column_sizes" 			type="uintlist" 	help="Comma separated list of column sizes. Note: wxGrid sets up arrays to store individual row and column sizes when non-default sizes are used. The memory requirements for this could become prohibitive if your grid is very large."/>
			<property 	name="autosize_cols" 			type="bool" 		help="Automatically sizes all columns to fit their contents. wxGrid sets up arrays to store individual row and column sizes when non-default sizes are used. The memory requirements for this could become prohibitive if your grid is very large.">0</property>
			<property 	name="drag_col_move" 			type="bool" 		help="Allow moving columns by dragging.">0</property>
			<property 	name="drag_col_size" 			type="bool" 		help="Allow sizing columns by dragging.">1</property>
			<property 	name="col_label_size" 			type="uint" 		help="Height of column labels">30</property>
			<property 	name="col_label_values" 		type="stringlist" 	help="List of column labels."></property>
			<property 	name="col_label_horiz_alignment" type="option" 		help="Horizontal alignment of column label text.">
				<option name="wxALIGN_LEFT" 								help="Align labels left."/>
				<option name="wxALIGN_CENTRE" 								help="Align labels centered."/>
				<option name="wxALIGN_RIGHT" 								help="Align labels right."/>
				wxALIGN_CENTRE
			</property>
			<property 	name="col_label_vert_alignment" type="option" help="Vertical alignment of column label text.">
				<option name="wxALIGN_TOP" 		help="Align labels top."/>
				<option name="wxALIGN_CENTRE" 	help="Align labels centered."/>
				<option name="wxALIGN_BOTTOM" 	help="Align labels bottom."/>
				wxALIGN_CENTRE
			</property>
		</category>
		<category name="Rows">
			<property name="row_sizes" 					type="uintlist" 	help="Comma separated list of row sizes. Note: wxGrid sets up arrays to store individual row and column sizes when non-default sizes are used. The memory requirements for this could become prohibitive if your grid is very large."/>
			<property name="autosize_rows" 				type="bool" 		help="Automatically sizes all rows to fit their contents. wxGrid sets up arrays to store individual row and column sizes when non-default sizes are used. The memory requirements for this could become prohibitive if your grid is very large.">0</property>
			<property name="drag_row_size" 				type="bool" 		help="Allow sizing rows by dragging.">1</property>
			<property name="row_label_size" 			type="uint" 		help="Width of row labels">80</property>
			<property name="row_label_values" 			type="stringlist" 	help="List of row labels."></property>
			<property name="row_label_horiz_alignment" 	type="option" 		help="Horizontal alignment of row label text.">
				<option name="wxALIGN_LEFT" 	help="Align labels left."/>
				<option name="wxALIGN_CENTRE" 	help="Align labels centered."/>
				<option name="wxALIGN_RIGHT" 	help="Align labels right."/>
			  wxALIGN_CENTRE
			</property>
			<property name="row_label_vert_alignment" type="option" help="Vertical alignment of row label text.">
				<option name="wxALIGN_TOP" 		help="Align labels top."/>
				<option name="wxALIGN_CENTRE" 	help="Align labels centered."/>
				<option name="wxALIGN_BOTTOM" 	help="Align labels bottom."/>
				wxALIGN_CENTRE
			</property>
		</category>
		<category name="Label Appearance">
			<property name="label_bg" 	type="wxColour" help="Background color for row and column labels."/>
			<property name="label_font" type="wxFont" 	help="Font for row and column labels."/>
			<property name="label_text" type="wxColour" help="Colour for row and column label text."/>
		</category>
		<category name="Cell Defaults">
			<property name="cell_bg" 	type="wxColour" help="Default cell background color."/>
			<property name="cell_font" 	type="wxFont" 	help="Default cell font."/>
			<property name="cell_text" 	type="wxColour" help="Default cell text color."/>
			<property name="cell_horiz_alignment" type="option" help="Default horizontal alignment of cell values.">
				<option name="wxALIGN_LEFT" 	help="Align left."/>
				<option name="wxALIGN_CENTRE" 	help="Align centered."/>
				<option name="wxALIGN_RIGHT" 	help="Align right."/>
				wxALIGN_LEFT
			</property>
			<property name="cell_vert_alignment" type="option" help="Default vertical alignment of cell values.">
				<option name="wxALIGN_TOP" 		help="Align top."/>
				<option name="wxALIGN_CENTRE" 	help="Align centered."/>
				<option name="wxALIGN_BOTTOM" 	help="Align bottom."/>
			wxALIGN_TOP
			</property>
		</category>
		<event name="OnGridCellLeftClick" 		class="wxGridEvent" 				help="The user clicked a cell with the left mouse button. Processes a wxEVT_GRID_CELL_LEFT_CLICK." />
		<event name="OnGridCellRightClick" 		class="wxGridEvent" 				help="The user clicked a cell with the right mouse button. Processes a wxEVT_GRID_CELL_RIGHT_CLICK." />
		<event name="OnGridCellLeftDClick" 		class="wxGridEvent" 				help="The user double-clicked a cell with the left mouse button. Processes a wxEVT_GRID_CELL_LEFT_DCLICK." />
		<event name="OnGridCellRightDClick" 	class="wxGridEvent" 				help="The user double-clicked a cell with the right mouse button. Processes a wxEVT_GRID_CELL_RIGHT_DCLICK." />
		<event name="OnGridLabelLeftClick" 		class="wxGridEvent" 				help="The user clicked a label with the left mouse button. Processes a wxEVT_GRID_LABEL_LEFT_CLICK." />
		<event name="OnGridLabelRightClick" 	class="wxGridEvent" 				help="The user clicked a label with the right mouse button. Processes a wxEVT_GRID_LABEL_RIGHT_CLICK." />
		<event name="OnGridLabelLeftDClick" 	class="wxGridEvent" 				help="The user double-clicked a label with the left mouse button. Processes a wxEVT_GRID_LABEL_LEFT_DCLICK." />
		<event name="OnGridLabelRightDClick" 	class="wxGridEvent" 				help="The user double-clicked a label with the right mouse button. Processes a wxEVT_GRID_LABEL_RIGHT_DCLICK." />
		<event name="OnGridCellChange" 			class="wxGridEvent" 				help="The user changed the data in a cell. Processes a wxEVT_GRID_CELL_CHANGE." />
		<event name="OnGridSelectCell" 			class="wxGridEvent" 				help="The user moved to, and selected a cell. Processes a wxEVT_GRID_SELECT_CELL." />
		<event name="OnGridEditorHidden" 		class="wxGridEvent" 				help="The editor for a cell was hidden. Processes a wxEVT_GRID_EDITOR_HIDDEN." />
		<event name="OnGridEditorShown" 		class="wxGridEvent" 				help="The editor for a cell was shown. Processes a wxEVT_GRID_EDITOR_SHOWN." />
		<event name="OnGridCmdCellLeftClick" 	class="wxGridEvent" 				help="The user clicked a cell with the left mouse button; variant taking a window identifier. Processes a wxEVT_GRID_CELL_LEFT_CLICK." />
		<event name="OnGridCmdCellRightClick" 	class="wxGridEvent" 				help="The user clicked a cell with the right mouse button; variant taking a window identifier. Processes a wxEVT_GRID_CELL_RIGHT_CLICK." />
		<event name="OnGridCmdCellLeftDClick" 	class="wxGridEvent" 				help="The user double-clicked a cell with the left mouse button; variant taking a window identifier. Processes a wxEVT_GRID_CELL_LEFT_DCLICK." />
		<event name="OnGridCmdCellRightDClick" 	class="wxGridEvent" 				help="The user double-clicked a cell with the right mouse button; variant taking a window identifier. Processes a wxEVT_GRID_CELL_RIGHT_DCLICK." />
		<event name="OnGridCmdLabelLeftClick" 	class="wxGridEvent" 				help="The user clicked a label with the left mouse button; variant taking a window identifier. Processes a wxEVT_GRID_LABEL_LEFT_CLICK" />
		<event name="OnGridCmdLabelRightClick" 	class="wxGridEvent" 				help="The user clicked a label with the right mouse button; variant taking a window identifier. Processes a wxEVT_GRID_LABEL_RIGHT_CLICK." />
		<event name="OnGridCmdLabelLeftDClick" 	class="wxGridEvent" 				help="The user double-clicked a label with the left mouse button; variant taking a window identifier. Processes a wxEVT_GRID_LABEL_LEFT_DCLICK." />
		<event name="OnGridCmdLabelRightDClick" class="wxGridEvent" 				help="The user double-clicked a label with the right mouse button; variant taking a window identifier. Processes a wxEVT_GRID_LABEL_RIGHT_DCLICK." />
		<event name="OnGridCmdCellChange" 		class="wxGridEvent" 				help="The user changed the data in a cell; variant taking a window identifier. Processes a wxEVT_GRID_CELL_CHANGE." />
		<event name="OnGridCmdSelectCell" 		class="wxGridEvent" 				help="The user moved to, and selected a cell; variant taking a window identifier. Processes a wxEVT_GRID_SELECT_CELL." />
		<event name="OnGridCmdEditorHidden" 	class="wxGridEvent" 				help="The editor for a cell was hidden; variant taking a window identifier. Processes a wxEVT_GRID_EDITOR_HIDDEN." />
		<event name="OnGridCmdEditorShown" 		class="wxGridEvent" 				help="The editor for a cell was shown; variant taking a window identifier. Processes a wxEVT_GRID_EDITOR_SHOWN." />
		<event name="OnGridColSize" 			class="wxGridSizeEvent" 			help="The user resized a column by dragging it. Processes a wxEVT_GRID_COL_SIZE." />
		<event name="OnGridRowSize" 			class="wxGridSizeEvent" 			help="The user resized a row by dragging it. Processes a wxEVT_GRID_ROW_SIZE." />
		<event name="OnGridCmdColSize" 			class="wxGridSizeEvent" 			help="The user resized a column by dragging it; variant taking a window identifier. Processes a wxEVT_GRID_COL_SIZE." />
		<event name="OnGridCmdRowSize" 			class="wxGridSizeEvent" 			help="The user resized a row by dragging it; variant taking a window identifier. Processes a wxEVT_GRID_ROW_SIZE." />
		<event name="OnGridRangeSelect" 		class="wxGridRangeSelectEvent" 		help="The user selected a group of contiguous cells. Processes a wxEVT_GRID_RANGE_SELECT." />
		<event name="OnGridCmdRangeSelect" 		class="wxGridRangeSelectEvent" 		help="The user selected a group of contiguous cells; variant taking a window identifier. Processes a wxEVT_GRID_RANGE_SELECT." />
		<event name="OnGridEditorCreated" 		class="wxGridEditorCreatedEvent" 	help="The editor for a cell was created. Processes a wxEVT_GRID_EDITOR_CREATED." />
		<event name="OnGridCmdEditorCreated" 	class="wxGridEditorCreatedEvent" 	help="The editor for a cell was created; variant taking a window identifier. Processes a wxEVT_GRID_EDITOR_CREATED." />
	</objectinfo>

	<objectinfo class="wxMediaCtrl" startgroup="1" icon="mediactrl.xpm" type="widget">
		<inherits class="wxControl" />	
		<inherits class="wxWindow" />
		<property name="name" type="text">m_mediaCtrl</property>
		<property name="file" type="file" help="The path to media file."/>
		<property name="play" type="bool" help="Play the media file"/>
		<property name="playback_rate" type="float" help="Sets the playback rate, or speed of the media, to that referred by dRate. 1.0 represents normal speed, while 2.0 represents twice the normal speed of the media, for example. Not supported on the GStreamer (Unix) backend.">1</property>
		<property name="volume" type="float" help="Sets the volume of the media from a 0.0 to 1.0 range to that referred by dVolume. 1.0 represents full volume, while 0.5 represents half (50 percent) volume, for example. Note that this may not be exact due to conversion and rounding errors, although setting the volume to full or none is always exact.">1</property>
		<property name="player_controls" type="option">
			<option name="STEP" help="wxMEDIACTRLPLAYERCONTROLS_STEP, Step controls like fastfoward, step one frame etc. "/>		
			<option name="VOLUME" help="wxMEDIACTRLPLAYERCONTROLS_VOLUME, Volume controls like the speaker icon, volume slider, etc. "/>
			<option name="DEFAULT" help="wxMEDIACTRLPLAYERCONTROLS_DEFAULT, Default controls for the toolkit. Currently a typedef for wxMEDIACTRLPLAYERCONTROLS_STEP and wxMEDIACTRLPLAYERCONTROLS_VOLUME. "/>
			<option name="NONE" help="wxMEDIACTRLPLAYERCONTROLS_NONE, No controls. return wxMediaCtrl to it's default state. "/>
		</property>
	</objectinfo>

	<objectinfo class="wxRichTextCtrl" icon="richtextctrl.xpm" type="expanded_widget">
		<inherits class="wxWindow">
			<property name="window_style">wxVSCROLL|wxHSCROLL|wxNO_BORDER|wxWANTS_CHARS</property>
		</inherits>
		<property name="name" type="text">m_richText</property>
		<property name="style" type="bitlist">
			<option name="wxTE_PROCESS_ENTER" help="The control will generate the event wxEVT_COMMAND_TEXT_ENTER (otherwise pressing Enter key is either processed internally by the control or used for navigation between dialog controls)."/>
			<option name="wxTE_PROCESS_TAB"   help="The control will receive wxEVT_CHAR events for TAB pressed - normally, TAB is used for passing to the next control in a dialog instead. For the control created with this style, you can still use Ctrl-Enter to pass to the next control from the keyboard."/>
			<option name="wxTE_READONLY"      help="The text will not be user-editable."/>
			<option name="wxTE_AUTO_URL"      help="Highlight the URLs and generate the wxTextUrl events when mouse events occur over them."/>
		</property>
		<event name="OnText" 						class="wxCommandEvent" help="Respond to a wxEVT_COMMAND_TEXT_UPDATED event, generated when the text changes. Notice that this event will always be sent when the text controls contents changes - whether this is due to user input or comes from the program itself (for example, if SetValue() is called)" />
		<event name="OnTextEnter" 					class="wxCommandEvent" help="Respond to a wxEVT_COMMAND_TEXT_ENTER event, generated when enter is pressed in a text control (which must have wxTE_PROCESS_ENTER style for this event to be generated)." />
		<event name="OnTextURL" 					class="wxTextUrlEvent" help="A mouse event occurred over an URL in the text control (wxMSW and wxGTK2 only)" />
		<event name="OnTextMaxLen" 					class="wxCommandEvent" help="User tried to enter more text into the control than the limit set by SetMaxLength." />
		<event name="OnRichTextCharacter" 			class="wxCommandEvent" help="Process a wxEVT_COMMAND_RICHTEXT_CHARACTER event, generated when the user presses a character key. Valid event functions: GetFlags, GetPosition, GetCharacter." />
		<event name="OnRichTextDelete" 				class="wxCommandEvent" help="Process a wxEVT_COMMAND_RICHTEXT_DELETE event, generated when the user presses the backspace or delete key. Valid event functions: GetFlags, GetPosition." />
		<event name="OnRichTextReturn" 				class="wxCommandEvent" help="Process a wxEVT_COMMAND_RICHTEXT_RETURN event, generated when the user presses the return key. Valid event functions: GetFlags, GetPosition." />
		<event name="OnRichTextStyleChanged" 		class="wxCommandEvent" help="Process a wxEVT_COMMAND_RICHTEXT_STYLE_CHANGED event, generated when styling has been applied to the control. Valid event functions: GetPosition, GetRange." />
		<event name="OnRichTextStyleSheetChanged" 	class="wxCommandEvent" help="Process a wxEVT_COMMAND_RICHTEXT_STYLESHEET_CHANGING event, generated when the control's stylesheet has changed, for example the user added, edited or deleted a style. Valid event functions: GetRange, GetPosition." />
		<event name="OnRichTextStyleSheetReplacing" class="wxCommandEvent" help="Process a wxEVT_COMMAND_RICHTEXT_STYLESHEET_REPLACING event, generated when the control's stylesheet is about to be replaced, for example when a file is loaded into the control. Valid event functions: Veto, GetOldStyleSheet, GetNewStyleSheet." />
		<event name="OnRichTextStyleSheetReplaced" 	class="wxCommandEvent" help="Process a wxEVT_COMMAND_RICHTEXT_STYLESHEET_REPLACED event, generated when the control's stylesheet has been replaced, for example when a file is loaded into the control. Valid event functions: GetOldStyleSheet, GetNewStyleSheet." />
		<event name="OnRichTextContentInserted" 	class="wxCommandEvent" help="Process a wxEVT_COMMAND_RICHTEXT_CONTENT_INSERTED event, generated when content has been inserted into the control. Valid event functions: GetPosition, GetRange." />
		<event name="OnRichTextContentDeleted" 		class="wxCommandEvent" help="Process a wxEVT_COMMAND_RICHTEXT_CONTENT_DELETED event, generated when content has been deleted from the control. Valid event functions: GetPosition, GetRange." />
	</objectinfo>

	<objectinfo class="wxScrollBar" icon="scrolbar.xpm" type="widget">
		<inherits class="wxWindow" />
		<property name="name" 	type="text">m_scrollBar</property>
		<property name="value" 	type="uint" help="The position of the scrollbar in scroll units.">0</property>
		<property name="range" 	type="uint" help="The maximum position of the scrollbar.">100</property>
		<property name="thumbsize" 			help="The size of the thumb, or visible portion of the scrollbar, in scroll units." type="uint">1</property>
		<property name="pagesize" 			help="This is the number of scroll units that will be scrolled when the user pages up or down." type="uint">1</property>
		<property name="style" 	type="option">
			<option name="wxSB_HORIZONTAL" 	help="Specifies a horizontal scrollbar." />
			<option name="wxSB_VERTICAL"   	help="Specifies a vertical scrollbar." />
			wxSB_HORIZONTAL
		</property>
		<event name="OnScroll" 						class="wxScrollEvent" help="Process all scroll events." />
		<event name="OnScrollTop" 					class="wxScrollEvent" help="Process wxEVT_SCROLL_TOP scroll-to-top events (minimum position)." />
		<event name="OnScrollBottom" 				class="wxScrollEvent" help="Process wxEVT_SCROLL_BOTTOM scroll-to-bottom events (maximum position)." />
		<event name="OnScrollLineUp" 				class="wxScrollEvent" help="Process wxEVT_SCROLL_LINEUP line up events." />
		<event name="OnScrollLineDown" 				class="wxScrollEvent" help="Process wxEVT_SCROLL_LINEDOWN line down events." />
		<event name="OnScrollPageUp" 				class="wxScrollEvent" help="Process wxEVT_SCROLL_PAGEUP page up events." />
		<event name="OnScrollPageDown" 				class="wxScrollEvent" help="Process wxEVT_SCROLL_PAGEDOWN page down events." />
		<event name="OnScrollThumbTrack" 			class="wxScrollEvent" help="Process wxEVT_SCROLL_THUMBTRACK thumbtrack events (frequent events sent as the user drags the thumbtrack)." />
		<event name="OnScrollThumbRelease" 			class="wxScrollEvent" help="Process wxEVT_SCROLL_THUMBRELEASE thumb release events." />
		<event name="OnScrollChanged" 				class="wxScrollEvent" help="Process wxEVT_SCROLL_CHANGED end of scrolling events (MSW only)." />
		<event name="OnCommandScroll" 				class="wxScrollEvent" help="Process all scroll events. Variant taking a window identifier." />
		<event name="OnCommandScrollTop" 			class="wxScrollEvent" help="Process wxEVT_SCROLL_TOP scroll-to-top events (minimum position). Variant taking a window identifier." />
		<event name="OnCommandScrollBottom" 		class="wxScrollEvent" help="Process wxEVT_SCROLL_BOTTOM scroll-to-bottom events (maximum position). Variant taking a window identifier." />
		<event name="OnCommandScrollLineUp" 		class="wxScrollEvent" help="Process wxEVT_SCROLL_LINEUP line up events. Variant taking a window identifier." />
		<event name="OnCommandScrollLineDown" 		class="wxScrollEvent" help="Process wxEVT_SCROLL_LINEDOWN line down events. Variant taking a window identifier." />
		<event name="OnCommandScrollPageUp" 		class="wxScrollEvent" help="Process wxEVT_SCROLL_PAGEUP page up events. Variant taking a window identifier." />
		<event name="OnCommandScrollPageDown" 		class="wxScrollEvent" help="Process wxEVT_SCROLL_PAGEDOWN page down events. Variant taking a window identifier." />
		<event name="OnCommandScrollThumbTrack" 	class="wxScrollEvent" help="Process wxEVT_SCROLL_THUMBTRACK thumbtrack events (frequent events sent as the user drags the thumbtrack). Variant taking a window identifier." />
		<event name="OnCommandScrollThumbRelease" 	class="wxScrollEvent" help="Process wxEVT_SCROLL_THUMBRELEASE thumb release events. Variant taking a window identifier." />
		<event name="OnCommandScrollChanged" 		class="wxScrollEvent" help="Process wxEVT_SCROLL_CHANGED end of scrolling events (MSW only). Variant taking a window identifier." />
	</objectinfo>

	<objectinfo class="wxSearchCtrl" icon="srchctrl.xpm" type="widget">
		<inherits class="wxWindow" />
		<property name="name" 	type="text">m_searchCtrl</property>
		<property name="style" 	type="bitlist">
			<option name="wxTE_PROCESS_ENTER" help="The control will generate the event wxEVT_COMMAND_TEXT_ENTER (otherwise pressing Enter key is either processed internally by the control or used for navigation between dialog controls)."/>
			<option name="wxTE_PROCESS_TAB"   help="The control will receive wxEVT_CHAR events for TAB pressed - normally, TAB is used for passing to the next control in a dialog instead. For the control created with this style, you can still use Ctrl-Enter to pass to the next control from the keyboard."/>
			<option name="wxTE_NOHIDESEL"     help="By default, the Windows text control doesn't show the selection when it doesn't have focus - use this style to force it to always show it. It doesn't do anything under other platforms."/>
			<option name="wxTE_LEFT"          help="The text in the control will be left-justified (default)."/>
			<option name="wxTE_CENTRE"        help="The text in the control will be centered (currently wxMSW and wxGTK2 only). "/>
			<option name="wxTE_RIGHT"         help="The text in the control will be right-justified (currently wxMSW and wxGTK2 only)."/>
			<option name="wxTE_CAPITALIZE"    help="On PocketPC and Smartphone, causes the first letter to be capitalized."/>
		</property>
		<property name="value" 			type="wxString_i18n" />
		<property name="search_button" 	type="bool" 			help="Shows or hides the search button.">1</property>
		<property name="cancel_button" 	type="bool" 			help="Shows or hides the cancel button.">0</property>
		<event name="OnText" 			class="wxCommandEvent" 	help="Respond to a wxEVT_COMMAND_TEXT_UPDATED event, generated when the text changes. Notice that this event will always be sent when the text controls contents changes - whether this is due to user input or comes from the program itself (for example, if SetValue() is called)" />
		<event name="OnTextEnter" 		class="wxCommandEvent" 	help="Respond to a wxEVT_COMMAND_TEXT_ENTER event, generated when enter is pressed in a text control (which must have wxTE_PROCESS_ENTER style for this event to be generated)." />
		<event name="OnSearchButton" 	class="wxCommandEvent" 	help="Respond to a wxEVT_SEARCHCTRL_SEARCH_BTN event, generated when the search button is clicked. Note that this does not initiate a search." />
		<event name="OnCancelButton" 	class="wxCommandEvent" 	help="Respond to a wxEVT_SEARCHCTRL_CANCEL_BTN event, generated when the cancel button is clicked." />
	</objectinfo>

	<objectinfo class="wxSpinButton" icon="spinbutt.xpm" type="widget">
		<inherits class="wxWindow" />
		<property name="name" 	type="text">m_spinBtn</property>
		<property name="style" 	type="bitlist">
			<option name="wxSP_HORIZONTAL" 				help="Specifies a horizontal spin button (note that this style is not supported in wxGTK)." />
			<option name="wxSP_VERTICAL"   				help="Specifies a vertical spin button." />
			<option name="wxSP_ARROW_KEYS" 				help="The user can use arrow keys to change the value." />
			<option name="wxSP_WRAP"       				help="The value wraps at the minimum and maximum." /></property>
		<event name="OnSpin" 		class="wxSpinEvent" help="Generated whenever an arrow is pressed." />
		<event name="OnSpinUp" 		class="wxSpinEvent" help="Generated when left/up arrow is pressed." />
		<event name="OnSpinDown" 	class="wxSpinEvent" help="Generated when right/down arrow is pressed." />
	</objectinfo>

	<objectinfo class="wxSpinCtrl" icon="spinctrl.xpm" type="widget">
		<inherits class="wxWindow" />
		<property name="name" 		type="text">m_spinCtrl</property>
		<property name="value" 		type="wxString"></property>
		<property name="min" 		type="int"     	help="Minimal value.">0</property>
		<property name="max" 		type="int"     	help="Maximal value.">10</property>
		<property name="initial" 	type="uint" 	help="Initial value.">0</property>
		<property name="style" 		type="bitlist">
			<option name="wxSP_ARROW_KEYS"     		help="The user can use arrow keys to change the value." />
			<option name="wxSP_WRAP"           		help="The value wraps at the minimum and maximum." />
			wxSP_ARROW_KEYS
		</property>
		<event name="OnSpinCtrl" 		class="wxSpinEvent" 	help="Generated whenever the numeric value of the spinctrl is updated." />
		<event name="OnSpinCtrlText" 	class="wxCommandEvent" 	help="Generated whenever the user modifies the text in the edit part of the spin control directly." />
	</objectinfo>

	<objectinfo class="wxToggleButton" icon="tglbtn.xpm" type="widget">
		<inherits class="wxWindow" />
		<property name="name" 	type="text">m_toggleBtn</property>
		<property name="label" 	type="wxString_i18n">Toggle me!</property>
		<property name="value" 	type="bool">0</property>
		<event name="OnToggleButton" class="wxCommandEvent" help="Process a wxEVT_COMMAND_RADIOBUTTON_SELECTED event, when the radiobutton is clicked." />
	</objectinfo>

	<objectinfo class="wxTreeCtrl" icon="treectrl.xpm" type="widget">
		<inherits class="wxTreeCtrlBase"/>
		<inherits class="wxWindow" />
		<property name="name" 	type="text">m_treeCtrl</property>
		<property name="style" 	type="bitlist">
			<option name="wxTR_EDIT_LABELS"             help="Use this style if you wish the user to be able to edit labels in the tree control." />
			<option name="wxTR_NO_BUTTONS"              help="For convenience to document that no buttons are to be drawn." />
			<option name="wxTR_HAS_BUTTONS"             help="Use this style to show + and - buttons to the left of parent items." />
			<option name="wxTR_TWIST_BUTTONS"           help="??" />
			<option name="wxTR_NO_LINES"                help="Use this style to hide vertical level connectors." />
			<option name="wxTR_FULL_ROW_HIGHLIGHT"      help="Use this style to have the background colour and the selection highlight extend over the entire horizontal row of the tree control window. (This flag is ignored under Windows unless you specify wxTR_NO_LINES as well.)" />
			<option name="wxTR_LINES_AT_ROOT"           help="Use this style to show lines between root nodes. Only applicable if wxTR_HIDE_ROOT is set and wxTR_NO_LINES is not set." />
			<option name="wxTR_HIDE_ROOT"               help="Use this style to suppress the display of the root node, effectively causing the first-level nodes to appear as a series of root nodes." />
			<option name="wxTR_ROW_LINES"               help="Use this style to draw a contrasting border between displayed rows." />
			<option name="wxTR_HAS_VARIABLE_ROW_HEIGHT" help="Use this style to cause row heights to be just big enough to fit the content. If not set, all rows use the largest row height. The default is that this flag is unset. Generic only." />
			<option name="wxTR_SINGLE"                  help="For convenience to document that only one item may be selected at a time. Selecting another item causes the current selection, if any, to be deselected. This is the default." />
			<option name="wxTR_MULTIPLE"                help="Use this style to allow a range of items to be selected. If a second range is selected, the current range, if any, is deselected." />
			<option name="wxTR_EXTENDED"                help="Use this style to allow disjoint items to be selected. (Only partially implemented; may not work in all cases.)" />
			<option name="wxTR_DEFAULT_STYLE"           help="The set of flags that are closest to the defaults for the native control for a particular toolkit." />
			wxTR_DEFAULT_STYLE
		</property>
		<event name="OnTreeGetInfo" 		class="wxTreeEvent" help="Request information from the application." />
		<event name="OnTreeSetInfo" 		class="wxTreeEvent" help="Information is being supplied." />
		<event name="OnTreeItemGetTooltip" 	class="wxTreeEvent" help="The opportunity to set the item tooltip is being given to the application (call wxTreeEvent::SetToolTip). Windows only." />
		<event name="OnTreeStateImageClick" class="wxTreeEvent" help="The state image has been clicked. Windows only." />
	</objectinfo>

	<objectinfo class="wxHtmlWindow" icon="htmlwin.xpm" type="widget">
		<inherits class="wxWindow" />
		<property name="name" type="text">m_htmlWin</property>
		<property name="style" type="bitlist">
			<option name="wxHW_SCROLLBAR_NEVER" help="Never display scrollbars, not even when the page is larger than the window." />
			<option name="wxHW_SCROLLBAR_AUTO"  help="Display scrollbars only if page's size exceeds window's size." />
			<option name="wxHW_NO_SELECTION"    help="Don't allow the user to select text." />
			wxHW_SCROLLBAR_AUTO
		</property>
		<event name="OnHtmlCellClicked" class="wxHtmlCellEvent" help="A wxHtmlCell was clicked." />
		<event name="OnHtmlCellHover" 	class="wxHtmlCellEvent" help="The mouse passed over a wxHtmlCell." />
		<event name="OnHtmlLinkClicked" class="wxHtmlLinkEvent" help="A wxHtmlCell which contains an hyperlink was clicked." />
	</objectinfo>

	<objectinfo class="wxHyperlinkCtrl" icon="hyperlink.xpm" type="widget">
		<inherits class="wxWindow" />
		<property name="name" 			type="text">m_hyperlink</property>
		<property name="label" 			type="wxString_i18n" 	help="Text of the hyperlink">wxFB Website</property>
		<property name="url" 			type="wxString" 		help="Target of the hyperlink">http://www.wxformbuilder.org</property>
		<property name="hover_color" 	type="wxColour" 		help="The colour used to print the label of the hyperlink when the mouse is over the control."/>
		<property name="normal_color" 	type="wxColour" 		help="The colour used to print the label when the link has never been clicked before (i.e. the link has not been visited) and the mouse is not over the control."/>
		<property name="visited_color" 	type="wxColour" 		help="The colour used to print the label when the mouse is not over the control and the link has already been clicked before (i.e. the link has been visited)."/>
		<property name="style" 			type="bitlist">
			<option name="wxHL_ALIGN_LEFT" 		help="Align the text to the left."/>
			<option name="wxHL_ALIGN_RIGHT" 	help="Align the text to the right."/>
			<option name="wxHL_ALIGN_CENTRE" 	help="Center the text (horizontally)."/>
			<option name="wxHL_CONTEXTMENU" 	help="Pop up a context menu when the hyperlink is right-clicked. The context menu contains a &quot;Copy URL&quot; menu item which is automatically handled by the hyperlink and which just copies in the clipboard the URL (not the label) of the control."/>
			<option name="wxHL_DEFAULT_STYLE" 	help="The default style for wxHyperlinkCtrl: wxNO_BORDER|wxHL_CONTEXTMENU|wxHL_ALIGN_CENTRE."/>
			wxHL_DEFAULT_STYLE
		</property>
		<event name="OnHyperlink" class="wxHyperlinkEvent" help="The hyperlink was (left) clicked. If this event is not handled in user's code (or it's skipped; see wxEvent::Skip), then a call to wxLaunchDefaultBrowser is done with the hyperlink's URL."/>
	</objectinfo>

	<objectinfo class="wxSimpleHtmlListBox" icon="htmllbox.xpm" type="widget">
		<inherits class="wxWindow" />
		<property name="name" type="text">m_htmlListBox</property>
		<property name="style" type="bitlist">
			<option name="wxHLB_DEFAULT_STYLE" help="The default style: wxBORDER_SUNKEN." />
			<option name="wxHW_SCROLLBAR_AUTO"  help="Multiple-selection list: the user can toggle multiple items on and off." />
			wxHLB_DEFAULT_STYLE
		</property>
		<event name="OnHtmlCellClicked" class="wxHtmlCellEvent" help="A wxHtmlCell was clicked." />
		<event name="OnHtmlCellHover" 	class="wxHtmlCellEvent" help="The mouse passed over a wxHtmlCell." />
		<event name="OnHtmlLinkClicked" class="wxHtmlLinkEvent" help="A wxHtmlCell which contains an hyperlink was clicked." />
	</objectinfo>

</package>
