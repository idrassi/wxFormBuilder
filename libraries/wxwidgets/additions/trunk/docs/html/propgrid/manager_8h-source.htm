<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN">
<html><head><meta http-equiv="Content-Type" content="text/html;charset=iso-8859-1">
<title>wxPropertyGrid: manager.h Source File</title>
<link href="doxygen.css" rel="stylesheet" type="text/css">
</head><body>
<!-- Generated by Doxygen 1.3.6 -->
<div class="qindex"><a class="qindex" href="index.htm">Main&nbsp;Page</a> | <a class="qindex" href="modules.htm">Modules</a> | <a class="qindex" href="hierarchy.htm">Class&nbsp;Hierarchy</a> | <a class="qindex" href="annotated.htm">Class&nbsp;List</a> | <a class="qindex" href="files.htm">File&nbsp;List</a> | <a class="qindex" href="functions.htm">Class&nbsp;Members</a></div>
<h1>manager.h</h1><div class="fragment"><pre>00001 
00002 <span class="comment">// Name:        manager.h</span>
00003 <span class="comment">// Purpose:     wxPropertyGridManager</span>
00004 <span class="comment">// Author:      Jaakko Salli</span>
00005 <span class="comment">// Modified by:</span>
00006 <span class="comment">// Created:     Jan-14-2005</span>
00007 <span class="comment">// RCS-ID:      $Id:</span>
00008 <span class="comment">// Copyright:   (c) Jaakko Salli</span>
00009 <span class="comment">// Licence:     wxWindows license</span>
00011 <span class="comment"></span>
00012 <span class="preprocessor">#ifndef _WX_PROPGRID_MANAGER_H_</span>
00013 <span class="preprocessor"></span><span class="preprocessor">#define _WX_PROPGRID_MANAGER_H_</span>
00014 <span class="preprocessor"></span>
00015 <span class="preprocessor">#if defined(__GNUG__) &amp;&amp; !defined(NO_GCC_PRAGMA)</span>
00016 <span class="preprocessor"></span><span class="preprocessor">    #pragma interface "manager.cpp"</span>
00017 <span class="preprocessor"></span><span class="preprocessor">#endif</span>
00018 <span class="preprocessor"></span>
00019 <span class="comment">// -----------------------------------------------------------------------</span>
00020 
00021 <span class="keyword">extern</span> WXDLLIMPEXP_PG <span class="keyword">const</span> wxChar *wxPropertyGridManagerNameStr;
00022 
00023 <span class="comment">// -----------------------------------------------------------------------</span>
00024 
00025 <span class="comment">// This is for mirroring wxPropertyGrid methods with ease.</span>
00026 <span class="comment">// Needs to be in hear because of inlines.</span>
00027 <span class="preprocessor">#define wxPG_IMPLEMENT_PGMAN_METHOD_NORET1(NAME,AT1) \</span>
00028 <span class="preprocessor">wxPG_IPAM_DECL void wxPropertyGridManager::NAME ( wxPGId id, AT1 _av1_ ) \</span>
00029 <span class="preprocessor">{ \</span>
00030 <span class="preprocessor">    wxPGProperty* p = wxPGIdToPtr(id); \</span>
00031 <span class="preprocessor">    wxPropertyGridState* pState = p-&gt;GetParentState(); \</span>
00032 <span class="preprocessor">    wxASSERT ( pState != (wxPropertyGridState*) NULL ); \</span>
00033 <span class="preprocessor">    if ( pState == m_propGrid.m_pState ) m_propGrid.NAME(id,_av1_); \</span>
00034 <span class="preprocessor">    else pState-&gt;NAME(p,_av1_); \</span>
00035 <span class="preprocessor">} \</span>
00036 <span class="preprocessor">wxPG_IPAM_DECL void wxPropertyGridManager::NAME ( wxPGNameStr name, AT1 _av1_ ) \</span>
00037 <span class="preprocessor">{ \</span>
00038 <span class="preprocessor">    wxPropertyGridState* pState; \</span>
00039 <span class="preprocessor">    wxPGId id = GetPropertyByName2(name,&amp;pState); \</span>
00040 <span class="preprocessor">    wxASSERT ( pState != (wxPropertyGridState*) NULL ); \</span>
00041 <span class="preprocessor">    if ( pState == m_propGrid.m_pState ) m_propGrid.NAME(id,_av1_); \</span>
00042 <span class="preprocessor">    else pState-&gt;NAME(wxPGIdToPtr(id),_av1_); \</span>
00043 <span class="preprocessor">}</span>
00044 <span class="preprocessor"></span>
00045 <span class="keyword">class </span>wxPropertyGridPageData;
00046 
00047 <span class="preprocessor">#define wxPG_IPAM_DECL inline</span>
00048 <span class="preprocessor"></span>
00088 <span class="comment">// BM_MANAGER</span>
<a name="l00089"></a><a class="code" href="classwxPropertyGridManager.htm">00089</a> <span class="keyword">class </span>WXDLLIMPEXP_PG wxPropertyGridManager : <span class="keyword">public</span> wxPanel, <span class="keyword">public</span> <a class="code" href="classwxPropertyContainerMethods.htm">wxPropertyContainerMethods</a>
00090 {
00091         DECLARE_CLASS(wxPropertyGridManager)
00092 
00093 <span class="keyword">public</span>:
00094 
00098     wxPropertyGridManager();
00099 
00104     wxPropertyGridManager(wxWindow *parent, wxWindowID <span class="keywordtype">id</span> = -1,
00105                       <span class="keyword">const</span> wxPoint&amp; pos = wxDefaultPosition,
00106                       <span class="keyword">const</span> wxSize&amp; size = wxDefaultSize,
00107                       <span class="keywordtype">long</span> style = <a class="code" href="group__wndflags.htm#ga18">wxPGMAN_DEFAULT_STYLE</a>,
00108                       <span class="keyword">const</span> wxChar* name = wxPropertyGridManagerNameStr);
00109 
00111     <span class="keyword">virtual</span> ~wxPropertyGridManager();
00112 
<a name="l00130"></a><a class="code" href="classwxPropertyGridManager.htm#wxPropertyGridManagera0">00130</a>     <span class="keyword">inline</span> <span class="keywordtype">int</span> AddPage ( <span class="keyword">const</span> wxString&amp; label, <span class="keyword">const</span> wxBitmap&amp; bmp = wxNullBitmap )
00131     {
00132         <span class="keywordflow">return</span> InsertPage (-1,label,bmp);
00133     }
00134 
<a name="l00136"></a><a class="code" href="classwxPropertyGridManager.htm#wxPropertyGridManagera8">00136</a>     <span class="keyword">inline</span> wxPGId AppendCategory ( <span class="keyword">const</span> wxString&amp; label, <span class="keyword">const</span> wxString&amp; name = wxPG_LABEL )
00137     {
00138         wxASSERT ( m_targetState );
00139         <span class="keywordflow">return</span> m_targetState-&gt;Append ( <span class="keyword">new</span> <a class="code" href="classwxPropertyCategoryClass.htm">wxPropertyCategoryClass</a>(label,name) );
00140     }
00141 
<a name="l00143"></a><a class="code" href="classwxPropertyGridManager.htm#wxPropertyGridManagera7">00143</a>     <span class="keyword">inline</span> wxPGId Append ( <a class="code" href="classwxPGProperty.htm">wxPGProperty</a>* property )
00144     {
00145         wxASSERT ( m_targetState );
00146         <span class="keywordflow">return</span> m_targetState-&gt;Append(property);
00147     }
00148 
00149     <span class="keyword">inline</span> wxPGId Append ( <span class="keyword">const</span> wxString&amp; label, <span class="keyword">const</span> wxString&amp; name, <span class="keyword">const</span> wxString&amp; value = wxEmptyString )
00150     {
00151         wxASSERT ( m_targetState );
00152         <span class="keywordflow">return</span> m_targetState-&gt;Append ( wxStringProperty(label,name,value) );
00153     }
00154 
00155     <span class="keyword">inline</span> wxPGId Append ( <span class="keyword">const</span> wxString&amp; label, <span class="keyword">const</span> wxString&amp; name, <span class="keywordtype">int</span> value )
00156     {
00157         wxASSERT ( m_targetState );
00158         <span class="keywordflow">return</span> m_targetState-&gt;Append ( wxIntProperty(label,name,value) );
00159     }
00160 
00161     <span class="keyword">inline</span> wxPGId Append ( <span class="keyword">const</span> wxString&amp; label, <span class="keyword">const</span> wxString&amp; name, <span class="keywordtype">double</span> value )
00162     {
00163         wxASSERT ( m_targetState );
00164         <span class="keywordflow">return</span> m_targetState-&gt;Append ( wxFloatProperty(label,name,value) );
00165     }
00166 
00167     <span class="keyword">inline</span> wxPGId Append ( <span class="keyword">const</span> wxString&amp; label, <span class="keyword">const</span> wxString&amp; name, <span class="keywordtype">bool</span> value )
00168     {
00169         wxASSERT ( m_targetState );
00170         <span class="keywordflow">return</span> m_targetState-&gt;Append ( wxBoolProperty(label,name,value) );
00171     }
00172 
<a name="l00174"></a><a class="code" href="classwxPropertyGridManager.htm#wxPropertyGridManagera10">00174</a>     <span class="keyword">inline</span> wxPGId AppendIn ( wxPGId <span class="keywordtype">id</span>, <a class="code" href="classwxPGProperty.htm">wxPGProperty</a>* property )
00175     {
00176         wxASSERT ( m_targetState );
00177         <span class="keywordflow">return</span> m_targetState-&gt;Insert((<a class="code" href="classwxPGPropertyWithChildren.htm">wxPGPropertyWithChildren</a>*)(<a class="code" href="classwxPGProperty.htm">wxPGProperty</a>*)<span class="keywordtype">id</span>,-1,property);
00178     }
00179 
<a name="l00181"></a><a class="code" href="classwxPropertyGridManager.htm#wxPropertyGridManagera9">00181</a>     <span class="keyword">inline</span> wxPGId AppendIn ( wxPGNameStr name, <a class="code" href="classwxPGProperty.htm">wxPGProperty</a>* property )
00182     {
00183         wxASSERT ( m_targetState );
00184         <span class="keywordflow">return</span> m_targetState-&gt;Insert((<a class="code" href="classwxPGPropertyWithChildren.htm">wxPGPropertyWithChildren</a>*)(<a class="code" href="classwxPGProperty.htm">wxPGProperty</a>*)m_targetState-&gt;BaseGetPropertyByName(name),-1,property);
00185     }
00186     
00187     <span class="keywordtype">void</span> ClearModifiedStatus ( wxPGId <span class="keywordtype">id</span> );
00188 
00189     <span class="keyword">inline</span> <span class="keywordtype">void</span> ClearModifiedStatus ()
00190     {
00191         m_propGrid.ClearModifiedStatus();
00192     }
00193 
00194     <span class="keywordtype">bool</span> ClearPropertyValue( wxPGId <span class="keywordtype">id</span> );
00195     <span class="keywordtype">bool</span> ClearPropertyValue( wxPGNameStr name );
00196     
00198     <span class="keywordtype">bool</span> Collapse ( wxPGId <span class="keywordtype">id</span> );
00199     <span class="keywordtype">bool</span> Collapse ( wxPGNameStr name );
00200 
<a name="l00202"></a><a class="code" href="classwxPropertyGridManager.htm#wxPropertyGridManagera18">00202</a>     <span class="keyword">inline</span> <span class="keywordtype">void</span> CollapseAll ()
00203     {
00204         m_targetState-&gt;ExpandAll(0);
00205     }
00206 
00210     <span class="keywordtype">void</span> Compact ( <span class="keywordtype">bool</span> compact );
00211 
00217     <span class="keywordtype">bool</span> Create(wxWindow *parent, wxWindowID <span class="keywordtype">id</span> = -1,
00218                 <span class="keyword">const</span> wxPoint&amp; pos = wxDefaultPosition,
00219                 <span class="keyword">const</span> wxSize&amp; size = wxDefaultSize,
00220                 <span class="keywordtype">long</span> style = wxPGMAN_DEFAULT_STYLE,
00221                 <span class="keyword">const</span> wxChar* name = wxPropertyGridManagerNameStr);
00222 
00224     <span class="keywordtype">void</span> Delete ( wxPGId <span class="keywordtype">id</span> );
00225     <span class="keywordtype">void</span> Delete ( wxPGNameStr name );
00226 
<a name="l00228"></a><a class="code" href="classwxPropertyGridManager.htm#wxPropertyGridManagera24">00228</a>     <span class="keyword">inline</span> <span class="keywordtype">bool</span> DisableProperty ( wxPGId <span class="keywordtype">id</span> ) { <span class="keywordflow">return</span> EnableProperty (<span class="keywordtype">id</span>,FALSE); }
00229 
<a name="l00231"></a><a class="code" href="classwxPropertyGridManager.htm#wxPropertyGridManagera23">00231</a>     <span class="keyword">inline</span> <span class="keywordtype">bool</span> DisableProperty ( wxPGNameStr name ) { <span class="keywordflow">return</span> EnableProperty (name,FALSE); }
00232 
<a name="l00236"></a><a class="code" href="classwxPropertyGridManager.htm#wxPropertyGridManagera25">00236</a>     <span class="keyword">inline</span> <span class="keywordtype">bool</span> EnableCategories ( <span class="keywordtype">bool</span> enable )
00237     {
00238         <span class="keywordtype">long</span> fl = m_windowStyle | <a class="code" href="group__wndflags.htm#ga1">wxPG_HIDE_CATEGORIES</a>;
00239         <span class="keywordflow">if</span> ( enable ) fl = m_windowStyle &amp; ~(<a class="code" href="group__wndflags.htm#ga1">wxPG_HIDE_CATEGORIES</a>);
00240         SetWindowStyleFlag(m_windowStyle);
00241         <span class="keywordflow">return</span> TRUE;
00242     }
00243 
00245     <span class="keywordtype">bool</span> EnableProperty ( wxPGId <span class="keywordtype">id</span>, <span class="keywordtype">bool</span> enable = TRUE );
00246     <span class="keywordtype">bool</span> EnableProperty ( wxPGNameStr name, <span class="keywordtype">bool</span> enable = TRUE );
00247 
<a name="l00251"></a><a class="code" href="classwxPropertyGridManager.htm#wxPropertyGridManagera29">00251</a>     <span class="keyword">inline</span> <span class="keywordtype">bool</span> EnsureVisible ( wxPGId <span class="keywordtype">id</span> )
00252     {
00253         <span class="keywordflow">return</span> EnsureVisible(<span class="keywordtype">id</span>,((<a class="code" href="classwxPGProperty.htm">wxPGProperty</a>*)<span class="keywordtype">id</span>)-&gt;GetParentState());
00254     }
00255 
<a name="l00259"></a><a class="code" href="classwxPropertyGridManager.htm#wxPropertyGridManagera28">00259</a>     <span class="keyword">inline</span> <span class="keywordtype">bool</span> EnsureVisible ( wxPGNameStr name )
00260     {
00261         <a class="code" href="classwxPropertyGridState.htm">wxPropertyGridState</a>* pstate;
00262         wxPGId <span class="keywordtype">id</span> = GetPropertyByName2(name,&amp;pstate);
00263         <span class="keywordflow">return</span> EnsureVisible(<span class="keywordtype">id</span>,pstate);
00264     }
00265 
00267     <span class="keywordtype">bool</span> Expand ( wxPGId <span class="keywordtype">id</span> );
00268     <span class="keywordtype">bool</span> Expand ( wxPGNameStr name );
00269 
<a name="l00271"></a><a class="code" href="classwxPropertyGridManager.htm#wxPropertyGridManagera32">00271</a>     <span class="keywordtype">void</span> ExpandAll ()
00272     {
00273         m_targetState-&gt;ExpandAll(1);
00274     }
00275 
00277     <span class="comment">/*wxColour GetCategoryColour ( wxPGId id )</span>
00278 <span class="comment">    {</span>
00279 <span class="comment">        return wxPropertyGrid::GetCategoryColour(id);</span>
00280 <span class="comment">    }</span>
00281 <span class="comment">    wxColour GetCategoryColour ( wxPGNameStr name ) { return GetCategoryColour(GetPropertyByName(name)); }*/</span>
00282 
<a name="l00284"></a><a class="code" href="classwxPropertyGridManager.htm#wxPropertyGridManagera36">00284</a>     <span class="keyword">inline</span> size_t GetChildrenCount ()
00285     {
00286         <span class="keywordflow">return</span> GetChildrenCount( wxPGId(m_propGrid.m_pState-&gt;m_properties) );
00287     }
00288 
00290     size_t GetChildrenCount ( <span class="keywordtype">int</span> page_index );
00291 
<a name="l00293"></a><a class="code" href="classwxPropertyGridManager.htm#wxPropertyGridManagera34">00293</a>     <span class="keyword">inline</span> size_t GetChildrenCount ( wxPGId <span class="keywordtype">id</span> )<span class="keyword"> const</span>
00294 <span class="keyword">    </span>{
00295         wxASSERT ( wxPGIdIsOk(<span class="keywordtype">id</span>) );
00296         <span class="keywordflow">return</span> ((<a class="code" href="classwxPGProperty.htm">wxPGProperty</a>*)<span class="keywordtype">id</span>)-&gt;GetChildCount();
00297     }
00298 
<a name="l00300"></a><a class="code" href="classwxPropertyGridManager.htm#wxPropertyGridManagera33">00300</a>     <span class="keyword">inline</span> size_t GetChildrenCount ( wxPGNameStr name ) { <span class="keywordflow">return</span> GetChildrenCount( <a class="code" href="classwxPropertyContainerMethods.htm#wxPropertyGridManagera55">GetPropertyByName</a>(name) ); }
00301 
<a name="l00303"></a><a class="code" href="classwxPropertyGridManager.htm#wxPropertyGridManagera37">00303</a>     <span class="keyword">inline</span> wxPGId GetFirst ()<span class="keyword"> const</span>
00304 <span class="keyword">    </span>{
00305         <span class="keywordflow">return</span> m_targetState-&gt;GetFirst();
00306     }
00307 
<a name="l00309"></a><a class="code" href="classwxPropertyGridManager.htm#wxPropertyGridManagera38">00309</a>     <span class="keyword">inline</span> wxPGId GetFirstCategory ()<span class="keyword"> const</span>
00310 <span class="keyword">    </span>{
00311         <span class="keywordflow">return</span> m_targetState-&gt;GetFirstCategory ();
00312     }
00313 
<a name="l00315"></a><a class="code" href="classwxPropertyGridManager.htm#wxPropertyGridManagera39">00315</a>     <span class="keyword">inline</span> wxPGId GetFirstProperty()<span class="keyword"> const</span>
00316 <span class="keyword">    </span>{
00317         <span class="keywordflow">return</span> m_targetState-&gt;GetFirstProperty();
00318     }
00319 
<a name="l00324"></a><a class="code" href="classwxPropertyGridManager.htm#wxPropertyGridManagera40">00324</a>     <span class="keyword">inline</span> <a class="code" href="classwxPropertyGrid.htm">wxPropertyGrid</a>* GetGrid()
00325     {
00326         <span class="comment">// FIXME</span>
00327         <span class="comment">//wxASSERT( m_iFlags &amp; wxPG_FL_INITIALIZED );</span>
00328         <span class="keywordflow">return</span> &amp;m_propGrid;
00329     };
00330 
<a name="l00335"></a><a class="code" href="classwxPropertyGridManager.htm#wxPropertyGridManagera42">00335</a>     <span class="keyword">inline</span> wxPGId GetLastChild ( wxPGId parent )
00336     {
00337         wxASSERT ( wxPGIdIsOk(parent) );
00338         <a class="code" href="classwxPGPropertyWithChildren.htm">wxPGPropertyWithChildren</a>&amp; p = (<a class="code" href="classwxPGPropertyWithChildren.htm">wxPGPropertyWithChildren</a>&amp;)parent.GetProperty();
00339         <span class="keywordflow">if</span> ( !p.<a class="code" href="classwxPGProperty.htm#wxPropertyCategoryClassa32">GetParentingType</a>() || !p.<a class="code" href="classwxPGPropertyWithChildren.htm#wxPropertyCategoryClassa17">GetCount</a>() ) <span class="keywordflow">return</span> wxPGId();
00340         <span class="keywordflow">return</span> wxPGId(p.<a class="code" href="classwxPGPropertyWithChildren.htm#wxPropertyCategoryClassa49">Last</a>());
00341     }
00342     <span class="keyword">inline</span> wxPGId GetLastChild ( wxPGNameStr name ) { <span class="keywordflow">return</span> GetLastChild ( <a class="code" href="classwxPropertyContainerMethods.htm#wxPropertyGridManagera55">GetPropertyByName</a>(name) ); }
00343     
<a name="l00345"></a><a class="code" href="classwxPropertyGridManager.htm#wxPropertyGridManagera43">00345</a>     <span class="keyword">inline</span> wxPGId GetNextCategory ( wxPGId <span class="keywordtype">id</span> )<span class="keyword"> const</span>
00346 <span class="keyword">    </span>{
00347         wxASSERT ( m_targetState );
00348         <span class="keywordflow">return</span> m_targetState-&gt;GetNextCategory(<span class="keywordtype">id</span>);
00349     }
00350 
<a name="l00354"></a><a class="code" href="classwxPropertyGridManager.htm#wxPropertyGridManagera44">00354</a>     <span class="keyword">inline</span> wxPGId GetNextProperty ( wxPGId <span class="keywordtype">id</span> )<span class="keyword"> const</span>
00355 <span class="keyword">    </span>{
00356         wxASSERT ( m_targetState );
00357         <span class="keywordflow">return</span> m_targetState-&gt;GetNextProperty(<span class="keywordtype">id</span>);
00358     }
00359 
00361     <span class="keywordtype">int</span> GetPageByName ( <span class="keyword">const</span> wxChar* name ) <span class="keyword">const</span>;
00362 
00366     <span class="keywordtype">int</span> GetPageByState( <a class="code" href="classwxPropertyGridState.htm">wxPropertyGridState</a>* pstate ) <span class="keyword">const</span>;
00367 
<a name="l00369"></a><a class="code" href="classwxPropertyGridManager.htm#wxPropertyGridManagera49">00369</a>     size_t GetPageCount ()<span class="keyword"> const </span>{ <span class="keywordflow">return</span> m_arrPages.GetCount(); }
00370 
00372     <span class="keyword">const</span> wxString&amp; GetPageName ( <span class="keywordtype">int</span> index ) <span class="keyword">const</span>;
00373 
<a name="l00375"></a><a class="code" href="classwxPropertyGridManager.htm#wxPropertyGridManagera51">00375</a>     <span class="keyword">inline</span> wxPGId GetPrevProperty ( wxPGId <span class="keywordtype">id</span> )<span class="keyword"> const</span>
00376 <span class="keyword">    </span>{
00377         <span class="keywordflow">return</span> m_targetState-&gt;GetPrevProperty(<span class="keywordtype">id</span>);
00378     }
00379 
<a name="l00381"></a><a class="code" href="classwxPropertyGridManager.htm#wxPropertyGridManagera53">00381</a>     <span class="keyword">inline</span> wxPGId GetPrevSibling ( wxPGId <span class="keywordtype">id</span> )
00382     {
00383         <span class="keywordflow">return</span> wxPropertyGridState::GetPrevSibling(<span class="keywordtype">id</span>);
00384     }
00385     <span class="keyword">inline</span> wxPGId GetPrevSibling ( wxPGNameStr name )
00386     {
00387         <span class="keywordflow">return</span> wxPropertyGridState::GetPrevSibling(<a class="code" href="classwxPropertyContainerMethods.htm#wxPropertyGridManagera55">GetPropertyByName</a>(name));
00388     }
00389 
00395     wxPGId GetPropertyByLabel ( <span class="keyword">const</span> wxString&amp; name,
00396         <a class="code" href="classwxPropertyGridState.htm">wxPropertyGridState</a>** ppState = (<a class="code" href="classwxPropertyGridState.htm">wxPropertyGridState</a>**)NULL ) <span class="keyword">const</span>;
00397 
<a name="l00401"></a><a class="code" href="classwxPropertyGridManager.htm#wxPropertyGridManagera57">00401</a>     <span class="keyword">inline</span> wxPGId GetPropertyCategory ( wxPGId <span class="keywordtype">id</span> )<span class="keyword"> const</span>
00402 <span class="keyword">    </span>{
00403         <span class="keywordflow">return</span> m_propGrid.GetPropertyCategory(<span class="keywordtype">id</span>);
00404     }
00405     wxPGId GetPropertyCategory ( wxPGNameStr name )<span class="keyword"> const</span>
00406 <span class="keyword">    </span>{
00407         <span class="keywordflow">return</span> m_propGrid.GetPropertyCategory(<a class="code" href="classwxPropertyContainerMethods.htm#wxPropertyGridManagera55">GetPropertyByName</a>(name));
00408     }
00409 
<a name="l00411"></a><a class="code" href="classwxPropertyGridManager.htm#wxPropertyGridManagera63">00411</a>     <span class="keyword">inline</span> wxColour GetPropertyColour ( wxPGId <span class="keywordtype">id</span> )<span class="keyword"> const</span>
00412 <span class="keyword">    </span>{
00413         <span class="keywordflow">return</span> m_propGrid.GetPropertyColour(<span class="keywordtype">id</span>);
00414     }
00415     <span class="keyword">inline</span> wxColour GetPropertyColour ( wxPGNameStr name )<span class="keyword"> const</span>
00416 <span class="keyword">    </span>{
00417         <span class="keywordflow">return</span> m_propGrid.GetPropertyColour(<a class="code" href="classwxPropertyContainerMethods.htm#wxPropertyGridManagera55">GetPropertyByName</a>(name));
00418     }
00419 
00420 <span class="preprocessor">#if wxPG_USE_VALIDATORS</span>
00421 <span class="preprocessor"></span>
00424     <span class="keyword">inline</span> wxPropertyValidator&amp; GetPropertyValidator ( wxPGId <span class="keywordtype">id</span> )
00425     {
00426         wxASSERT( wxPGIdIsOk(<span class="keywordtype">id</span>) );
00427         <span class="keywordflow">return</span> wxPGIdToPtr(<span class="keywordtype">id</span>)-&gt;GetValidator();
00428     }
00429     <span class="keyword">inline</span> wxPropertyValidator&amp; GetPropertyValidator ( wxPGNameStr name )
00430     {
00431         <span class="keywordflow">return</span> GetPropertyValidator(<a class="code" href="classwxPropertyContainerMethods.htm#wxPropertyGridManagera55">GetPropertyByName</a>(name));
00432     }
00433 <span class="preprocessor">#endif</span>
00434 <span class="preprocessor"></span>
<a name="l00444"></a><a class="code" href="classwxPropertyGridManager.htm#wxPropertyGridManagera91">00444</a>     wxVariant GetPropertyValues ( <span class="keyword">const</span> wxString&amp; listname = wxEmptyString,
00445         wxPGId baseparent = wxPGId(), <span class="keywordtype">long</span> flags = 0 )<span class="keyword"> const</span>
00446 <span class="keyword">    </span>{
00447         <span class="keywordflow">return</span> m_targetState-&gt;GetPropertyValues(listname,baseparent,flags);
00448     }
00449 
<a name="l00453"></a><a class="code" href="classwxPropertyGridManager.htm#wxPropertyGridManagera94">00453</a>     wxPGId GetRoot ()<span class="keyword"> const </span>{ <span class="keywordflow">return</span> wxPGIdGen(m_targetState-&gt;m_properties); }
00454 
<a name="l00456"></a><a class="code" href="classwxPropertyGridManager.htm#wxPropertyGridManagera95">00456</a>     <span class="keyword">inline</span> <span class="keywordtype">int</span> GetSelectedPage ()<span class="keyword"> const </span>{ <span class="keywordflow">return</span> m_selPage; }
00457 
<a name="l00459"></a><a class="code" href="classwxPropertyGridManager.htm#wxPropertyGridManagera96">00459</a>     <span class="keyword">inline</span> wxPGId GetSelectedProperty ()<span class="keyword"> const</span>
00460 <span class="keyword">    </span>{
00461         <span class="keywordflow">return</span> m_propGrid.GetSelection();
00462     }
00463 
<a name="l00465"></a><a class="code" href="classwxPropertyGridManager.htm#wxPropertyGridManagera97">00465</a>     <span class="keyword">inline</span> <span class="keywordtype">int</span> GetSelection ()<span class="keyword"> const </span>{ <span class="keywordflow">return</span> m_selPage; }
00466 
<a name="l00469"></a><a class="code" href="classwxPropertyGridManager.htm#wxPropertyGridManagera99">00469</a>     <span class="keyword">inline</span> wxToolBar* GetToolBar()<span class="keyword"> const </span>{ <span class="keywordflow">return</span> m_pToolbar; }
00470 
<a name="l00471"></a><a class="code" href="classwxPropertyGridManager.htm#wxPropertyGridManagera100">00471</a>     <span class="keyword">inline</span> <span class="keywordtype">void</span> <a class="code" href="classwxPropertyContainerMethods.htm#wxPropertyGride22">InitAllTypeHandlers</a> ()
00472     {
00473         <a class="code" href="classwxPropertyContainerMethods.htm#wxPropertyGride22">wxPropertyGrid::InitAllTypeHandlers</a>();
00474     }
00475 
<a name="l00477"></a><a class="code" href="classwxPropertyGridManager.htm#wxPropertyGridManagera102">00477</a>     <span class="keyword">inline</span> wxPGId Insert ( wxPGId <span class="keywordtype">id</span>, <span class="keywordtype">int</span> index, <a class="code" href="classwxPGProperty.htm">wxPGProperty</a>* property )
00478     {
00479         wxASSERT ( m_targetState );
00480         wxPGId res_id = m_targetState-&gt;Insert((<a class="code" href="classwxPGPropertyWithChildren.htm">wxPGPropertyWithChildren</a>*)wxPGIdToPtr(<span class="keywordtype">id</span>),index,property);
00481         <span class="keywordflow">if</span> ( m_targetState == m_propGrid.m_pState )
00482             m_propGrid.DrawItems ( property, (<a class="code" href="classwxPGProperty.htm">wxPGProperty</a>*) NULL );
00483         <span class="keywordflow">return</span> res_id;
00484     }
00485 
<a name="l00487"></a><a class="code" href="classwxPropertyGridManager.htm#wxPropertyGridManagera101">00487</a>     <span class="keyword">inline</span> wxPGId Insert ( wxPGNameStr name, <span class="keywordtype">int</span> index, <a class="code" href="classwxPGProperty.htm">wxPGProperty</a>* property )
00488     {
00489         wxASSERT ( m_targetState );
00490         wxPGId res_id = m_targetState-&gt;Insert((<a class="code" href="classwxPGPropertyWithChildren.htm">wxPGPropertyWithChildren</a>*)wxPGIdToPtr(m_targetState-&gt;BaseGetPropertyByName(name)),index,property);
00491         <span class="keywordflow">if</span> ( m_targetState == m_propGrid.m_pState )
00492             m_propGrid.DrawItems ( property, (<a class="code" href="classwxPGProperty.htm">wxPGProperty</a>*) NULL );
00493         <span class="keywordflow">return</span> res_id;
00494     }
00495 
00511     <span class="keywordtype">int</span> InsertPage ( <span class="keywordtype">int</span> index, <span class="keyword">const</span> wxString&amp; label, <span class="keyword">const</span> wxBitmap&amp; bmp = wxNullBitmap );
00512 
00514     <span class="keywordtype">bool</span> IsAnyModified () <span class="keyword">const</span>;
00515 
<a name="l00517"></a><a class="code" href="classwxPropertyGridManager.htm#wxPropertyGridManagera105">00517</a>     <span class="keyword">inline</span> <span class="keywordtype">bool</span> IsFrozen ()<span class="keyword"> const </span>{ <span class="keywordflow">return</span> (m_propGrid.m_frozen&gt;0)?TRUE:FALSE; }
00518 
00520     <span class="keywordtype">bool</span> IsPageModified ( size_t index ) <span class="keyword">const</span>;
00521 
<a name="l00523"></a><a class="code" href="classwxPropertyGridManager.htm#wxPropertyGridManagera110">00523</a>     <span class="keyword">inline</span> <span class="keywordtype">bool</span> <a class="code" href="classwxPropertyContainerMethods.htm#wxPropertyGrida139">IsPropertyCategory</a> ( wxPGId <span class="keywordtype">id</span> )<span class="keyword"> const</span>
00524 <span class="keyword">    </span>{
00525         <span class="keywordflow">return</span> (wxPGIdToPtr(<span class="keywordtype">id</span>)-&gt;GetParentingType()&gt;0)?TRUE:FALSE;
00526     }
00527     <span class="keyword">inline</span> <span class="keywordtype">bool</span> <a class="code" href="classwxPropertyContainerMethods.htm#wxPropertyGrida139">IsPropertyCategory</a> ( wxPGNameStr name ) { <span class="keywordflow">return</span> <a class="code" href="classwxPropertyContainerMethods.htm#wxPropertyGrida139">IsPropertyCategory</a>(<a class="code" href="classwxPropertyContainerMethods.htm#wxPropertyGridManagera55">GetPropertyByName</a>(name)); }
00528 
00530     <span class="keywordtype">void</span> LimitPropertyEditing ( wxPGId <span class="keywordtype">id</span>, <span class="keywordtype">bool</span> limit = TRUE );
00531     <span class="keywordtype">void</span> LimitPropertyEditing ( wxPGNameStr name, <span class="keywordtype">bool</span> limit = TRUE );
00532 
00533     <span class="keyword">virtual</span> <span class="keywordtype">void</span> Refresh (<span class="keywordtype">bool</span> eraseBackground = <span class="keyword">true</span>,
00534                           <span class="keyword">const</span> wxRect* rect = (<span class="keyword">const</span> wxRect*) NULL);
00535 
00537     <span class="keywordtype">void</span> SelectPage ( <span class="keywordtype">int</span> index );
00538 
<a name="l00540"></a><a class="code" href="classwxPropertyGridManager.htm#wxPropertyGridManagera129">00540</a>     <span class="keyword">inline</span> <span class="keywordtype">void</span> SelectPage ( <span class="keyword">const</span> wxChar* name )
00541     {
00542         SelectPage ( GetPageByName(name) );
00543     }
00544 
00546     <span class="keywordtype">void</span> SelectProperty ( wxPGId <span class="keywordtype">id</span>, <span class="keywordtype">bool</span> focus = FALSE );
00547     <span class="keyword">inline</span> <span class="keywordtype">void</span> SelectProperty ( wxPGNameStr name, <span class="keywordtype">bool</span> focus = FALSE )
00548     {
00549         SelectProperty(<a class="code" href="classwxPropertyContainerMethods.htm#wxPropertyGridManagera55">GetPropertyByName</a>(name),focus);
00550     }
00551 
00554     <span class="keywordtype">void</span> SetDescription ( <span class="keyword">const</span> wxString&amp; label, <span class="keyword">const</span> wxString&amp; content );
00555 
<a name="l00558"></a><a class="code" href="classwxPropertyGridManager.htm#wxPropertyGridManagera134">00558</a>     <span class="keyword">inline</span> <span class="keywordtype">void</span> SetCurrentCategory ( wxPGId <span class="keywordtype">id</span> )
00559     {
00560         <a class="code" href="classwxPropertyCategoryClass.htm">wxPropertyCategoryClass</a>* pc = (<a class="code" href="classwxPropertyCategoryClass.htm">wxPropertyCategoryClass</a>*)wxPGIdToPtr(<span class="keywordtype">id</span>);
00561 <span class="preprocessor">#ifdef __WXDEBUG__</span>
00562 <span class="preprocessor"></span>        <span class="keywordflow">if</span> ( pc ) wxASSERT ( pc-&gt;<a class="code" href="classwxPGProperty.htm#wxPropertyCategoryClassa32">GetParentingType</a>() &gt; 0 );
00563 <span class="preprocessor">#endif</span>
00564 <span class="preprocessor"></span>        m_targetState-&gt;m_currentCategory = pc;
00565     }
00566 
<a name="l00569"></a><a class="code" href="classwxPropertyGridManager.htm#wxPropertyGridManagera133">00569</a>     <span class="keyword">inline</span> <span class="keywordtype">void</span> SetCurrentCategory ( wxPGNameStr name )
00570     {
00571         SetCurrentCategory(<a class="code" href="classwxPropertyContainerMethods.htm#wxPropertyGridManagera55">GetPropertyByName</a>(name));
00572     }
00573 
00575     <span class="keywordtype">void</span> SetDescBoxHeight ( <span class="keywordtype">int</span> ht, <span class="keywordtype">bool</span> refresh = TRUE );
00576 
<a name="l00581"></a><a class="code" href="classwxPropertyGridManager.htm#wxPropertyGridManagera135">00581</a>     <span class="keyword">inline</span> <span class="keywordtype">void</span> SetDefaultPriority( <span class="keywordtype">int</span> priority )
00582     {
00583         m_propGrid.SetDefaultPriority(priority);
00584     }
00585 
<a name="l00587"></a><a class="code" href="classwxPropertyGridManager.htm#wxPropertyGridManagera128">00587</a>     <span class="keyword">inline</span> <span class="keywordtype">void</span> ResetDefaultPriority()
00588     {
00589         m_propGrid.ResetDefaultPriority();
00590     }
00591 
00594     <span class="keywordtype">void</span> SetPropertyLabel( wxPGId <span class="keywordtype">id</span>, <span class="keyword">const</span> wxString&amp; newlabel );
00595     <span class="keywordtype">void</span> SetPropertyLabel( wxPGNameStr name, <span class="keyword">const</span> wxString&amp; newlabel );
00596 
<a name="l00600"></a><a class="code" href="classwxPropertyGridManager.htm#wxPropertyGridManagera143">00600</a>     <span class="keyword">inline</span> <span class="keywordtype">void</span> SetPropertyColour ( wxPGId <span class="keywordtype">id</span>, <span class="keyword">const</span> wxColour&amp; col )
00601     {
00602         m_propGrid.SetPropertyColour ( <span class="keywordtype">id</span>, col );
00603     }
00604     <span class="keyword">inline</span> <span class="keywordtype">void</span> SetPropertyColour ( wxPGNameStr name, <span class="keyword">const</span> wxColour&amp; col )
00605     {
00606         m_propGrid.SetPropertyColour ( <a class="code" href="classwxPropertyContainerMethods.htm#wxPropertyGridManagera55">GetPropertyByName</a>(name), col );
00607     }
00608 
<a name="l00610"></a><a class="code" href="classwxPropertyGridManager.htm#wxPropertyGridManagera145">00610</a>     <span class="keyword">inline</span> <span class="keywordtype">void</span> SetPropertyColourToDefault ( wxPGId <span class="keywordtype">id</span> )
00611     {
00612         m_propGrid.SetColourIndex ( wxPGIdToPtr(<span class="keywordtype">id</span>), 0 );
00613     }
00614     <span class="keyword">inline</span> <span class="keywordtype">void</span> SetPropertyColourToDefault ( wxPGNameStr name )
00615     {
00616         m_propGrid.SetColourIndex ( wxPGIdToPtr(<a class="code" href="classwxPropertyContainerMethods.htm#wxPropertyGridManagera55">GetPropertyByName</a>(name)), 0 );
00617     }
00618 
00622     <span class="keywordtype">void</span> SetPropertyPriority ( wxPGId <span class="keywordtype">id</span>, <span class="keywordtype">int</span> priority );
00623     <span class="keywordtype">void</span> SetPropertyPriority ( wxPGNameStr name, <span class="keywordtype">int</span> priority );
00624 
00625     <span class="keywordtype">void</span> SetPropertyValue ( wxPGId <span class="keywordtype">id</span>, <span class="keywordtype">long</span> value );
00626     <span class="keywordtype">void</span> SetPropertyValue ( wxPGId <span class="keywordtype">id</span>, <span class="keywordtype">int</span> value );
00627     <span class="keywordtype">void</span> SetPropertyValue ( wxPGId <span class="keywordtype">id</span>, <span class="keywordtype">double</span> value );
00628     <span class="keywordtype">void</span> SetPropertyValue ( wxPGId <span class="keywordtype">id</span>, <span class="keywordtype">bool</span> value );
00629     <span class="keywordtype">void</span> SetPropertyValue ( wxPGId <span class="keywordtype">id</span>, <span class="keyword">const</span> wxString&amp; value );
00630     <span class="keywordtype">void</span> SetPropertyValue ( wxPGId <span class="keywordtype">id</span>, <span class="keyword">const</span> wxArrayString&amp; value );
00631     <span class="keywordtype">void</span> SetPropertyValue ( wxPGId <span class="keywordtype">id</span>, wxObject* value );
00632     <span class="keywordtype">void</span> SetPropertyValue ( wxPGId <span class="keywordtype">id</span>, <span class="keywordtype">void</span>* value );
00633     <span class="keywordtype">void</span> SetPropertyValue ( wxPGId <span class="keywordtype">id</span>, wxVariant&amp; value );
00634     <span class="keywordtype">void</span> SetPropertyValue ( wxPGNameStr name, <span class="keywordtype">long</span> value );
00635     <span class="keywordtype">void</span> SetPropertyValue ( wxPGNameStr name, <span class="keywordtype">int</span> value );
00636     <span class="keywordtype">void</span> SetPropertyValue ( wxPGNameStr name, <span class="keywordtype">double</span> value );
00637     <span class="keywordtype">void</span> SetPropertyValue ( wxPGNameStr name, <span class="keywordtype">bool</span> value );
00638     <span class="keywordtype">void</span> SetPropertyValue ( wxPGNameStr name, <span class="keyword">const</span> wxString&amp; value );
00639     <span class="keywordtype">void</span> SetPropertyValue ( wxPGNameStr name, <span class="keyword">const</span> wxArrayString&amp; value );
00640     <span class="keywordtype">void</span> SetPropertyValue ( wxPGNameStr name, wxObject* value );
00641     <span class="keywordtype">void</span> SetPropertyValue ( wxPGNameStr name, <span class="keywordtype">void</span>* value );
00642     <span class="keywordtype">void</span> SetPropertyValue ( wxPGNameStr name, wxVariant&amp; value );
00643     wxPG_IMPLEMENT_PGMAN_METHOD_NORET1(SetPropertyValue,<span class="keyword">const</span> wxPoint&amp;)
00644     wxPG_IMPLEMENT_PGMAN_METHOD_NORET1(SetPropertyValue,<span class="keyword">const</span> wxSize&amp;)
00645     wxPG_IMPLEMENT_PGMAN_METHOD_NORET1(SetPropertyValue,<span class="keyword">const</span> wxArrayInt&amp;)
00646 
00647     <span class="keyword">inline</span> <span class="keywordtype">void</span> SetPropertyValue ( wxPGId <span class="keywordtype">id</span>, wxObject&amp; value )
00648     {
00649         SetPropertyValue(<span class="keywordtype">id</span>,&amp;value);
00650     }
00651 
00652     <span class="keyword">inline</span> <span class="keywordtype">void</span> SetPropertyValue ( wxPGNameStr name, wxObject&amp; value )
00653     {
00654         SetPropertyValue(name,&amp;value);
00655     }
00656 
00657     <span class="keyword">inline</span> <span class="keywordtype">void</span> SetPropertyValue ( wxPGId <span class="keywordtype">id</span>, <span class="keyword">const</span> wxChar* value )
00658     {
00659         SetPropertyValue(<span class="keywordtype">id</span>,wxString(value));
00660     }
00661     <span class="keyword">inline</span> <span class="keywordtype">void</span> SetPropertyValue ( wxPGNameStr name, <span class="keyword">const</span> wxChar* value )
00662     {
00663         SetPropertyValue(name,wxString(value));
00664     }
00665 
00670     <span class="keywordtype">void</span> SetPropertyValues ( <span class="keyword">const</span> wxList&amp; list, wxPGId default_category )
00671     {
00672         m_targetState-&gt;SetPropertyValues(list,default_category);
00673     }
00674 
00675     <span class="keyword">inline</span> <span class="keywordtype">void</span> SetPropertyValues ( <span class="keyword">const</span> wxVariant&amp; list, wxPGId default_category )
00676     {
00677         SetPropertyValues (list.GetList(),default_category);
00678     }
00679     <span class="keyword">inline</span> <span class="keywordtype">void</span> SetPropertyValues ( <span class="keyword">const</span> wxList&amp; list, <span class="keyword">const</span> wxString&amp; default_category = wxEmptyString )
00680     {
00681         SetPropertyValues (list,<a class="code" href="classwxPropertyContainerMethods.htm#wxPropertyGridManagera55">GetPropertyByName</a>(default_category));
00682     }
00683     <span class="keyword">inline</span> <span class="keywordtype">void</span> SetPropertyValues ( <span class="keyword">const</span> wxVariant&amp; list, <span class="keyword">const</span> wxString&amp; default_category = wxEmptyString )
00684     {
00685         SetPropertyValues (list.GetList(),<a class="code" href="classwxPropertyContainerMethods.htm#wxPropertyGridManagera55">GetPropertyByName</a>(default_category));
00686     }
00687 
00691     <span class="keywordtype">void</span> SetPropertyValueUnspecified ( wxPGId <span class="keywordtype">id</span> );
00692     <span class="keywordtype">void</span> SetPropertyValueUnspecified ( wxPGNameStr name );
00693 
00695     <span class="comment">//inline void SetSelection ( int index ) { SelectPage(index); }</span>
00696 
<a name="l00698"></a><a class="code" href="classwxPropertyGridManager.htm#wxPropertyGridManagera175">00698</a>     <span class="keyword">inline</span> <span class="keywordtype">void</span> SetStringSelection ( <span class="keyword">const</span> wxChar* name )
00699     {
00700         SelectPage ( GetPageByName(name) );
00701     }
00702 
00707     <span class="keywordtype">void</span> SetTargetPage ( <span class="keywordtype">int</span> index );
00708 
<a name="l00713"></a><a class="code" href="classwxPropertyGridManager.htm#wxPropertyGridManagera176">00713</a>     <span class="keyword">inline</span> <span class="keywordtype">void</span> SetTargetPage ( <span class="keyword">const</span> wxChar* name )
00714     {
00715         SetTargetPage ( GetPageByName(name) );
00716     }
00717 
<a name="l00719"></a><a class="code" href="classwxPropertyGridManager.htm#wxPropertyGridManagera180">00719</a>     <span class="keyword">inline</span> <span class="keywordtype">void</span> Sort ()
00720     {
00721         m_propGrid.Sort(wxPGIdGen(m_targetState-&gt;m_properties));
00722     }
00723 
<a name="l00726"></a><a class="code" href="classwxPropertyGridManager.htm#wxPropertyGridManagera179">00726</a>     <span class="keyword">inline</span> <span class="keywordtype">void</span> Sort ( wxPGId <span class="keywordtype">id</span> )
00727     {
00728         m_propGrid.Sort(<span class="keywordtype">id</span>);
00729     }
00730 
<a name="l00733"></a><a class="code" href="classwxPropertyGridManager.htm#wxPropertyGridManagera178">00733</a>     <span class="keyword">inline</span> <span class="keywordtype">void</span> Sort ( wxPGNameStr name )
00734     {
00735         m_propGrid.Sort ( <a class="code" href="classwxPropertyContainerMethods.htm#wxPropertyGridManagera55">GetPropertyByName</a>(name) );
00736     }
00737 
<a name="l00740"></a><a class="code" href="classwxPropertyGridManager.htm#wxPropertyGridManagera182">00740</a>     <span class="keyword">inline</span> <span class="keywordtype">void</span> TogglePropertyPriority ( wxPGId <span class="keywordtype">id</span> )
00741     {
00742         <span class="keywordtype">int</span> priority = wxPG_LOW;
00743         <span class="keywordflow">if</span> ( <a class="code" href="classwxPropertyContainerMethods.htm#wxPropertyGridManagera78">GetPropertyPriority</a>(<span class="keywordtype">id</span>) == wxPG_LOW )
00744             priority = wxPG_HIGH;
00745         SetPropertyPriority(<span class="keywordtype">id</span>,priority);
00746     }
00747 
<a name="l00750"></a><a class="code" href="classwxPropertyGridManager.htm#wxPropertyGridManagera181">00750</a>     <span class="keyword">inline</span> <span class="keywordtype">void</span> TogglePropertyPriority ( wxPGNameStr name )
00751     {
00752         TogglePropertyPriority(<a class="code" href="classwxPropertyContainerMethods.htm#wxPropertyGridManagera55">GetPropertyByName</a>(name));
00753     }
00754 
<a name="l00756"></a><a class="code" href="classwxPropertyGridManager.htm#wxPropertyGridManagera15">00756</a>     <span class="keyword">inline</span> <span class="keywordtype">void</span> ClearSelection ()
00757     {
00758         m_propGrid.ClearSelection ();
00759     }
00760 
00761 <span class="preprocessor">#ifdef _WX_WINDOW_H_BASE_</span>
00762 <span class="preprocessor"></span>
00763     <span class="comment">//</span>
00764     <span class="comment">// Overridden functions - no documentation required.</span>
00765     <span class="comment">//</span>
00766 
00767     <span class="keyword">virtual</span> wxSize DoGetBestSize() <span class="keyword">const</span>;
00768     <span class="keywordtype">void</span> SetId( wxWindowID winid );
00769 
00770     <span class="keyword">virtual</span> <span class="keywordtype">void</span> Freeze();
00771     <span class="keyword">virtual</span> <span class="keywordtype">void</span> Thaw();
00772     <span class="keyword">virtual</span> <span class="keywordtype">void</span> SetExtraStyle ( <span class="keywordtype">long</span> exStyle );
00773     <span class="keyword">virtual</span> <span class="keywordtype">bool</span> SetFont ( <span class="keyword">const</span> wxFont&amp; font );
00774     <span class="keyword">virtual</span> <span class="keywordtype">void</span> SetWindowStyleFlag ( <span class="keywordtype">long</span> style );
00775 
00776     <span class="comment">//</span>
00777     <span class="comment">// Event handlers</span>
00778     <span class="comment">//</span>
00779     <span class="keywordtype">void</span> OnMouseMove ( wxMouseEvent &amp;event );
00780     <span class="keywordtype">void</span> OnMouseClick ( wxMouseEvent &amp;event );
00781     <span class="keywordtype">void</span> OnMouseUp ( wxMouseEvent &amp;event );
00782     <span class="keywordtype">void</span> OnMouseEntry ( wxMouseEvent &amp;event );
00783 
00784     <span class="keywordtype">void</span> OnPaint ( wxPaintEvent &amp;event );
00785 
00786     <span class="keywordtype">void</span> OnToolbarClick ( wxCommandEvent &amp;event );
00787     <span class="keywordtype">void</span> OnResize ( wxSizeEvent&amp; event );
00788     <span class="keywordtype">void</span> OnCompactorClick ( wxCommandEvent&amp; event );
00789     <span class="keywordtype">void</span> OnPropertyGridSelect ( <a class="code" href="classwxPropertyGridEvent.htm">wxPropertyGridEvent</a>&amp; event );
00790 
00791 <span class="keyword">protected</span>:
00792 
00793     <a class="code" href="classwxPropertyGrid.htm">wxPropertyGrid</a>  m_propGrid;
00794 
00795     wxArrayPtrVoid  m_arrPages;
00796 
00797 <span class="preprocessor">#if wxUSE_TOOLBAR</span>
00798 <span class="preprocessor"></span>    wxToolBar*      m_pToolbar;
00799     <span class="comment">//wxBitmap*       m_pBmpCatMode;</span>
00800     <span class="comment">//wxBitmap*       m_pBmpNonCatMode;</span>
00801 <span class="preprocessor">#endif</span>
00802 <span class="preprocessor"></span>    wxStaticText*   m_pTxtHelpCaption;
00803     wxStaticText*   m_pTxtHelpContent;
00804     wxButton*       m_pButCompactor;
00805 
00806     <span class="comment">//wxWindow*       m_splitterPrevDrawnWin;</span>
00807 
00808     <a class="code" href="classwxPropertyGridState.htm">wxPropertyGridState</a>*    m_targetState;
00809 
00810     <span class="keywordtype">long</span>            m_iFlags;
00811 
00812     <span class="comment">// Selected page index.</span>
00813     <span class="keywordtype">int</span>             m_selPage;
00814 
00815     <span class="keywordtype">int</span>             m_width;
00816 
00817     <span class="keywordtype">int</span>             m_height;
00818 
00819     <span class="keywordtype">int</span>             m_extraHeight;
00820 
00821     <span class="keywordtype">int</span>             m_splitterY;
00822 
00823     <span class="keywordtype">int</span>             m_splitterHeight;
00824 
00825     <span class="keywordtype">int</span>             m_nextTbInd;
00826 
00827     <span class="keywordtype">int</span>             m_dragOffset;
00828 
00829     wxCursor        m_cursorSizeNS;
00830 
00831     <span class="keywordtype">int</span>             m_nextDescBoxSize;
00832 
00833     <span class="keywordtype">unsigned</span> <span class="keywordtype">char</span>   m_dragStatus;
00834 
00835     <span class="keywordtype">unsigned</span> <span class="keywordtype">char</span>   m_onSplitter;
00836 
00837     <span class="keywordtype">bool</span> EnsureVisible ( wxPGId <span class="keywordtype">id</span>, <a class="code" href="classwxPropertyGridState.htm">wxPropertyGridState</a>* parent_state );
00838 
00839     <span class="keyword">virtual</span> wxPGId DoGetPropertyByName ( wxPGNameStr name ) <span class="keyword">const</span>;
00840 
00841     <span class="keyword">virtual</span> <span class="keywordtype">void</span> RefreshProperty( <a class="code" href="classwxPGProperty.htm">wxPGProperty</a>* p );
00842 
00843     wxPGId GetPropertyByName2 ( wxPGNameStr name, <a class="code" href="classwxPropertyGridState.htm">wxPropertyGridState</a>** ppState = (<a class="code" href="classwxPropertyGridState.htm">wxPropertyGridState</a>**) NULL ) <span class="keyword">const</span>;
00844 
00845     <span class="comment">// Sets some members to defaults.</span>
00846         <span class="keywordtype">void</span> Init1();
00847 
00848     <span class="comment">// Initializes some members.</span>
00849         <span class="keywordtype">void</span> Init2( <span class="keywordtype">int</span> style );
00850 
00854     <span class="keywordtype">void</span> RecalculatePositions ( <span class="keywordtype">int</span> width, <span class="keywordtype">int</span> height );
00855 
00857     <span class="keywordtype">void</span> RecreateControls ();
00858 
00859     <span class="keywordtype">void</span> RefreshHelpBox ( <span class="keywordtype">int</span> new_splittery, <span class="keywordtype">int</span> new_width, <span class="keywordtype">int</span> new_height );
00860 
00861     <span class="keywordtype">void</span> RepaintSplitter ( <span class="keywordtype">int</span> new_splittery, <span class="keywordtype">int</span> new_width, <span class="keywordtype">int</span> new_height, <span class="keywordtype">bool</span> desc_too );
00862 
00863     <span class="keywordtype">void</span> SetDescribedProperty ( <a class="code" href="classwxPGProperty.htm">wxPGProperty</a>* p );
00864 
00865     <span class="keyword">inline</span> wxPropertyGridPageData* GetPage ( size_t ind )<span class="keyword"> const</span>
00866 <span class="keyword">    </span>{
00867         <span class="keywordflow">return</span> (wxPropertyGridPageData*)m_arrPages.Item(ind);
00868     }
00869 
00870 <span class="preprocessor">#endif</span>
00871 <span class="preprocessor"></span>
00872 <span class="keyword">private</span>:
00873     DECLARE_EVENT_TABLE()
00874 };
00875 
00876 <span class="comment">// -----------------------------------------------------------------------</span>
00877 
00878 <span class="preprocessor">#ifndef __wxPG_SOURCE_FILE__</span>
00879 <span class="preprocessor"></span><span class="preprocessor"># undef wxPG_IPAM_DECL</span>
00880 <span class="preprocessor"></span><span class="preprocessor"># undef wxPG_IMPLEMENT_PGMAN_METHOD_NORET1</span>
00881 <span class="preprocessor"></span><span class="preprocessor">#endif</span>
00882 <span class="preprocessor"></span>
00883 <span class="comment">// -----------------------------------------------------------------------</span>
00884 
00885 <span class="preprocessor">#endif // _WX_PROPGRID_MANAGER_H_</span>
</pre></div><hr size="1"><address style="align: right;"><small>Generated on Tue May 3 19:33:41 2005 for wxPropertyGrid by
<a href="http://www.doxygen.org/index.html">
<img src="doxygen.png" alt="doxygen" align="middle" border=0 > 
</a>1.3.6 </small></address>
</body>
</html>
