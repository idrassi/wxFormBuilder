<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN">
<html><head><meta http-equiv="Content-Type" content="text/html;charset=iso-8859-1">
<title>wxPropertyGrid: advprops.h Source File</title>
<link href="doxygen.css" rel="stylesheet" type="text/css">
</head><body>
<!-- Generated by Doxygen 1.3.6 -->
<div class="qindex"><a class="qindex" href="index.htm">Main&nbsp;Page</a> | <a class="qindex" href="modules.htm">Modules</a> | <a class="qindex" href="hierarchy.htm">Class&nbsp;Hierarchy</a> | <a class="qindex" href="annotated.htm">Class&nbsp;List</a> | <a class="qindex" href="files.htm">File&nbsp;List</a> | <a class="qindex" href="functions.htm">Class&nbsp;Members</a></div>
<h1>advprops.h</h1><div class="fragment"><pre>00001 
00002 <span class="comment">// Name:        advprops.h</span>
00003 <span class="comment">// Purpose:     wxPropertyGrid Advanced Properties (font, colour, etc.)</span>
00004 <span class="comment">// Author:      Jaakko Salli</span>
00005 <span class="comment">// Modified by:</span>
00006 <span class="comment">// Created:     Sep-25-2004</span>
00007 <span class="comment">// RCS-ID:      $Id:</span>
00008 <span class="comment">// Copyright:   (c) Jaakko Salli</span>
00009 <span class="comment">// Licence:     wxWindows license</span>
00011 <span class="comment"></span>
00012 <span class="preprocessor">#ifndef _WX_PROPGRID_ADVPROPS_H_</span>
00013 <span class="preprocessor"></span><span class="preprocessor">#define _WX_PROPGRID_ADVPROPS_H_</span>
00014 <span class="preprocessor"></span>
00015 <span class="preprocessor">#if defined(__GNUG__) &amp;&amp; !defined(NO_GCC_PRAGMA)</span>
00016 <span class="preprocessor"></span><span class="preprocessor">    #pragma interface "advprops.cpp"</span>
00017 <span class="preprocessor"></span><span class="preprocessor">#endif</span>
00018 <span class="preprocessor"></span>
00019 <span class="comment">// -----------------------------------------------------------------------</span>
00020 
00021 <span class="keywordtype">bool</span> WXDLLIMPEXP_PG operator == (<span class="keyword">const</span> wxFont&amp;, <span class="keyword">const</span> wxFont&amp;);
00022 
00023 WX_PG_DECLARE_VALUE_TYPE_WITH_DECL(wxFont,WXDLLIMPEXP_PG)
00024 
00025 WX_PG_DECLARE_VALUE_TYPE_WITH_DECL(wxColour,WXDLLIMPEXP_PG)
00026 
00027 <span class="keywordtype">bool</span> WXDLLIMPEXP_PG operator == (<span class="keyword">const</span> wxArrayInt&amp; array1, <span class="keyword">const</span> wxArrayInt&amp; array2);
00028 
00029 WX_PG_DECLARE_VALUE_TYPE_VOIDP_WITH_DECL(wxArrayInt,WXDLLIMPEXP_PG)
00030 
00031 <span class="comment">// -----------------------------------------------------------------------</span>
00032 
00033 <span class="comment">// Web colour is currently unsupported</span>
00034 #define wxPG_COLOUR_WEB_BASE        0x10000
00035 <span class="comment">//#define wxPG_TO_WEB_COLOUR(A)   ((wxUint32)(A+wxPG_COLOUR_WEB_BASE))</span>
00036 
00037 <span class="preprocessor">#define wxPG_COLOUR_CUSTOM      0xFFFFFF</span>
00038 <span class="preprocessor"></span>
<a name="l00046"></a><a class="code" href="classwxColourPropertyValue.htm">00046</a> <span class="keyword">class </span>WXDLLIMPEXP_PG wxColourPropertyValue : <span class="keyword">public</span> wxObject
00047 {
00048 <span class="keyword">public</span>:
<a name="l00066"></a><a class="code" href="classwxColourPropertyValue.htm#wxColourPropertyValueo1">00066</a>     wxUint32    m_type;
00067 
<a name="l00069"></a><a class="code" href="classwxColourPropertyValue.htm#wxColourPropertyValueo0">00069</a>     wxColour    m_colour;
00070 
00071     wxColourPropertyValue () { }
00072 
00073     <span class="keyword">inline</span> wxColourPropertyValue ( <span class="keyword">const</span> wxColour&amp; colour )
00074     {
00075         m_type = wxPG_COLOUR_CUSTOM;
00076         m_colour = colour;
00077     }
00078 
00079     <span class="keyword">inline</span> wxColourPropertyValue ( wxUint32 type )
00080     {
00081         m_type = type;
00082     }
00083 
00084     <span class="keyword">inline</span> wxColourPropertyValue ( wxUint32 type, <span class="keyword">const</span> wxColour&amp; colour )
00085     {
00086         m_type = type;
00087         m_colour = colour;
00088     }
00089 
00090 <span class="keyword">private</span>:
00091     DECLARE_DYNAMIC_CLASS(wxColourPropertyValue)
00092 };
00093 
00094 <span class="keywordtype">bool</span> WXDLLIMPEXP_PG operator == (<span class="keyword">const</span> wxColourPropertyValue&amp;, <span class="keyword">const</span> wxColourPropertyValue&amp;);
00095 
00096 WX_PG_DECLARE_VALUE_TYPE_WITH_DECL(wxColourPropertyValue,WXDLLIMPEXP_PG)
00097 
00098 <span class="comment">// -----------------------------------------------------------------------</span>
00099 <span class="comment">// Declare part of custom colour property macro pairs.</span>
00100 
00101 #define WX_PG_DECLARE_CUSTOM_COLOUR_PROPERTY_WITH_DECL(NAME,DECL) \
00102 WX_PG_DECLARE_PROPERTY_WITH_DECL(NAME,<span class="keyword">const</span> wxColourPropertyValue&amp;,*((wxColourPropertyValue*)NULL),WXDLLIMPEXP_PG)
00103 
00104 #define WX_PG_DECLARE_CUSTOM_COLOUR_PROPERTY(NAME) \
00105 WX_PG_DECLARE_PROPERTY(NAME,<span class="keyword">const</span> wxColourPropertyValue&amp;,*((wxColourPropertyValue*)NULL))
00106 
00107 #define WX_PG_DECLARE_CUSTOM_COLOUR_PROPERTY_USES_WXCOLOUR_WITH_DECL(NAME,DECL) \
00108 WX_PG_DECLARE_PROPERTY_WITH_DECL(NAME,<span class="keyword">const</span> wxColour&amp;,*wxBLACK,WXDLLIMPEXP_PG)
00109 
00110 #define WX_PG_DECLARE_CUSTOM_COLOUR_PROPERTY_USES_WXCOLOUR(NAME) \
00111 WX_PG_DECLARE_PROPERTY(NAME,<span class="keyword">const</span> wxColour&amp;,*wxBLACK))
00112 
00113 <span class="comment">// Declare advanced property types.</span>
00114 WX_PG_DECLARE_PROPERTY_WITH_DECL(wxFontProperty,<span class="keyword">const</span> wxFont&amp;,*wxNORMAL_FONT,WXDLLIMPEXP_PG)
00115 WX_PG_DECLARE_PROPERTY_WITH_DECL(wxSystemColourProperty,<span class="keyword">const</span> wxColourPropertyValue&amp;,*((wxColourPropertyValue*)NULL),WXDLLIMPEXP_PG)
00116 WX_PG_DECLARE_PROPERTY_WITH_DECL(wxCursorProperty,<span class="keywordtype">int</span>,wxCURSOR_NONE,WXDLLIMPEXP_PG)
00117 #<span class="keywordflow">if</span> wxUSE_IMAGE
00118 <span class="preprocessor">#include &lt;wx/image.h&gt;</span>
00119 WX_PG_DECLARE_PROPERTY_WITH_DECL(wxImageFileProperty,<span class="keyword">const</span> wxString&amp;,wxEmptyString,WXDLLIMPEXP_PG)
00120 #endif
00121 
00122 WX_PG_DECLARE_CUSTOM_COLOUR_PROPERTY_USES_WXCOLOUR_WITH_DECL(wxColourProperty,WXDLLIMPEXP_PG)
00123 
00124 <span class="comment">// MultiChoice is trickier.</span>
00125 <span class="keyword">extern</span> WXDLLIMPEXP_PG <a class="code" href="classwxPGProperty.htm">wxPGProperty</a>* wxPG_CONSTFUNC(wxMultiChoiceProperty)( <span class="keyword">const</span> wxString&amp;, <span class="keyword">const</span> wxString&amp; <span class="comment">/*= wxPG_LABEL*/</span>,
00126         wxArrayString&amp; strings <span class="comment">/*= wxArrayString()*/</span>,
00127         <span class="keyword">const</span> wxArrayInt&amp; value = *((wxArrayInt*)NULL) );
00128 
00129 <span class="keyword">extern</span> WXDLLIMPEXP_PG <a class="code" href="classwxPGProperty.htm">wxPGProperty</a>* wxPG_CONSTFUNC(wxMultiChoiceProperty)( <span class="keyword">const</span> wxString&amp;, <span class="keyword">const</span> wxString&amp; = <a class="code" href="group__miscellaneous.htm#ga2">wxPG_LABEL</a>,
00130         <span class="keyword">const</span> wxArrayInt&amp; = wxArrayInt() );
00131 
00132 <span class="comment">// -----------------------------------------------------------------------</span>
00133 
00134 <span class="comment">//</span>
00135 <span class="comment">// Define property classes *only* if propdev.h was included</span>
00136 <span class="comment">//</span>
00137 <span class="preprocessor">#ifdef _WX_PROPGRID_PROPDEV_H_</span>
00138 <span class="preprocessor"></span>
00139 <span class="comment">// -----------------------------------------------------------------------</span>
00140 
00141 <span class="keyword">class </span>WXDLLIMPEXP_PG wxFontPropertyClass : <span class="keyword">public</span> <a class="code" href="classwxPGPropertyWithChildren.htm">wxPGPropertyWithChildren</a>
00142 {
00143     WX_PG_DECLARE_PROPERTY_CLASS()
00144 <span class="keyword">public</span>:
00145 
00146     wxFontPropertyClass ( <span class="keyword">const</span> wxString&amp; label, <span class="keyword">const</span> wxString&amp; name, <span class="keyword">const</span> wxFont&amp; );
00147     <span class="keyword">virtual</span> ~wxFontPropertyClass ();
00148 
00149     WX_PG_DECLARE_PARENTAL_TYPE_METHODS()
00150     <span class="keyword">virtual</span> wxString <a class="code" href="classwxPGPropertyWithChildren.htm#wxPGRootPropertyClassa34">GetValueAsString</a> ( <span class="keywordtype">int</span> arg_flags = 0 ) <span class="keyword">const</span>;
00151 
00152     WX_PG_DECLARE_EVENT_METHODS()
00153     WX_PG_DECLARE_PARENTAL_METHODS()
00154     WX_PG_DECLARE_CUSTOM_PAINT_METHODS()
00155 
00156 <span class="keyword">protected</span>:
00157     wxFont m_value_wxFont;
00158 };
00159 
00160 <span class="comment">// -----------------------------------------------------------------------</span>
00161 
00162 <span class="keyword">class </span>WXDLLIMPEXP_PG wxSystemColourPropertyClass : <span class="keyword">public</span> wxEnumPropertyClass
00163 {
00164     WX_PG_DECLARE_PROPERTY_CLASS()
00165 <span class="keyword">public</span>:
00166 
00167     wxSystemColourPropertyClass ( <span class="keyword">const</span> wxString&amp; label, <span class="keyword">const</span> wxString&amp; name,
00168         <span class="keyword">const</span> wxColourPropertyValue&amp; value );
00169     ~wxSystemColourPropertyClass ();
00170 
00171     WX_PG_DECLARE_BASIC_TYPE_METHODS()
00172     WX_PG_DECLARE_EVENT_METHODS()
00173     WX_PG_DECLARE_CUSTOM_PAINT_METHODS()
00174 
00175     <span class="comment">// Default is to use wxSystemSettings::GetColour(index). Override to use</span>
00176     <span class="comment">// custom colour tables etc.</span>
00177     <span class="keyword">virtual</span> <span class="keywordtype">long</span> GetColour ( <span class="keywordtype">int</span> index );
00178 
00179 <span class="keyword">protected</span>:
00180 
00181     <span class="comment">// Special constructors to be used by derived classes.</span>
00182     wxSystemColourPropertyClass( <span class="keyword">const</span> wxString&amp; label, <span class="keyword">const</span> wxString&amp; name,
00183         <span class="keyword">const</span> wxChar** labels, <span class="keyword">const</span> <span class="keywordtype">long</span>* values, <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> itemcount,
00184         <span class="keyword">const</span> wxColourPropertyValue&amp; value );
00185     wxSystemColourPropertyClass( <span class="keyword">const</span> wxString&amp; label, <span class="keyword">const</span> wxString&amp; name,
00186         <span class="keyword">const</span> wxChar** labels, <span class="keyword">const</span> <span class="keywordtype">long</span>* values, <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> itemcount,
00187         <span class="keyword">const</span> wxColour&amp; value );
00188 
00189     <span class="keywordtype">void</span> Init ( <span class="keywordtype">int</span> type, <span class="keyword">const</span> wxColour&amp; colour );
00190 
00191     <span class="comment">// Translates colour to a int value, return wxNOT_FOUND if no match.</span>
00192     <span class="keywordtype">int</span> ColToInd ( <span class="keyword">const</span> wxColour&amp; colour );
00193 
00194     wxColourPropertyValue   m_value;
00195 };
00196 
00197 <span class="comment">// -----------------------------------------------------------------------</span>
00198 
00199 <span class="keyword">class </span>wxCursorPropertyClass : <span class="keyword">public</span> wxEnumPropertyClass
00200 {
00201     WX_PG_DECLARE_DERIVED_PROPERTY_CLASS()
00202 <span class="keyword">public</span>:
00203 
00204     wxCursorPropertyClass ( <span class="keyword">const</span> wxString&amp; label, <span class="keyword">const</span> wxString&amp; name, <span class="keywordtype">int</span> value );
00205     <span class="keyword">virtual</span> ~wxCursorPropertyClass ();
00206 
00207     WX_PG_DECLARE_CUSTOM_PAINT_METHODS()
00208 };
00209 
00210 <span class="comment">// -----------------------------------------------------------------------</span>
00211 
00212 <span class="preprocessor">#if wxUSE_IMAGE</span>
00213 <span class="preprocessor"></span>
00214 WXDLLIMPEXP_PG <span class="keyword">const</span> wxString&amp; wxPGGetDefaultImageWildcard ();
00215 
00216 <span class="keyword">class </span>wxImageFilePropertyClass : <span class="keyword">public</span> wxFilePropertyClass
00217 {
00218     WX_PG_DECLARE_DERIVED_PROPERTY_CLASS()
00219 <span class="keyword">public</span>:
00220 
00221     wxImageFilePropertyClass( <span class="keyword">const</span> wxString&amp; label, <span class="keyword">const</span> wxString&amp; name, <span class="keyword">const</span> wxString&amp; value );
00222     <span class="keyword">virtual</span> ~wxImageFilePropertyClass ();
00223 
00224     <span class="keyword">virtual</span> <span class="keywordtype">void</span> DoSetValue ( wxPGVariant value );
00225     WX_PG_DECLARE_CUSTOM_PAINT_METHODS()
00226 
00227 <span class="keyword">protected</span>:
00228     wxBitmap*   m_pBitmap; <span class="comment">// final thumbnail area</span>
00229     wxImage*    m_pImage; <span class="comment">// intermediate thumbnail area</span>
00230 
00231 };
00232 
00233 <span class="preprocessor">#endif</span>
00234 <span class="preprocessor"></span>
00235 <span class="preprocessor">#if wxUSE_CHOICEDLG</span>
00236 <span class="preprocessor"></span>
00237 <span class="keyword">class </span>wxMultiChoicePropertyClass : <span class="keyword">public</span> <a class="code" href="classwxPGProperty.htm">wxPGProperty</a>
00238 {
00239     WX_PG_DECLARE_PROPERTY_CLASS()
00240 <span class="keyword">public</span>:
00241 
00242     wxMultiChoicePropertyClass(<span class="keyword">const</span> wxString&amp; label,
00243                                <span class="keyword">const</span> wxString&amp; name,
00244                                wxArrayString&amp; strings,
00245                                <span class="keyword">const</span> wxArrayInt&amp; value);
00246     wxMultiChoicePropertyClass( <span class="keyword">const</span> wxString&amp; label, <span class="keyword">const</span> wxString&amp; name = wxPG_LABEL,
00247         <span class="keyword">const</span> wxArrayInt&amp; value = wxArrayInt() );
00248     <span class="keyword">virtual</span> ~wxMultiChoicePropertyClass ();
00249 
00250     <span class="keyword">virtual</span> <span class="keywordtype">void</span> <a class="code" href="classwxPGProperty.htm#wxPropertyCategoryClassa8">DoSetValue</a> ( wxPGVariant value );
00251     <span class="keyword">virtual</span> wxPGVariant <a class="code" href="classwxPGProperty.htm#wxPropertyCategoryClassa6">DoGetValue</a> () <span class="keyword">const</span>;
00252     <span class="keyword">virtual</span> wxString <a class="code" href="classwxPGProperty.htm#wxPGPropertya28">GetValueAsString</a> ( <span class="keywordtype">int</span> flags = 0 ) <span class="keyword">const</span>;
00253     <span class="keyword">virtual</span> <span class="keywordtype">bool</span> <a class="code" href="classwxPGProperty.htm#wxPGPropertya50">SetValueFromString</a> ( <span class="keyword">const</span> wxString&amp; text, <span class="keywordtype">int</span> flags );
00254     WX_PG_DECLARE_EVENT_METHODS()
00255 
00256     <span class="keyword">virtual</span> <span class="keywordtype">int</span> <a class="code" href="classwxPGProperty.htm#wxPropertyCategoryClassa14">GetChoiceInfo</a> ( wxPGChoiceInfo* choiceinfo );
00257 
00258 <span class="keyword">protected</span>:
00259 
00260     <span class="keywordtype">void</span> GenerateValueAsString ();
00261 
00262     <a class="code" href="classwxPGChoices.htm">wxPGChoices</a>*  m_choices; <span class="comment">// Holds strings (any values given are ignored).</span>
00263 
00264     wxArrayInt      m_value_wxArrayInt; <span class="comment">// Actual value.</span>
00265 
00266     wxString        m_display; <span class="comment">// Cache displayed text since generating it is relatively complicated.</span>
00267 };
00268 
00269 <span class="preprocessor">#endif // wxUSE_CHOICEDLG</span>
00270 <span class="preprocessor"></span>
00271 <span class="comment">// -----------------------------------------------------------------------</span>
00272 
00273 <span class="preprocessor">#endif // _WX_PROPGRID_PROPDEV_H_</span>
00274 <span class="preprocessor"></span>
00275 <span class="preprocessor">#endif // _WX_PROPGRID_ADVPROPS_H_</span>
</pre></div><hr size="1"><address style="align: right;"><small>Generated on Tue May 3 19:33:40 2005 for wxPropertyGrid by
<a href="http://www.doxygen.org/index.html">
<img src="doxygen.png" alt="doxygen" align="middle" border=0 > 
</a>1.3.6 </small></address>
</body>
</html>
