///////////////////////////////////////////////////////////////////////////////
//
// wxFormBuilder - A Visual Dialog Editor for wxWidgets.
// Copyright (C) 2005 José Antonio Hurtado
//
// This program is free software; you can redistribute it and/or
// modify it under the terms of the GNU General Public License
// as published by the Free Software Foundation; either version 2
// of the License, or (at your option) any later version.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with this program; if not, write to the Free Software
// Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA  02111-1307, USA.
//
// Written by
//   José Antonio Hurtado - joseantonio.hurtado@gmail.com
//   Juan Antonio Ortega  - jortegalalmolda@gmail.com
//
///////////////////////////////////////////////////////////////////////////////

#include <component.h>
#include <plugin.h>
#include <xrcconv.h>
#include <ticpp.h>

#include <wx/statline.h>
#include <wx/listctrl.h>
#include <wx/radiobox.h>
#include <wx/bmpbuttn.h>
#include <wx/animate.h>
#include <wx/aui/auibar.h>
#include <wx/bmpcbox.h>
#include <wx/menu.h>
#include <wx/imaglist.h>

#include <wx/log.h> // Debug

///////////////////////////////////////////////////////////////////////////////
// Custom status bar class for windows to prevent the status bar gripper from
// moving the entire wxFB window
#if defined(__WIN32__) && wxUSE_NATIVE_STATUSBAR
class wxIndependentStatusBar : public wxStatusBar
{
public:
	wxIndependentStatusBar( wxWindow *parent, wxWindowID id = wxID_ANY, long style = wxST_SIZEGRIP, const wxString& name = wxStatusBarNameStr )
	:
	wxStatusBar( parent, id, style, name )
	{
	}

	// override this virtual function to prevent the status bar from moving the main frame
	virtual WXLRESULT MSWWindowProc(WXUINT nMsg, WXWPARAM wParam, WXLPARAM lParam)
	{
		return wxStatusBarBase::MSWWindowProc(nMsg, wParam, lParam);
	}
};
#else
typedef wxStatusBar wxIndependentStatusBar;
#endif

class wxLeftDownRedirect : public wxEvtHandler
{
private:
	wxWindow* m_window;
	IManager* m_manager;

	void OnLeftDown( wxMouseEvent& )
	{
		m_manager->SelectObject( m_window );
	}

public:
	wxLeftDownRedirect( wxWindow* win, IManager* manager )
	:
	m_window( win ),
	m_manager( manager )
	{

	}
	DECLARE_EVENT_TABLE()
};

BEGIN_EVENT_TABLE( wxLeftDownRedirect, wxEvtHandler )
	EVT_LEFT_DOWN(wxLeftDownRedirect::OnLeftDown)
END_EVENT_TABLE()

///////////////////////////////////////////////////////////////////////////////
/**
Event handler for events generated by controls in this plugin
*/
class ComponentEvtHandler : public wxEvtHandler
{
private:
	wxWindow* m_window;
	IManager* m_manager;

public:
	ComponentEvtHandler( wxWindow* win, IManager* manager )
	:
	m_window( win ),
	m_manager( manager )
	{
	}

protected:
	void OnText( wxCommandEvent& event );
	void OnChecked( wxCommandEvent& event );
	void OnChoice( wxCommandEvent& event );
	void OnToolAUI( wxMouseEvent& event );
	void OnTool( wxCommandEvent& event );

	DECLARE_EVENT_TABLE()
};

BEGIN_EVENT_TABLE( ComponentEvtHandler, wxEvtHandler )
	EVT_TEXT( wxID_ANY, ComponentEvtHandler::OnText )
	EVT_CHECKBOX( wxID_ANY, ComponentEvtHandler::OnChecked )
	EVT_CHOICE( wxID_ANY, ComponentEvtHandler::OnChoice )

	// Tools do not get click events, so this will help select them
	EVT_TOOL( wxID_ANY, ComponentEvtHandler::OnTool )
	EVT_LEFT_UP( ComponentEvtHandler::OnToolAUI )
END_EVENT_TABLE()

///////////////////////////////////////////////////////////////////////////////
// FORMS
///////////////////////////////////////////////////////////////////////////////

// TO-DO: The "Form" type component should be drawn in the designer, so that,
//        for instance, a dark panel could be drawn for a wxFrame (N.B. ??)
class FrameFormComponent : public ComponentBase
{
public:
	wxObject* Create(IObject* /*obj*/, wxObject *parent)
	{
		wxPanel *panel = new wxPanel((wxWindow *)parent,-1);
		panel->SetBackgroundColour(wxColour(50,50,50));
		return panel;
	}

	ticpp::Element* ExportToXrc(IObject *obj)
	{
		ObjectToXrcFilter xrc(obj, wxT("wxFrame"), obj->GetPropertyAsString(wxT("name")));
		xrc.AddWindowProperties();
		xrc.AddProperty( wxT("title"), wxT("title"), XRC_TYPE_TEXT);
		if ( !obj->IsNull( wxT("center") ) )
		{
			xrc.AddPropertyValue( wxT("centered"), wxT("1") );
		}
		xrc.AddProperty( wxT("aui_managed"), wxT("aui_managed"), XRC_TYPE_BOOL);
		return xrc.GetXrcObject();
	}

	ticpp::Element* ImportFromXrc( ticpp::Element* xrcObj )
	{
		XrcToXfbFilter filter(xrcObj, wxT("Frame"));
		filter.AddWindowProperties();
		filter.AddProperty( wxT("title"), wxT("title"), XRC_TYPE_TEXT);
		filter.AddProperty(wxT("centered"), wxT("center"), XRC_TYPE_BITLIST);
		filter.AddProperty( wxT("aui_managed"), wxT("aui_managed"), XRC_TYPE_BOOL);
		return filter.GetXfbObject();
	}
};

class PanelFormComponent : public ComponentBase
{
public:
	wxObject* Create(IObject* /*obj*/, wxObject *parent)
	{
		wxPanel *panel = new wxPanel((wxWindow *)parent,-1);
		return panel;
	}

	ticpp::Element* ExportToXrc(IObject *obj)
	{
		ObjectToXrcFilter xrc(obj, wxT("wxPanel"), obj->GetPropertyAsString(wxT("name")));
		xrc.AddWindowProperties();
		return xrc.GetXrcObject();
	}

	ticpp::Element* ImportFromXrc( ticpp::Element* xrcObj )
	{
		XrcToXfbFilter filter(xrcObj, wxT("Panel"));
		filter.AddWindowProperties();
		return filter.GetXfbObject();
	}
};

class DialogFormComponent : public ComponentBase
{
public:
	wxObject* Create(IObject* /*obj*/, wxObject *parent)
	{
		wxPanel *panel = new wxPanel((wxWindow *)parent,-1);
		return panel;
	}

	ticpp::Element* ExportToXrc(IObject *obj)
	{
		ObjectToXrcFilter xrc(obj, wxT("wxDialog"), obj->GetPropertyAsString(wxT("name")));
		xrc.AddWindowProperties();
		xrc.AddProperty( wxT("title"), wxT("title"), XRC_TYPE_TEXT);
		if ( !obj->IsNull( wxT("center") ) )
		{
			xrc.AddPropertyValue( wxT("centered"), wxT("1") );
		}
		return xrc.GetXrcObject();
	}

	ticpp::Element* ImportFromXrc( ticpp::Element* xrcObj )
	{
		XrcToXfbFilter filter(xrcObj, wxT("Dialog"));
		filter.AddWindowProperties();
		filter.AddProperty( wxT("title"), wxT("title"), XRC_TYPE_TEXT);
		filter.AddProperty(wxT("centered"), wxT("center"), XRC_TYPE_BITLIST);
		return filter.GetXfbObject();
	}
};

class MenuBarFormComponent : public ComponentBase
{
public:

	wxObject* Create(IObject *obj, wxObject* /*parent*/)
	{
		wxMenuBar *mb = new wxMenuBar(obj->GetPropertyAsInteger(wxT("style")) |
			obj->GetPropertyAsInteger(wxT("window_style")));
		return mb;
	}

	ticpp::Element* ExportToXrc(IObject *obj)
	{
		ObjectToXrcFilter xrc(obj, wxT("wxMenuBar"), obj->GetPropertyAsString(wxT("name")));
		xrc.AddProperty(wxT("label"),wxT("label"),XRC_TYPE_TEXT);
		return xrc.GetXrcObject();
	}

	ticpp::Element* ImportFromXrc( ticpp::Element* xrcObj )
	{
		XrcToXfbFilter filter(xrcObj, wxT("MenuBar"));
		filter.AddProperty(wxT("label"),wxT("label"),XRC_TYPE_TEXT);
		return filter.GetXfbObject();
	}
};

class ToolBarFormComponent : public ComponentBase
{
public:
	wxObject* Create(IObject *obj, wxObject *parent)
	{
		wxToolBar *tb = new wxToolBar((wxWindow*)parent, -1,
			obj->GetPropertyAsPoint(wxT("pos")),
			obj->GetPropertyAsSize(wxT("size")),
			obj->GetPropertyAsInteger(wxT("style")) | obj->GetPropertyAsInteger(wxT("window_style")) | wxTB_NOALIGN | wxTB_NODIVIDER | wxNO_BORDER);

		if (!obj->IsNull(wxT("bitmapsize")))
			tb->SetToolBitmapSize(obj->GetPropertyAsSize(wxT("bitmapsize")));
		if (!obj->IsNull(wxT("margins")))
		{
			wxSize margins(obj->GetPropertyAsSize(wxT("margins")));
			tb->SetMargins(margins.GetWidth(), margins.GetHeight());
		}
		if (!obj->IsNull(wxT("packing")))
			tb->SetToolPacking(obj->GetPropertyAsInteger(wxT("packing")));
		if (!obj->IsNull(wxT("separation")))
			tb->SetToolSeparation(obj->GetPropertyAsInteger(wxT("separation")));

		tb->PushEventHandler( new ComponentEvtHandler( tb, GetManager() ) );

		return tb;
	}

	void OnCreated( wxObject* wxobject, wxWindow* /*wxparent*/ )
	{
		wxToolBar* tb = wxDynamicCast( wxobject, wxToolBar );
		if ( NULL == tb )
		{
			// very very strange
			return;
		}

		size_t count = GetManager()->GetChildCount( wxobject );
		for ( size_t i = 0; i < count; ++i )
		{
			wxObject* child = GetManager()->GetChild( wxobject, i );
			IObject* childObj = GetManager()->GetIObject( child );
			if ( wxT("tool") == childObj->GetClassName() )
			{
				tb->AddTool( 	wxID_ANY,
								childObj->GetPropertyAsString( wxT("label") ),
								childObj->GetPropertyAsBitmap( wxT("bitmap") ),
								wxNullBitmap,
								(wxItemKind)childObj->GetPropertyAsInteger( wxT("kind") ),
								childObj->GetPropertyAsString( wxT("help") ),
								wxEmptyString,
								child
							);
			}
			else if ( wxT("toolSeparator") == childObj->GetClassName() )
			{
				tb->AddSeparator();
			}
			else
			{
				wxControl* control = wxDynamicCast( child, wxControl );
				if ( NULL != control )
				{
					tb->AddControl( control );
				}
			}
		}
		tb->Realize();

	}

	ticpp::Element* ExportToXrc(IObject *obj)
	{
		ObjectToXrcFilter xrc(obj, wxT("wxToolBar"), obj->GetPropertyAsString(wxT("name")));
		xrc.AddWindowProperties();
		xrc.AddProperty(wxT("bitmapsize"), wxT("bitmapsize"), XRC_TYPE_SIZE);
		xrc.AddProperty(wxT("margins"), wxT("margins"), XRC_TYPE_SIZE);
		xrc.AddProperty(wxT("packing"), wxT("packing"), XRC_TYPE_INTEGER);
		xrc.AddProperty(wxT("separation"), wxT("separation"), XRC_TYPE_INTEGER);
		return xrc.GetXrcObject();
	}

	ticpp::Element* ImportFromXrc( ticpp::Element* xrcObj )
	{
		XrcToXfbFilter filter(xrcObj, wxT("ToolBar"));
		filter.AddWindowProperties();
		filter.AddProperty(wxT("bitmapsize"), wxT("bitmapsize"), XRC_TYPE_SIZE);
		filter.AddProperty(wxT("margins"), wxT("margins"), XRC_TYPE_SIZE);
		filter.AddProperty(wxT("packing"), wxT("packing"), XRC_TYPE_INTEGER);
		filter.AddProperty(wxT("separation"), wxT("separation"), XRC_TYPE_INTEGER);
		return filter.GetXfbObject();
	}
};

///////////////////////////////////////////////////////////////////////////////
// WIDGETS
///////////////////////////////////////////////////////////////////////////////

class ButtonComponent : public ComponentBase
{
public:

	wxObject* Create(IObject *obj, wxObject *parent)
	{
		wxButton* button = new wxButton((wxWindow*)parent,-1,
			obj->GetPropertyAsString(wxT("label")),
			obj->GetPropertyAsPoint(wxT("pos")),
			obj->GetPropertyAsSize(wxT("size")),
			obj->GetPropertyAsInteger(wxT("style")) | obj->GetPropertyAsInteger(wxT("window_style")));

		if ( obj->GetPropertyAsInteger( wxT("default") ) != 0 )
		{
			button->SetDefault();
		}

		return button;
	}

	ticpp::Element* ExportToXrc(IObject *obj)
	{
		ObjectToXrcFilter xrc(obj, wxT("wxButton"), obj->GetPropertyAsString(wxT("name")));
		xrc.AddWindowProperties();
		xrc.AddProperty(wxT("label"),wxT("label"),XRC_TYPE_TEXT);
		xrc.AddProperty(wxT("default"),wxT("default"),XRC_TYPE_BOOL);
		return xrc.GetXrcObject();
	}

	ticpp::Element* ImportFromXrc( ticpp::Element* xrcObj )
	{
		XrcToXfbFilter filter(xrcObj, wxT("wxButton"));
		filter.AddWindowProperties();
		filter.AddProperty(wxT("label"),wxT("label"),XRC_TYPE_TEXT);
		filter.AddProperty(wxT("default"),wxT("default"),XRC_TYPE_BOOL);
		return filter.GetXfbObject();
	}
};

class BitmapButtonComponent : public ComponentBase
{
public:

	wxObject* Create(IObject *obj, wxObject *parent)
	{
		wxBitmapButton* button = new wxBitmapButton((wxWindow*)parent,-1,
			obj->GetPropertyAsBitmap(wxT("bitmap")),
			obj->GetPropertyAsPoint(wxT("pos")),
			obj->GetPropertyAsSize(wxT("size")),
			obj->GetPropertyAsInteger(wxT("style")) | obj->GetPropertyAsInteger(wxT("window_style")));

		if ( obj->GetPropertyAsInteger( wxT("default") ) != 0 )
		{
			button->SetDefault();
		}

		if ( !obj->IsNull( wxT("disabled") ) )
		{
			button->SetBitmapDisabled( obj->GetPropertyAsBitmap( wxT("disabled") ) );
		}

		if ( !obj->IsNull( wxT("selected") ) )
		{
			button->SetBitmapSelected( obj->GetPropertyAsBitmap( wxT("selected") ) );
		}

		if ( !obj->IsNull( wxT("focus") ) )
		{
			button->SetBitmapFocus( obj->GetPropertyAsBitmap( wxT("focus") ) );
		}

		if ( !obj->IsNull( wxT("hover") ) )
		{
			button->SetBitmapHover( obj->GetPropertyAsBitmap( wxT("hover") ) );
		}
		return button;
	}

	ticpp::Element* ExportToXrc(IObject *obj)
	{
		ObjectToXrcFilter xrc(obj, wxT("wxBitmapButton"), obj->GetPropertyAsString(wxT("name")));
		xrc.AddWindowProperties();
		xrc.AddProperty(wxT("bitmap"),wxT("bitmap"),XRC_TYPE_BITMAP);
		if ( !obj->IsNull( wxT("disabled") ) )
		{
			xrc.AddProperty(wxT("disabled"),wxT("disabled"),XRC_TYPE_BITMAP);
		}
		if ( !obj->IsNull( wxT("selected") ) )
		{
			xrc.AddProperty(wxT("selected"),wxT("selected"),XRC_TYPE_BITMAP);
		}
		if ( !obj->IsNull( wxT("focus") ) )
		{
			xrc.AddProperty(wxT("focus"),wxT("focus"),XRC_TYPE_BITMAP);
		}
		if ( !obj->IsNull( wxT("hover") ) )
		{
			xrc.AddProperty(wxT("hover"),wxT("hover"),XRC_TYPE_BITMAP);
		}
		xrc.AddProperty(wxT("default"),wxT("default"),XRC_TYPE_BOOL);
		return xrc.GetXrcObject();
	}

	ticpp::Element* ImportFromXrc( ticpp::Element* xrcObj )
	{
		XrcToXfbFilter filter(xrcObj, wxT("wxBitmapButton"));
		filter.AddWindowProperties();
		filter.AddProperty(wxT("bitmap"),wxT("bitmap"),XRC_TYPE_BITMAP);
		filter.AddProperty(wxT("disabled"),wxT("disabled"),XRC_TYPE_BITMAP);
		filter.AddProperty(wxT("selected"),wxT("selected"),XRC_TYPE_BITMAP);
		filter.AddProperty(wxT("focus"),wxT("focus"),XRC_TYPE_BITMAP);
		filter.AddProperty(wxT("hover"),wxT("hover"),XRC_TYPE_BITMAP);
		filter.AddProperty(wxT("default"),wxT("default"),XRC_TYPE_BOOL);
		return filter.GetXfbObject();
	}
};


class TextCtrlComponent : public ComponentBase
{
public:

	wxObject* Create(IObject *obj, wxObject *parent)
	{
		wxTextCtrl* tc = new wxTextCtrl((wxWindow *)parent,-1,
			obj->GetPropertyAsString(wxT("value")),
			obj->GetPropertyAsPoint(wxT("pos")),
			obj->GetPropertyAsSize(wxT("size")),
			obj->GetPropertyAsInteger(wxT("style")) | obj->GetPropertyAsInteger(wxT("window_style")));

		if ( !obj->IsNull( wxT("maxlength") ) )
		{
			tc->SetMaxLength( obj->GetPropertyAsInteger( wxT("maxlength") ) );
		}

		tc->PushEventHandler( new ComponentEvtHandler( tc, GetManager() ) );

		return tc;
	}

	ticpp::Element* ExportToXrc(IObject *obj)
	{
		ObjectToXrcFilter xrc(obj, wxT("wxTextCtrl"), obj->GetPropertyAsString(wxT("name")));
		xrc.AddWindowProperties();
		xrc.AddProperty(wxT("value"),wxT("value"),XRC_TYPE_TEXT);
        if (!obj->IsNull(wxT("maxlength")))
            xrc.AddProperty(wxT("maxlength"), wxT("maxlength"), XRC_TYPE_INTEGER);
		return xrc.GetXrcObject();
	}

	ticpp::Element* ImportFromXrc( ticpp::Element* xrcObj )
	{
		XrcToXfbFilter filter(xrcObj, wxT("wxTextCtrl"));
		filter.AddWindowProperties();
		filter.AddProperty(wxT("value"),wxT("value"),XRC_TYPE_TEXT);
        filter.AddProperty(wxT("maxlength"), wxT("maxlength"), XRC_TYPE_INTEGER);
		return filter.GetXfbObject();
	}

};

void ComponentEvtHandler::OnText( wxCommandEvent& )
{
	wxTextCtrl* tc = wxDynamicCast( m_window, wxTextCtrl );
	if ( tc != NULL )
	{
		m_manager->ModifyProperty( m_window, wxT("value"), tc->GetValue() );
		tc->SetInsertionPointEnd();
		tc->SetFocus();
	}
}

class StaticTextComponent : public ComponentBase
{
public:

	wxObject* Create(IObject *obj, wxObject *parent)
	{
		wxStaticText* st = new wxStaticText((wxWindow *)parent,-1,
			obj->GetPropertyAsString(wxT("label")),
			obj->GetPropertyAsPoint(wxT("pos")),
			obj->GetPropertyAsSize(wxT("size")),
			obj->GetPropertyAsInteger(wxT("style")) | obj->GetPropertyAsInteger(wxT("window_style")));

		st->Wrap( obj->GetPropertyAsInteger( wxT("wrap") ) );

		return st;
	}

	ticpp::Element* ExportToXrc(IObject *obj)
	{
		wxString name = obj->GetPropertyAsString(wxT("name"));
		ObjectToXrcFilter xrc(obj, wxT("wxStaticText"), name);
		xrc.AddWindowProperties();
		xrc.AddProperty(wxT("label"),wxT("label"),XRC_TYPE_TEXT);
		xrc.AddProperty(wxT("wrap"),wxT("wrap"),XRC_TYPE_INTEGER);
		return xrc.GetXrcObject();
	}

	ticpp::Element* ImportFromXrc( ticpp::Element* xrcObj )
	{
		XrcToXfbFilter filter(xrcObj, wxT("wxStaticText"));
		filter.AddWindowProperties();
		filter.AddProperty(wxT("label"),wxT("label"),XRC_TYPE_TEXT);
		filter.AddProperty(wxT("wrap"),wxT("wrap"),XRC_TYPE_INTEGER);
		return filter.GetXfbObject();
	}
};

class ComboBoxComponent : public ComponentBase
{
public:
	wxObject* Create(IObject *obj, wxObject *parent)
	{
		wxComboBox *combo = new wxComboBox((wxWindow *)parent,-1,
			obj->GetPropertyAsString(wxT("value")),
			obj->GetPropertyAsPoint(wxT("pos")),
			obj->GetPropertyAsSize(wxT("size")),
			0,
			NULL,
			obj->GetPropertyAsInteger(wxT("style")) | obj->GetPropertyAsInteger(wxT("window_style")));

		// choices
		wxArrayString choices = obj->GetPropertyAsArrayString(wxT("choices"));
		for (unsigned int i=0; i<choices.Count(); i++)
			combo->Append(choices[i]);

		return combo;
	}

	ticpp::Element* ExportToXrc(IObject *obj)
	{
		ObjectToXrcFilter xrc(obj, wxT("wxComboBox"), obj->GetPropertyAsString(wxT("name")));
		xrc.AddWindowProperties();
		xrc.AddProperty(wxT("value"),wxT("value"),XRC_TYPE_TEXT);
		xrc.AddProperty(wxT("choices"),wxT("content"),XRC_TYPE_STRINGLIST);
		return xrc.GetXrcObject();
	}

	ticpp::Element* ImportFromXrc( ticpp::Element* xrcObj )
	{
		XrcToXfbFilter filter(xrcObj, wxT("wxComboBox"));
		filter.AddWindowProperties();
		filter.AddProperty(wxT("value"),wxT("value"),XRC_TYPE_TEXT);
		filter.AddProperty(wxT("content"),wxT("choices"),XRC_TYPE_STRINGLIST);
		return filter.GetXfbObject();
	}
};

class BitmapComboBoxComponent : public ComponentBase
{
public:
	wxObject* Create(IObject *obj, wxObject *parent)
	{
		wxBitmapComboBox *bcombo = new wxBitmapComboBox((wxWindow *)parent,-1,
			obj->GetPropertyAsString(wxT("value")),
			obj->GetPropertyAsPoint(wxT("pos")),
			obj->GetPropertyAsSize(wxT("size")),
			0,
			NULL,
			obj->GetPropertyAsInteger(wxT("style")) | obj->GetPropertyAsInteger(wxT("window_style")));

		// choices
		wxArrayString choices = obj->GetPropertyAsArrayString(wxT("choices"));
		for (unsigned int i=0; i<choices.Count(); i++)
		{
			wxImage img(choices[i].BeforeFirst(wxChar(58)));
			bcombo->Append(choices[i].AfterFirst(wxChar(58)), wxBitmap(img));
		}
			
		return bcombo;
	}
	
	ticpp::Element* ExportToXrc(IObject *obj)
	{
		ObjectToXrcFilter xrc(obj, wxT("wxBitmapComboBox"), obj->GetPropertyAsString(wxT("name")));
		xrc.AddWindowProperties();
		xrc.AddProperty(wxT("value"),wxT("value"),XRC_TYPE_TEXT);
		xrc.AddProperty(wxT("choices"),wxT("content"),XRC_TYPE_STRINGLIST);
		return xrc.GetXrcObject();
	}

	ticpp::Element* ImportFromXrc( ticpp::Element* xrcObj )
	{
		XrcToXfbFilter filter(xrcObj, wxT("wxBitmapComboBox"));
		filter.AddWindowProperties();
		filter.AddProperty(wxT("value"),wxT("value"),XRC_TYPE_TEXT);
		filter.AddProperty(wxT("content"),wxT("choices"),XRC_TYPE_STRINGLIST);
		return filter.GetXfbObject();
	}
};

class CheckBoxComponent : public ComponentBase
{
public:
	wxObject* Create(IObject *obj, wxObject *parent)
	{
		wxCheckBox *res = new wxCheckBox((wxWindow *)parent,-1,
			obj->GetPropertyAsString(wxT("label")),
			obj->GetPropertyAsPoint(wxT("pos")),
			obj->GetPropertyAsSize(wxT("size")),
			obj->GetPropertyAsInteger(wxT("window_style")) | obj->GetPropertyAsInteger(_T("style")));
        res->SetValue(obj->GetPropertyAsInteger(_T("checked")) != 0);

        res->PushEventHandler( new ComponentEvtHandler( res, GetManager() ) );

        return res;
	}

	ticpp::Element* ExportToXrc(IObject *obj)
	{
		ObjectToXrcFilter xrc(obj, wxT("wxCheckBox"), obj->GetPropertyAsString(wxT("name")));
		xrc.AddWindowProperties();
		xrc.AddProperty(wxT("label"),wxT("label"),XRC_TYPE_TEXT);
		xrc.AddProperty(wxT("checked"),wxT("checked"),XRC_TYPE_BOOL);
		return xrc.GetXrcObject();
	}

	ticpp::Element* ImportFromXrc( ticpp::Element* xrcObj )
	{
		XrcToXfbFilter filter(xrcObj, wxT("wxCheckBox"));
		filter.AddWindowProperties();
		filter.AddProperty(wxT("label"),wxT("label"),XRC_TYPE_TEXT);
		filter.AddProperty(wxT("checked"),wxT("checked"),XRC_TYPE_BOOL);
		return filter.GetXfbObject();
	}
};

void ComponentEvtHandler::OnChecked( wxCommandEvent& )
{
	wxCheckBox* cb = wxDynamicCast( m_window, wxCheckBox );
	if ( cb != NULL )
	{
		wxString cbValue;
		cbValue.Printf( wxT("%i"), cb->GetValue() );
		m_manager->ModifyProperty( m_window, wxT("checked"), cbValue );
		cb->SetFocus();
	}
}

class StaticBitmapComponent : public ComponentBase
{
public:
	wxObject* Create(IObject *obj, wxObject *parent)
	{
		return new wxStaticBitmap((wxWindow *)parent,-1,
			obj->GetPropertyAsBitmap(wxT("bitmap")),
			obj->GetPropertyAsPoint(wxT("pos")),
			obj->GetPropertyAsSize(wxT("size")),
			obj->GetPropertyAsInteger(wxT("window_style")));
	}

	ticpp::Element* ExportToXrc(IObject *obj)
	{
		ObjectToXrcFilter xrc(obj, wxT("wxStaticBitmap"), obj->GetPropertyAsString(wxT("name")));
		xrc.AddWindowProperties();
		xrc.AddProperty( wxT("bitmap"), wxT("bitmap"), XRC_TYPE_BITMAP );
		return xrc.GetXrcObject();
	}

	ticpp::Element* ImportFromXrc( ticpp::Element* xrcObj )
	{
		XrcToXfbFilter filter(xrcObj, wxT("wxStaticBitmap"));
		filter.AddWindowProperties();
    filter.AddProperty(wxT("bitmap"),wxT("bitmap"),XRC_TYPE_BITMAP);
		return filter.GetXfbObject();
	}
};

class XpmStaticBitmapComponent : public StaticBitmapComponent
{
};

class StaticLineComponent : public ComponentBase
{
public:
	wxObject* Create(IObject *obj, wxObject *parent)
	{
		return new wxStaticLine((wxWindow *)parent,-1,
			obj->GetPropertyAsPoint(wxT("pos")),
			obj->GetPropertyAsSize(wxT("size")),
			obj->GetPropertyAsInteger(wxT("style")) | obj->GetPropertyAsInteger(wxT("window_style")));
	}

	ticpp::Element* ExportToXrc(IObject *obj)
	{
		ObjectToXrcFilter xrc(obj, wxT("wxStaticLine"), obj->GetPropertyAsString(wxT("name")));
		xrc.AddWindowProperties();
		return xrc.GetXrcObject();
	}

	ticpp::Element* ImportFromXrc( ticpp::Element* xrcObj )
	{
		XrcToXfbFilter filter(xrcObj, wxT("wxStaticLine"));
		filter.AddWindowProperties();
		return filter.GetXfbObject();
	}
};

class ListCtrlComponent : public ComponentBase
{
public:
	wxObject* Create(IObject *obj, wxObject *parent)
	{
		wxListCtrl *lc = new wxListCtrl((wxWindow*)parent, -1,
			obj->GetPropertyAsPoint(wxT("pos")),
			obj->GetPropertyAsSize(wxT("size")),
			(obj->GetPropertyAsInteger(wxT("style")) | obj->GetPropertyAsInteger(wxT("window_style"))) & ~wxLC_VIRTUAL);


		// Refilling
		int i,j;
		wxString buf;
		if ( (lc->GetWindowStyle() & wxLC_REPORT) != 0 )
		{
			for (i=0;i<4;i++)
			{
				buf.Printf(wxT("Label %d"),i);
				lc->InsertColumn(i, buf, wxLIST_FORMAT_LEFT, 80);
			}
		}

		for (j=0;j<10;j++)
		{
			long temp;
			buf.Printf(wxT("Cell (0,%d)"),j);
			temp = lc->InsertItem(j,buf);
			if ( (lc->GetWindowStyle() & wxLC_REPORT) != 0 )
			{
				for (i=1;i<4;i++)
				{
					buf.Printf(wxT("Cell (%d,%d)"),i,j);
					lc->SetItem(temp,i,buf);
				}
			}
		}

		return lc;
	}

	ticpp::Element* ExportToXrc(IObject *obj)
	{
		ObjectToXrcFilter xrc(obj, wxT("wxListCtrl"), obj->GetPropertyAsString(wxT("name")));
		xrc.AddWindowProperties();
		return xrc.GetXrcObject();
	}

	ticpp::Element* ImportFromXrc( ticpp::Element* xrcObj )
	{
		XrcToXfbFilter filter(xrcObj, wxT("wxListCtrl"));
		filter.AddWindowProperties();
		return filter.GetXfbObject();
	}
};

class ListColComponent : public ComponentBase
{
	ticpp::Element* ExportToXrc( IObject *obj )
	{
		ObjectToXrcFilter xrc( obj, wxT("listcol"), obj->GetPropertyAsString( wxT("name") ) );
		xrc.AddProperty( wxT("text"),  wxT("text"),  XRC_TYPE_TEXT );
		xrc.AddProperty( wxT("width"), wxT("width"), XRC_TYPE_INTEGER );

		wxString alignment = obj->GetPropertyAsString( wxT("align") );
		if ( alignment == wxT("wxLIST_FORMAT_LEFT") )
		{
			xrc.AddPropertyValue(wxT("align"), wxT("wxLIST_FORMAT_LEFT"));
		}
		else if ( alignment == wxT("wxLIST_FORMAT_RIGHT") )
		{
			xrc.AddPropertyValue(wxT("align"), wxT("wxLIST_FORMAT_RIGHT"));
		}
		else
			xrc.AddPropertyValue(wxT("align"), wxT("wxLIST_FORMAT_CENTRE"));

		return xrc.GetXrcObject();
	}

	ticpp::Element* ImportFromXrc( ticpp::Element* xrcObj )
	{
		XrcToXfbFilter filter( xrcObj, wxT("listcol") );
		filter.AddProperty( wxT("text"),  wxT("text"),  XRC_TYPE_TEXT );
		filter.AddProperty( wxT("width"), wxT("width"), XRC_TYPE_INTEGER );

		try
		{
			ticpp::Element *alignment = xrcObj->FirstChildElement("align");
			std::string value = alignment->GetText();
			if ( value == "wxLIST_FORMAT_LEFT" )
			{
				filter.AddPropertyValue( wxT("align"), wxT("wxLIST_FORMAT_LEFT") );
			}
			else if ( value == "wxLIST_FORMAT_RIGHT" )
			{
				filter.AddPropertyValue( wxT("align"), wxT("wxLIST_FORMAT_RIGHT") );
			}
			else
				filter.AddPropertyValue( wxT("align"), wxT("wxLIST_FORMAT_CENTRE") );
		}
		catch( ticpp::Exception& )
		{
		}

		return filter.GetXfbObject();
	}
};

class ListItemComponent : public ComponentBase
{
	ticpp::Element* ExportToXrc( IObject *obj )
	{
		ObjectToXrcFilter xrc( obj, wxT("listitem"), obj->GetPropertyAsString( wxT("name") ) );
		xrc.AddProperty( wxT("text"),         wxT("text"),         XRC_TYPE_TEXT );
		xrc.AddProperty( wxT("textcolour"),   wxT("textcolour"),   XRC_TYPE_COLOUR );
		xrc.AddProperty( wxT("bg"),           wxT("bg"),           XRC_TYPE_COLOUR );
		xrc.AddProperty( wxT("font"),         wxT("font"),         XRC_TYPE_FONT );
		xrc.AddProperty( wxT("align"),        wxT("align"),        XRC_TYPE_INTEGER );
		xrc.AddProperty( wxT("bitmap"),       wxT("bitmap"),       XRC_TYPE_BITMAP );
		xrc.AddProperty( wxT("bitmap-small"), wxT("bitmap-small"), XRC_TYPE_BITMAP );
		xrc.AddProperty( wxT("image"),        wxT("image"),        XRC_TYPE_INTEGER );
		xrc.AddProperty( wxT("image-small"),  wxT("image-small"),  XRC_TYPE_INTEGER );
		xrc.AddProperty( wxT("col"),          wxT("col"),          XRC_TYPE_INTEGER );
		xrc.AddProperty( wxT("data"),         wxT("data"),         XRC_TYPE_INTEGER );
		xrc.AddProperty( wxT("state"),        wxT("state"),        XRC_TYPE_BITLIST );
		return xrc.GetXrcObject();
	}

	ticpp::Element* ImportFromXrc( ticpp::Element* xrcObj )
	{
		XrcToXfbFilter filter( xrcObj, wxT("listitem" ) );
		filter.AddProperty( wxT("text"),         wxT("text"),         XRC_TYPE_TEXT );
		filter.AddProperty( wxT("textcolour"),   wxT("textcolour"),   XRC_TYPE_COLOUR );
		filter.AddProperty( wxT("bg"),           wxT("bg"),           XRC_TYPE_COLOUR );
		filter.AddProperty( wxT("font"),         wxT("font"),         XRC_TYPE_FONT );
		filter.AddProperty( wxT("align"),        wxT("align"),        XRC_TYPE_STRINGLIST );
		filter.AddProperty( wxT("bitmap"),       wxT("bitmap"),       XRC_TYPE_BITMAP );
		filter.AddProperty( wxT("bitmap-small"), wxT("bitmap-small"), XRC_TYPE_BITMAP );
		filter.AddProperty( wxT("image"),        wxT("image"),        XRC_TYPE_INTEGER );
		filter.AddProperty( wxT("image-small"),  wxT("image-small"),  XRC_TYPE_INTEGER );
		filter.AddProperty( wxT("col"),          wxT("col"),          XRC_TYPE_INTEGER );
		filter.AddProperty( wxT("data"),         wxT("data"),         XRC_TYPE_INTEGER );
		filter.AddProperty( wxT("state"),        wxT("state"),        XRC_TYPE_BITLIST );
		return filter.GetXfbObject();
	}
};

class ListBoxComponent : public ComponentBase
{
public:
	wxObject* Create(IObject *obj, wxObject *parent)
	{
		wxListBox *listbox = new wxListBox((wxWindow*)parent, -1,
			obj->GetPropertyAsPoint(wxT("pos")),
			obj->GetPropertyAsSize(wxT("size")),
			0,
			NULL,
			obj->GetPropertyAsInteger(wxT("style")) | obj->GetPropertyAsInteger(wxT("window_style")));

		// choices
		wxArrayString choices = obj->GetPropertyAsArrayString(wxT("choices"));
		for (unsigned int i=0; i<choices.Count(); i++)
			listbox->Append(choices[i]);

		return listbox;
	}

	ticpp::Element* ExportToXrc(IObject *obj)
	{
		ObjectToXrcFilter xrc(obj, wxT("wxListBox"), obj->GetPropertyAsString(wxT("name")));
		xrc.AddWindowProperties();
		xrc.AddProperty(wxT("choices"), wxT("content"), XRC_TYPE_STRINGLIST);
		return xrc.GetXrcObject();
	}

	ticpp::Element* ImportFromXrc( ticpp::Element* xrcObj )
	{
		XrcToXfbFilter filter(xrcObj, wxT("wxListBox"));
		filter.AddWindowProperties();
		filter.AddProperty(wxT("content"),wxT("choices"), XRC_TYPE_STRINGLIST);
		return filter.GetXfbObject();
	}
};

class RadioBoxComponent : public ComponentBase, public wxEvtHandler
{
public:
	wxObject* Create(IObject *obj, wxObject *parent)
	{
		wxArrayString choices = obj->GetPropertyAsArrayString(wxT("choices"));
		int count = choices.Count();
		if ( 0 == count )
		{
		    choices.Add( _("wxRadioBox must have at least one choice") );
		    count = 1;
		}

		int majorDim = obj->GetPropertyAsInteger(wxT("majorDimension"));
		if (majorDim < 1)
		{
			wxLogWarning(_("majorDimension must be greater than zero."));
			majorDim = 1;
		}

		wxRadioBox *radiobox = new wxRadioBox((wxWindow*)parent, -1,
			obj->GetPropertyAsString(wxT("label")),
			obj->GetPropertyAsPoint(wxT("pos")),
			obj->GetPropertyAsSize(wxT("size")),
			choices,
			majorDim,
			obj->GetPropertyAsInteger(wxT("style")) | obj->GetPropertyAsInteger(wxT("window_style")));

		int selection = obj->GetPropertyAsInteger( wxT("selection") );
		if ( selection < count )
		{
			radiobox->SetSelection( selection );
		}

		radiobox->Connect( wxEVT_COMMAND_RADIOBOX_SELECTED, wxCommandEventHandler( RadioBoxComponent::OnRadioBox ), NULL, this );

		return radiobox;
	}

	void OnRadioBox( wxCommandEvent& event )
	{
		wxRadioBox* window = dynamic_cast< wxRadioBox* >( event.GetEventObject() );
		if ( 0 != window )
		{
			wxString value;
			value.Printf( wxT("%i"), window->GetSelection() );
			GetManager()->ModifyProperty( window, wxT("selection"), value );
			window->SetFocus();

			GetManager()->SelectObject( window );
		}
	}

	void Cleanup( wxObject* obj )
	{
		wxRadioBox* window = dynamic_cast< wxRadioBox* >( obj );
		if ( 0 != window )
		{
			window->Disconnect( wxEVT_COMMAND_RADIOBOX_SELECTED, wxCommandEventHandler( RadioBoxComponent::OnRadioBox ), NULL, this );
		}
		ComponentBase::Cleanup( obj );
	}

	ticpp::Element* ExportToXrc(IObject *obj)
	{
		ObjectToXrcFilter xrc(obj, wxT("wxRadioBox"), obj->GetPropertyAsString(wxT("name")));
		xrc.AddWindowProperties();
		xrc.AddProperty(wxT("label"), wxT("label"), XRC_TYPE_TEXT);
		xrc.AddProperty(wxT("selection"), wxT("selection"), XRC_TYPE_INTEGER );
		xrc.AddProperty(wxT("choices"), wxT("content"), XRC_TYPE_STRINGLIST);
		xrc.AddProperty(wxT("majorDimension"), wxT("dimension"), XRC_TYPE_INTEGER);
		return xrc.GetXrcObject();
	}

	ticpp::Element* ImportFromXrc( ticpp::Element* xrcObj )
	{
		XrcToXfbFilter filter(xrcObj, wxT("wxRadioBox"));
		filter.AddWindowProperties();
		filter.AddProperty(wxT("label"),wxT("label"),XRC_TYPE_TEXT);
		filter.AddProperty(wxT("selection"), wxT("selection"), XRC_TYPE_INTEGER );
		filter.AddProperty(wxT("content"),wxT("choices"), XRC_TYPE_STRINGLIST);
		filter.AddProperty(wxT("dimension"), wxT("majorDimension"), XRC_TYPE_INTEGER);
		return filter.GetXfbObject();
	}
};

class RadioButtonComponent : public ComponentBase
{
public:
	wxObject* Create(IObject *obj, wxObject *parent)
	{
		wxRadioButton *rb = new wxRadioButton((wxWindow *)parent,-1,
			obj->GetPropertyAsString(wxT("label")),
			obj->GetPropertyAsPoint(wxT("pos")),
			obj->GetPropertyAsSize(wxT("size")),
			obj->GetPropertyAsInteger(wxT("style")) | obj->GetPropertyAsInteger(wxT("window_style")));

		rb->SetValue( ( obj->GetPropertyAsInteger(wxT("value")) != 0 ) );
		return rb;
	}

	ticpp::Element* ExportToXrc(IObject *obj)
	{
		ObjectToXrcFilter xrc(obj, wxT("wxRadioButton"), obj->GetPropertyAsString(wxT("name")));
		xrc.AddWindowProperties();
		xrc.AddProperty(wxT("label"),wxT("label"), XRC_TYPE_TEXT);
		xrc.AddProperty(wxT("value"),wxT("value"), XRC_TYPE_BOOL);
		return xrc.GetXrcObject();
	}

	ticpp::Element* ImportFromXrc( ticpp::Element* xrcObj )
	{
		XrcToXfbFilter filter(xrcObj, wxT("wxRadioButton"));
		filter.AddWindowProperties();
		filter.AddProperty(wxT("label"),wxT("label"), XRC_TYPE_TEXT);
		filter.AddProperty(wxT("value"),wxT("value"), XRC_TYPE_BOOL);
		return filter.GetXfbObject();
	}
};

class StatusBarComponent : public ComponentBase
{
public:
	wxObject* Create(IObject *obj, wxObject *parent)
	{
		wxStatusBar *sb = new wxIndependentStatusBar((wxWindow*)parent, -1,
			obj->GetPropertyAsInteger(wxT("style")) | obj->GetPropertyAsInteger(wxT("window_style")));
		sb->SetFieldsCount(obj->GetPropertyAsInteger(wxT("fields")));

		#ifndef __WXMSW__
		sb->PushEventHandler( new wxLeftDownRedirect( sb, GetManager() ) );
		#endif
		return sb;
	}

	ticpp::Element* ExportToXrc(IObject *obj)
	{
		ObjectToXrcFilter xrc(obj, wxT("wxStatusBar"), obj->GetPropertyAsString(wxT("name")));
		xrc.AddWindowProperties();
		xrc.AddProperty(wxT("fields"),wxT("fields"),XRC_TYPE_INTEGER);
		return xrc.GetXrcObject();
	}

	ticpp::Element* ImportFromXrc( ticpp::Element* xrcObj )
	{
		XrcToXfbFilter filter(xrcObj, wxT("wxStatusBar"));
		filter.AddWindowProperties();
		filter.AddProperty(wxT("fields"),wxT("fields"),XRC_TYPE_INTEGER);
		return filter.GetXfbObject();
	}
};

class MenuBarComponent : public ComponentBase
{
public:

	wxObject* Create(IObject *obj, wxObject* /*parent*/)
	{
		wxMenuBar *mb = new wxMenuBar(obj->GetPropertyAsInteger(wxT("style")) |
			obj->GetPropertyAsInteger(wxT("window_style")));
		return mb;
	}

	ticpp::Element* ExportToXrc(IObject *obj)
	{
		ObjectToXrcFilter xrc(obj, wxT("wxMenuBar"), obj->GetPropertyAsString(wxT("name")));
		xrc.AddProperty(wxT("label"),wxT("label"),XRC_TYPE_TEXT);
		return xrc.GetXrcObject();
	}

	ticpp::Element* ImportFromXrc( ticpp::Element* xrcObj )
	{
		XrcToXfbFilter filter(xrcObj, wxT("wxMenuBar"));
		filter.AddProperty(wxT("label"),wxT("label"),XRC_TYPE_TEXT);
		return filter.GetXfbObject();
	}
};

class MenuComponent : public ComponentBase
{
public:

	ticpp::Element* ExportToXrc(IObject *obj)
	{
		ObjectToXrcFilter xrc(obj, wxT("wxMenu"), obj->GetPropertyAsString(wxT("name")));
		xrc.AddProperty(wxT("label"),wxT("label"),XRC_TYPE_TEXT);
		return xrc.GetXrcObject();
	}

	ticpp::Element* ImportFromXrc( ticpp::Element* xrcObj )
	{
		XrcToXfbFilter filter(xrcObj, wxT("wxMenu"));
		filter.AddProperty(wxT("label"),wxT("label"),XRC_TYPE_TEXT);
		return filter.GetXfbObject();
	}
};

class SubMenuComponent : public ComponentBase
{
 public:

  ticpp::Element* ExportToXrc(IObject *obj)
  {
    ObjectToXrcFilter xrc(obj, wxT("wxMenu"), obj->GetPropertyAsString(wxT("name")));
    xrc.AddProperty(wxT("label"),wxT("label"),XRC_TYPE_TEXT);
    return xrc.GetXrcObject();
  }

  ticpp::Element* ImportFromXrc( ticpp::Element* xrcObj )
  {
    XrcToXfbFilter filter(xrcObj, wxT("submenu"));
    filter.AddProperty(wxT("label"),wxT("label"),XRC_TYPE_TEXT);
    return filter.GetXfbObject();
  }
};

class MenuItemComponent : public ComponentBase
{
public:

	ticpp::Element* ExportToXrc(IObject *obj)
	{
		ObjectToXrcFilter xrc(obj, wxT("wxMenuItem"), obj->GetPropertyAsString(wxT("name")));
		wxString shortcut = obj->GetPropertyAsString(wxT("shortcut"));
		wxString label;
		if (shortcut.IsEmpty())
			label = obj->GetPropertyAsString(wxT("label"));
		else
			label = obj->GetPropertyAsString(wxT("label")) + wxT("\t") + shortcut;

		xrc.AddPropertyValue(wxT("label"), label, true);
		xrc.AddProperty(wxT("help"),wxT("help"),XRC_TYPE_TEXT);

	    if (!obj->IsNull(wxT("bitmap")))
	      xrc.AddProperty(wxT("bitmap"),wxT("bitmap"),XRC_TYPE_BITMAP);

		int kind = obj->GetPropertyAsInteger(wxT("kind"));

		if (obj->GetPropertyAsInteger(wxT("checked")) && (kind == wxITEM_RADIO || kind == wxITEM_CHECK))
			xrc.AddProperty(wxT("checked"), wxT("checked"), XRC_TYPE_BOOL);

		if (obj->GetPropertyAsInteger(wxT("enabled")) == 0)
			xrc.AddProperty(wxT("enabled"), wxT("enabled"), XRC_TYPE_BOOL);

		switch (kind)
		{
		case wxITEM_CHECK: xrc.AddPropertyValue(wxT("checkable"), wxT("1")); break;
		case wxITEM_RADIO: xrc.AddPropertyValue(wxT("radio"), wxT("1")); break;
		}

		return xrc.GetXrcObject();
	}

	ticpp::Element* ImportFromXrc( ticpp::Element* xrcObj )
	{
		XrcToXfbFilter filter(xrcObj, wxT("wxMenuItem"));

		try
		{
			ticpp::Element *labelElement = xrcObj->FirstChildElement("label");
			wxString label( labelElement->GetText().c_str(), wxConvUTF8 );

			wxString shortcut;
			int pos = label.Find( wxT("\\t") );
			if ( pos >= 0 )
			{
				shortcut = label.Mid( pos + 2 );
				label = label.Left( pos );
			}

			filter.AddPropertyValue( wxT("label"), label, true );
			filter.AddPropertyValue( wxT("shortcut"), shortcut );
		}
		catch( ticpp::Exception& )
		{
		}

		filter.AddProperty(wxT("help"),wxT("help"),XRC_TYPE_TEXT);
		filter.AddProperty(wxT("bitmap"),wxT("bitmap"),XRC_TYPE_BITMAP);
		return filter.GetXfbObject();
	}
};

class SeparatorComponent : public ComponentBase
{
public:

	ticpp::Element* ExportToXrc(IObject *obj)
	{
		ObjectToXrcFilter xrc(obj, wxT("separator"));
		return xrc.GetXrcObject();
	}

	ticpp::Element* ImportFromXrc( ticpp::Element* xrcObj )
	{
		XrcToXfbFilter filter(xrcObj, wxT("separator"));
		return filter.GetXfbObject();
	}
};

class ToolBarComponent : public ComponentBase
{
public:
	wxObject* Create(IObject *obj, wxObject *parent)
	{
		wxToolBar *tb = new wxToolBar((wxWindow*)parent, -1,
			obj->GetPropertyAsPoint(wxT("pos")),
			obj->GetPropertyAsSize(wxT("size")),
			obj->GetPropertyAsInteger(wxT("style")) | obj->GetPropertyAsInteger(wxT("window_style")) | wxTB_NOALIGN | wxTB_NODIVIDER | wxNO_BORDER);

		if (!obj->IsNull(wxT("bitmapsize")))
			tb->SetToolBitmapSize(obj->GetPropertyAsSize(wxT("bitmapsize")));
		if (!obj->IsNull(wxT("margins")))
		{
			wxSize margins(obj->GetPropertyAsSize(wxT("margins")));
			tb->SetMargins(margins.GetWidth(), margins.GetHeight());
		}
		if (!obj->IsNull(wxT("packing")))
			tb->SetToolPacking(obj->GetPropertyAsInteger(wxT("packing")));
		if (!obj->IsNull(wxT("separation")))
			tb->SetToolSeparation(obj->GetPropertyAsInteger(wxT("separation")));

		tb->PushEventHandler( new ComponentEvtHandler( tb, GetManager() ) );

		return tb;
	}

	void OnCreated( wxObject* wxobject, wxWindow* /*wxparent*/ )
	{
		wxToolBar* tb = wxDynamicCast( wxobject, wxToolBar );
		if ( NULL == tb )
		{
			// very very strange
			return;
		}

		size_t count = GetManager()->GetChildCount( wxobject );
		for ( size_t i = 0; i < count; ++i )
		{
			wxObject* child = GetManager()->GetChild( wxobject, i );
			IObject* childObj = GetManager()->GetIObject( child );
			if ( wxT("tool") == childObj->GetClassName() )
			{
				tb->AddTool( 	wxID_ANY,
								childObj->GetPropertyAsString( wxT("label") ),
								childObj->GetPropertyAsBitmap( wxT("bitmap") ),
								wxNullBitmap,
								(wxItemKind)childObj->GetPropertyAsInteger( wxT("kind") ),
								childObj->GetPropertyAsString( wxT("help") ),
								wxEmptyString,
								child
							);
			}
			else if ( wxT("toolSeparator") == childObj->GetClassName() )
			{
				tb->AddSeparator();
			}
			else
			{
				wxControl* control = wxDynamicCast( child, wxControl );
				if ( NULL != control )
				{
					tb->AddControl( control );
				}
			}
		}
		tb->Realize();

	}

	ticpp::Element* ExportToXrc(IObject *obj)
	{
		ObjectToXrcFilter xrc(obj, wxT("wxToolBar"), obj->GetPropertyAsString(wxT("name")));
		xrc.AddWindowProperties();
		xrc.AddProperty(wxT("bitmapsize"), wxT("bitmapsize"), XRC_TYPE_SIZE);
		xrc.AddProperty(wxT("margins"), wxT("margins"), XRC_TYPE_SIZE);
		xrc.AddProperty(wxT("packing"), wxT("packing"), XRC_TYPE_INTEGER);
		xrc.AddProperty(wxT("separation"), wxT("separation"), XRC_TYPE_INTEGER);
		return xrc.GetXrcObject();
	}

	ticpp::Element* ImportFromXrc( ticpp::Element* xrcObj )
	{
		XrcToXfbFilter filter(xrcObj, wxT("wxToolBar"));
		filter.AddWindowProperties();
		filter.AddProperty(wxT("bitmapsize"), wxT("bitmapsize"), XRC_TYPE_SIZE);
		filter.AddProperty(wxT("margins"), wxT("margins"), XRC_TYPE_SIZE);
		filter.AddProperty(wxT("packing"), wxT("packing"), XRC_TYPE_INTEGER);
		filter.AddProperty(wxT("separation"), wxT("separation"), XRC_TYPE_INTEGER);
		return filter.GetXfbObject();
	}
};

class AuiToolBarComponent : public ComponentBase
{
public:
	wxObject* Create(IObject *obj, wxObject *parent)
	{
		wxAuiToolBar *tb = new wxAuiToolBar((wxWindow*)parent, -1,
			obj->GetPropertyAsPoint(wxT("pos")),
			obj->GetPropertyAsSize(wxT("size")),
			obj->GetPropertyAsInteger(wxT("style")) );// | obj->GetPropertyAsInteger(wxT("window_style")) | wxTB_NOALIGN | wxTB_NODIVIDER | wxNO_BORDER);

		if (!obj->IsNull(wxT("bitmapsize")))
			tb->SetToolBitmapSize(obj->GetPropertyAsSize(wxT("bitmapsize")));
		if (!obj->IsNull(wxT("margins")))
		{
			wxSize margins(obj->GetPropertyAsSize(wxT("margins")));
			tb->SetMargins(margins.GetWidth(), margins.GetHeight());
		}
		if (!obj->IsNull(wxT("packing")))
			tb->SetToolPacking(obj->GetPropertyAsInteger(wxT("packing")));
		if (!obj->IsNull(wxT("separation")))
			tb->SetToolSeparation(obj->GetPropertyAsInteger(wxT("separation")));

		tb->PushEventHandler( new ComponentEvtHandler( tb, GetManager() ) );

		return tb;
	}

	void OnCreated( wxObject* wxobject, wxWindow* /*wxparent*/ )
	{
		wxAuiToolBar* tb = wxDynamicCast( wxobject, wxAuiToolBar );
		if ( NULL == tb )
		{
			// very very strange
			return;
		}
		int toolIdx = -1;
		size_t count = GetManager()->GetChildCount( wxobject );
		for ( size_t i = 0; i < count; ++i )
		{
			wxObject* child = GetManager()->GetChild( wxobject, i );
			IObject* childObj = GetManager()->GetIObject( child );
			if ( wxT("tool") == childObj->GetClassName() )
			{
				tb->AddTool( 	wxID_ANY,
								childObj->GetPropertyAsString( wxT("label") ),
								childObj->GetPropertyAsBitmap( wxT("bitmap") ),
								wxNullBitmap,
								(wxItemKind)childObj->GetPropertyAsInteger( wxT("kind") ),
								childObj->GetPropertyAsString( wxT("help") ),
								wxEmptyString,
								child
							);
				toolIdx++;
				wxAuiToolBarItem* itm = tb->FindToolByIndex( toolIdx );
				if ( childObj->GetPropertyAsInteger(wxT("context_menu") ) == 1 && !itm->HasDropDown() )
                    tb->SetToolDropDown( itm->GetId(), true );
				else if ( childObj->GetPropertyAsInteger(wxT("context_menu") ) == 0 && itm->HasDropDown() )
					tb->SetToolDropDown( itm->GetId(), false );
			}
			else if ( wxT("toolSeparator") == childObj->GetClassName() )
			{
				tb->AddSeparator();
			}
			else
			{
				wxControl* control = wxDynamicCast( child, wxControl );
				if ( NULL != control )
				{
					tb->AddControl( control );
				}
			}
		}
		tb->Realize();
	}
/*
	ticpp::Element* ExportToXrc(IObject *obj)
	{
		ObjectToXrcFilter xrc(obj, wxT("wxAuiToolBar"), obj->GetPropertyAsString(wxT("name")));
		xrc.AddWindowProperties();
		xrc.AddProperty(wxT("bitmapsize"), wxT("bitmapsize"), XRC_TYPE_SIZE);
		xrc.AddProperty(wxT("margins"), wxT("margins"), XRC_TYPE_SIZE);
		xrc.AddProperty(wxT("packing"), wxT("packing"), XRC_TYPE_INTEGER);
		xrc.AddProperty(wxT("separation"), wxT("separation"), XRC_TYPE_INTEGER);
		return xrc.GetXrcObject();
	}

	ticpp::Element* ImportFromXrc( ticpp::Element* xrcObj )
	{
		XrcToXfbFilter filter(xrcObj, wxT("wxAuiToolBar"));
		filter.AddWindowProperties();
		filter.AddProperty(wxT("bitmapsize"), wxT("bitmapsize"), XRC_TYPE_SIZE);
		filter.AddProperty(wxT("margins"), wxT("margins"), XRC_TYPE_SIZE);
		filter.AddProperty(wxT("packing"), wxT("packing"), XRC_TYPE_INTEGER);
		filter.AddProperty(wxT("separation"), wxT("separation"), XRC_TYPE_INTEGER);
		return filter.GetXfbObject();
	}
*/
};

void ComponentEvtHandler::OnToolAUI( wxMouseEvent& event )
{
	// FIXME: A click on a tool item without this handler
	// fires wxFB app events (wxFB toolbar tools like save, open project etc.).

	if ( m_window != event.GetEventObject() ) return;

	wxAuiToolBar* tb = static_cast< wxAuiToolBar* >( m_window );
	wxAuiToolBarItem* item = tb->FindToolByPosition( event.GetX(), event.GetY() );

	if ( item && item->HasDropDown() )
	{
		wxMenu mnuPopUp;
		wxMenuItem* m1 =  new wxMenuItem( &mnuPopUp, wxID_ANY, _("Drop Down Item 1") );
		wxMenuItem* m2 =  new wxMenuItem( &mnuPopUp, wxID_ANY, _("Drop Down Item 2") );
		wxMenuItem* m3 =  new wxMenuItem( &mnuPopUp, wxID_ANY, _("Drop Down Item 3") );
		mnuPopUp.Append( m1 );
		mnuPopUp.Append( m2 );
		mnuPopUp.Append( m3 );
		tb->SetToolSticky( item->GetId(), true );
		wxRect rect = tb->GetToolRect( item->GetId() );
		wxPoint pt = tb->ClientToScreen( rect.GetBottomLeft() );
		pt = tb->ScreenToClient( pt );
		tb->PopupMenu( &mnuPopUp, pt );
		tb->SetToolSticky( item->GetId(), false );
	}
}

void ComponentEvtHandler::OnTool( wxCommandEvent& event )
{
	//FIXME: Same as above

	wxToolBar* tb = wxDynamicCast( event.GetEventObject(), wxToolBar );
	if ( NULL == tb )
	{
		// very very strange
		return;
	}

	wxObject* wxobject = tb->GetToolClientData( event.GetId() );
	if ( NULL != wxobject )
	{
		m_manager->SelectObject( wxobject );
	}
}

class ToolComponent : public ComponentBase
{
public:

	ticpp::Element* ExportToXrc(IObject *obj)
	{
		ObjectToXrcFilter xrc(obj, wxT("tool"), obj->GetPropertyAsString(wxT("name")));
		xrc.AddProperty(wxT("label"), wxT("label"), XRC_TYPE_TEXT);
		xrc.AddProperty(wxT("tooltip"), wxT("tooltip"), XRC_TYPE_TEXT);
		xrc.AddProperty(wxT("statusbar"), wxT("longhelp"), XRC_TYPE_TEXT);
		xrc.AddProperty(wxT("bitmap"), wxT("bitmap"), XRC_TYPE_BITMAP);

		wxItemKind kind = (wxItemKind)obj->GetPropertyAsInteger(wxT("kind"));
		if ( wxITEM_CHECK == kind )
		{
			xrc.AddPropertyValue( wxT("toggle"), wxT("1") );
		}
		else if ( wxITEM_RADIO == kind )
		{
			xrc.AddPropertyValue( wxT("radio"), wxT("1") );
		}
		return xrc.GetXrcObject();
	}

	ticpp::Element* ImportFromXrc( ticpp::Element* xrcObj )
	{
		XrcToXfbFilter filter(xrcObj, wxT("tool"));
		filter.AddProperty(wxT("longhelp"), wxT("statusbar"), XRC_TYPE_TEXT);
		filter.AddProperty(wxT("tooltip"), wxT("tooltip"), XRC_TYPE_TEXT);
		filter.AddProperty(wxT("label"), wxT("label"), XRC_TYPE_TEXT);
		filter.AddProperty(wxT("bitmap"), wxT("bitmap"), XRC_TYPE_BITMAP);
		bool gotToggle = false;
		bool gotRadio = false;
		ticpp::Element* toggle = xrcObj->FirstChildElement( "toggle", false );
		if ( toggle )
		{
			toggle->GetTextOrDefault( &gotToggle, false );
			if ( gotToggle )
			{
				filter.AddPropertyValue( wxT("kind"), wxT("wxITEM_CHECK") );
			}
		}
		if ( !gotToggle )
		{
			ticpp::Element* radio = xrcObj->FirstChildElement( "radio", false );
			if ( radio )
			{
				radio->GetTextOrDefault( &gotRadio, false );
				if ( gotRadio )
				{
					filter.AddPropertyValue( wxT("kind"), wxT("wxITEM_RADIO") );
				}
			}
		}
		if ( !(gotToggle || gotRadio) )
		{
			filter.AddPropertyValue( wxT("kind"), wxT("wxITEM_NORMAL") );
		}

		return filter.GetXfbObject();
	}
};

class ToolSeparatorComponent : public ComponentBase
{
public:
	ticpp::Element* ExportToXrc(IObject *obj)
	{
		ObjectToXrcFilter xrc( obj, wxT("separator") );
		return xrc.GetXrcObject();
	}

	ticpp::Element* ImportFromXrc( ticpp::Element* xrcObj )
	{
		XrcToXfbFilter filter( xrcObj, wxT("toolSeparator") );
		return filter.GetXfbObject();
	}
};

class ChoiceComponent : public ComponentBase
{
public:
	wxObject* Create(IObject *obj, wxObject *parent)
	{
		wxArrayString choices = obj->GetPropertyAsArrayString(wxT("choices"));
		wxString *strings = new wxString[choices.Count()];
		for (unsigned int i=0; i < choices.Count(); i++)
			strings[i] = choices[i];

		wxChoice *choice = new wxChoice((wxWindow*)parent, -1,
			obj->GetPropertyAsPoint(wxT("pos")),
			obj->GetPropertyAsSize(wxT("size")),
			(int)choices.Count(),
			strings,
			obj->GetPropertyAsInteger(wxT("window_style")));

		choice->SetSelection(obj->GetPropertyAsInteger(wxT("selection")));

		delete []strings;

		choice->PushEventHandler( new ComponentEvtHandler( choice, GetManager() ) );

		return choice;
	}

	ticpp::Element* ExportToXrc(IObject *obj)
	{
		ObjectToXrcFilter xrc(obj, wxT("wxChoice"), obj->GetPropertyAsString(wxT("name")));
		xrc.AddWindowProperties();
		xrc.AddProperty(wxT("selection"), wxT("selection"), XRC_TYPE_INTEGER);
		xrc.AddProperty(wxT("choices"), wxT("content"), XRC_TYPE_STRINGLIST);
		return xrc.GetXrcObject();
	}

	ticpp::Element* ImportFromXrc( ticpp::Element* xrcObj )
	{
		XrcToXfbFilter filter(xrcObj, wxT("wxChoice"));
		filter.AddWindowProperties();
		filter.AddProperty(wxT("selection"), wxT("selection"), XRC_TYPE_INTEGER);
		filter.AddProperty(wxT("content"),wxT("choices"), XRC_TYPE_STRINGLIST);
		return filter.GetXfbObject();
	}

};

void ComponentEvtHandler::OnChoice( wxCommandEvent& )
{
	wxChoice* window = wxDynamicCast( m_window, wxChoice );
	if ( window != NULL )
	{
		wxString value;
		value.Printf( wxT("%i"), window->GetSelection() );
		m_manager->ModifyProperty( m_window, wxT("selection"), value );
		window->SetFocus();
	}
}

class SliderComponent : public ComponentBase
{
public:
	wxObject* Create(IObject *obj, wxObject *parent)
	{
		return new wxSlider((wxWindow *)parent,-1,
			obj->GetPropertyAsInteger(wxT("value")),
			obj->GetPropertyAsInteger(wxT("minValue")),
			obj->GetPropertyAsInteger(wxT("maxValue")),
			obj->GetPropertyAsPoint(wxT("pos")),
			obj->GetPropertyAsSize(wxT("size")),
			obj->GetPropertyAsInteger(wxT("style")) | obj->GetPropertyAsInteger(wxT("window_style")) | obj->GetPropertyAsInteger(wxT("window_style")));
	}

	ticpp::Element* ExportToXrc(IObject *obj)
	{
		ObjectToXrcFilter xrc(obj, wxT("wxSlider"), obj->GetPropertyAsString(wxT("name")));
		xrc.AddWindowProperties();
		xrc.AddProperty(wxT("value"), wxT("value"), XRC_TYPE_INTEGER);
		xrc.AddProperty( wxT("minValue"), wxT("min"), XRC_TYPE_INTEGER);
		xrc.AddProperty( wxT("maxValue"), wxT("max"), XRC_TYPE_INTEGER);
		return xrc.GetXrcObject();
	}

	ticpp::Element* ImportFromXrc( ticpp::Element* xrcObj )
	{
		XrcToXfbFilter filter(xrcObj, wxT("wxSlider"));
		filter.AddWindowProperties();
		filter.AddProperty(wxT("value"), wxT("value"), XRC_TYPE_INTEGER);
		filter.AddProperty(wxT("min"), wxT("minValue"), XRC_TYPE_INTEGER);
		filter.AddProperty(wxT("max"), wxT("maxValue"), XRC_TYPE_INTEGER);
		return filter.GetXfbObject();
	}

};

class GaugeComponent : public ComponentBase
{
public:
	wxObject* Create(IObject *obj, wxObject *parent)
	{
		wxGauge *gauge = new wxGauge((wxWindow *)parent,-1,
			obj->GetPropertyAsInteger(wxT("range")),
			obj->GetPropertyAsPoint(wxT("pos")),
			obj->GetPropertyAsSize(wxT("size")),
			obj->GetPropertyAsInteger(wxT("style")) | obj->GetPropertyAsInteger(wxT("window_style")));
		gauge->SetValue(obj->GetPropertyAsInteger(wxT("value")));
		return gauge;
	}

	ticpp::Element* ExportToXrc(IObject *obj)
	{
		ObjectToXrcFilter xrc(obj, wxT("wxGauge"), obj->GetPropertyAsString(wxT("name")));
		xrc.AddWindowProperties();
		xrc.AddProperty(wxT("range"), wxT("range"), XRC_TYPE_INTEGER);
		xrc.AddProperty(wxT("value"), wxT("value"), XRC_TYPE_INTEGER);
		return xrc.GetXrcObject();
	}

	ticpp::Element* ImportFromXrc( ticpp::Element* xrcObj )
	{
		XrcToXfbFilter filter(xrcObj, wxT("wxGauge"));
		filter.AddWindowProperties();
		filter.AddProperty(wxT("range"), wxT("range"), XRC_TYPE_INTEGER);
		filter.AddProperty(wxT("value"), wxT("value"), XRC_TYPE_INTEGER);
		return filter.GetXfbObject();
	}

};

class AnimCtrlComponent : public ComponentBase
{
public:
	wxObject* Create(IObject *obj, wxObject *parent)
	{
		wxAnimationCtrl* ac = new wxAnimationCtrl((wxWindow *)parent, wxID_ANY,
			wxNullAnimation,
			obj->GetPropertyAsPoint(wxT("pos")),
			obj->GetPropertyAsSize(wxT("size")),
			obj->GetPropertyAsInteger(wxT("style")) | obj->GetPropertyAsInteger(wxT("window_style")));

		if ( !obj->IsNull( wxT("animation") ) )
		{
			if( ac->LoadFile( obj->GetPropertyAsString( wxT("animation") ) ) )
			{
				if ( !obj->IsNull( wxT("play") ) && ( obj->GetPropertyAsInteger( wxT("play") ) == 1 ) ) ac->Play();
				else
					ac->Stop();
			}
		}
		
		if ( !obj->IsNull( wxT("inactive_bitmap") ) )
		{
			wxBitmap bmp = obj->GetPropertyAsBitmap( wxT("inactive_bitmap") );
			if( bmp.IsOk() ) ac->SetInactiveBitmap( bmp );
			else
				ac->SetInactiveBitmap( wxNullBitmap );
		}

		ac->PushEventHandler( new ComponentEvtHandler( ac, GetManager() ) );

		return ac;
	}

	ticpp::Element* ExportToXrc(IObject *obj)
	{
		ObjectToXrcFilter xrc(obj, wxT("wxAnimationCtrl"), obj->GetPropertyAsString(wxT("name")));
		xrc.AddWindowProperties();
		xrc.AddProperty(wxT("animation"),wxT("animation"),XRC_TYPE_TEXT);
		return xrc.GetXrcObject();
	}

	ticpp::Element* ImportFromXrc( ticpp::Element* xrcObj )
	{
		XrcToXfbFilter filter(xrcObj, wxT("wxAnimation"));
		filter.AddWindowProperties();
		filter.AddProperty(wxT("animation"),wxT("animation"),XRC_TYPE_TEXT);
		return filter.GetXfbObject();
	}
};

class ImageListComponent : public ComponentBase
{
	wxObject* Create( IObject *obj, wxObject *parent )
	{
		wxSize size = obj->GetPropertyAsSize( wxT("size") );
		bool   mask = obj->GetPropertyAsInteger( wxT("mask") );

		wxImageList* imgList = new wxImageList( size.GetWidth(), size.GetHeight(), mask );

		return imgList;
	}

	void OnCreated( wxObject* wxobject, wxWindow* wxparent )
	{
		wxImageList* imgList = wxDynamicCast( wxobject, wxImageList );
		wxASSERT( imgList != NULL );

		if ( NULL == imgList )
		{
			return;
		}

		IObject* ilsObj = GetManager()->GetIObject( wxobject );
		wxSize   size   = ilsObj->GetPropertyAsSize( wxT("size") );
		int      width  = size.GetWidth();
		int      height = size.GetHeight();
		size_t   count  = GetManager()->GetChildCount( wxobject );

		for ( size_t i = 0; i < count; ++i )
		{
			wxObject* bmpItm = GetManager()->GetChild( wxobject, i );
			IObject*  bmpObj = GetManager()->GetIObject( bmpItm );
			wxBitmap  bmp    = bmpObj->GetPropertyAsBitmap( wxT("bitmap") );
			int       tmpWdt = bmp.GetWidth();
			int       tmpHgt = bmp.GetHeight();

			if ( bmp.IsOk() )
			{
				if ( tmpWdt > 0 && tmpHgt > 0 )
				{
					if ( (width  < 1) || (height < 1) )
					{
						//FIXME! This returns always 21x21 because default.xpm 
						width  = tmpWdt;
						height = tmpHgt;
						GetManager()->ModifyProperty( imgList, wxT("size"),
							wxString::Format( wxT("%i,%i"), width, height ), false );
					}
					if ( (tmpHgt != width) || (tmpHgt != height) )
					{
						wxImage image = bmp.ConvertToImage();
						bmp = wxBitmap( image.Scale( width, height ) );
					}
					imgList->Add( bmp );
				}
				else
				{
					wxLogDebug( wxT("bmp.IsOk() lies..") );
				}
			}
		}
		if ( count == 0 )
		{
			GetManager()->ModifyProperty( imgList, wxT("size"), wxT("-1,-1"), false );
		}
		wxLogDebug( wxT("Images: %i"), imgList->GetImageCount() );
	}

	ticpp::Element* ExportToXrc( IObject *obj )
	{
		ObjectToXrcFilter xrc( obj, wxT("imagelist"), obj->GetPropertyAsString( wxT("name") ), wxEmptyString, true);
		xrc.AddProperty( wxT("size"), wxT("size"), XRC_TYPE_SIZE );
		xrc.AddProperty( wxT("mask"), wxT("mask"), XRC_TYPE_BOOL );
		return xrc.GetXrcObject();
	}

	ticpp::Element* ImportFromXrc( ticpp::Element* xrcObj )
	{
		XrcToXfbFilter filter( xrcObj, wxT("imagelist"), true );
		filter.AddProperty( wxT("size"), wxT("size"), XRC_TYPE_SIZE );
		filter.AddProperty( wxT("mask"), wxT("mask"), XRC_TYPE_BOOL );
		return filter.GetXfbObject();
	}
};

class BitmapItemComponent : public ComponentBase
{
	ticpp::Element* ExportToXrc( IObject *obj )
	{
		ObjectToXrcFilter xrc( obj, wxT("bitmap"), obj->GetPropertyAsString( wxT("name") ), wxEmptyString, true );

		ticpp::Element* bmpItem  = xrc.GetXrcObject();
		wxString        bmpProp  = obj->GetPropertyAsString( wxT("bitmap") );
		wxString        filename = bmpProp.BeforeFirst( wxT(';') );

		if ( !bmpProp.empty() && ! filename.empty() && !( bmpProp.size() < ( filename.size() + 2 ) ) )
		{
			wxString source = bmpProp.substr( filename.size() + 2 );
			if ( source.StartsWith( _("Load From File") ) || source.StartsWith(_("Load From Embedded File" ) ) )
			{
				bmpItem->SetText( filename.mb_str( wxConvUTF8 ) );
			}
			else if( source.Contains(_("Load From Art Provider") ) )
			{
				bmpItem->SetAttribute( "stock_id", filename.mb_str( wxConvUTF8 ) );
			}
		}
		return bmpItem;
	}

	ticpp::Element* ImportFromXrc( ticpp::Element* xrcObj )
	{
		XrcToXfbFilter filter( xrcObj, wxT("bitmap"), true );
		return filter.GetXfbObject();
	}
};

///////////////////////////////////////////////////////////////////////////////

BEGIN_LIBRARY()

// forms aren't considered as windows !
ABSTRACT_COMPONENT("Frame",FrameFormComponent)
ABSTRACT_COMPONENT("Panel",PanelFormComponent)
ABSTRACT_COMPONENT("Dialog",DialogFormComponent)
ABSTRACT_COMPONENT("MenuBar",MenuBarFormComponent)
WINDOW_COMPONENT("ToolBar",ToolBarFormComponent)

WINDOW_COMPONENT("wxButton",ButtonComponent)
WINDOW_COMPONENT("wxBitmapButton",BitmapButtonComponent)
WINDOW_COMPONENT("wxTextCtrl",TextCtrlComponent)
WINDOW_COMPONENT("wxStaticText",StaticTextComponent)
WINDOW_COMPONENT("wxComboBox", ComboBoxComponent)
WINDOW_COMPONENT("wxBitmapComboBox", BitmapComboBoxComponent)
WINDOW_COMPONENT("wxListBox", ListBoxComponent)
WINDOW_COMPONENT("wxRadioBox", RadioBoxComponent)
WINDOW_COMPONENT("wxRadioButton",RadioButtonComponent)
WINDOW_COMPONENT("wxCheckBox", CheckBoxComponent)
WINDOW_COMPONENT("wxStaticBitmap", StaticBitmapComponent)
WINDOW_COMPONENT("wxStaticLine", StaticLineComponent)
WINDOW_COMPONENT("wxMenuBar", MenuBarComponent)
ABSTRACT_COMPONENT("wxMenu", MenuComponent)
ABSTRACT_COMPONENT("submenu", SubMenuComponent)
ABSTRACT_COMPONENT("wxMenuItem", MenuItemComponent)
ABSTRACT_COMPONENT("separator", SeparatorComponent)
WINDOW_COMPONENT("wxListCtrl", ListCtrlComponent)
ABSTRACT_COMPONENT("listcol", ListColComponent)
ABSTRACT_COMPONENT("listitem", ListItemComponent)
WINDOW_COMPONENT("wxStatusBar", StatusBarComponent)
WINDOW_COMPONENT("wxToolBar", ToolBarComponent)
WINDOW_COMPONENT("wxAuiToolBar", AuiToolBarComponent)
ABSTRACT_COMPONENT("tool", ToolComponent)
ABSTRACT_COMPONENT("toolSeparator", ToolSeparatorComponent)
WINDOW_COMPONENT("wxChoice", ChoiceComponent)
WINDOW_COMPONENT("wxSlider", SliderComponent)
WINDOW_COMPONENT("wxGauge", GaugeComponent)
WINDOW_COMPONENT("wxAnimationCtrl",AnimCtrlComponent)
ABSTRACT_COMPONENT("wxImageList", ImageListComponent)
ABSTRACT_COMPONENT("bitmapitem", BitmapItemComponent)

// wxWindow style macros
MACRO(wxSIMPLE_BORDER)
MACRO(wxDOUBLE_BORDER)
MACRO(wxSUNKEN_BORDER)
MACRO(wxRAISED_BORDER)
MACRO(wxSTATIC_BORDER)
MACRO(wxNO_BORDER)
MACRO(wxTRANSPARENT_WINDOW)
MACRO(wxTAB_TRAVERSAL)
MACRO(wxWANTS_CHARS)
MACRO(wxVSCROLL)
MACRO(wxHSCROLL)
MACRO(wxALWAYS_SHOW_SB)
MACRO(wxCLIP_CHILDREN)
MACRO(wxFULL_REPAINT_ON_RESIZE)
MACRO(wxWS_EX_VALIDATE_RECURSIVELY)
MACRO(wxWS_EX_BLOCK_EVENTS)
MACRO(wxWS_EX_TRANSIENT)
MACRO(wxWS_EX_PROCESS_IDLE)
MACRO(wxWS_EX_PROCESS_UI_UPDATES)

// wxFrame style macros
MACRO(wxDEFAULT_FRAME_STYLE)
MACRO(wxICONIZE)
MACRO(wxCAPTION)
MACRO(wxMINIMIZE)
MACRO(wxMINIMIZE_BOX)
MACRO(wxMAXIMIZE)
MACRO(wxMAXIMIZE_BOX)
MACRO(wxCLOSE_BOX)
MACRO(wxSTAY_ON_TOP)
MACRO(wxSYSTEM_MENU)
MACRO(wxRESIZE_BORDER)
MACRO(wxFRAME_TOOL_WINDOW)
MACRO(wxFRAME_NO_TASKBAR)
MACRO(wxFRAME_FLOAT_ON_PARENT)
MACRO(wxFRAME_SHAPED)
MACRO(wxFRAME_EX_CONTEXTHELP)
MACRO(wxFRAME_EX_METAL)

// wxDialog style macros
MACRO(wxCAPTION)
MACRO(wxDEFAULT_DIALOG_STYLE)
MACRO(wxRESIZE_BORDER)
MACRO(wxSYSTEM_MENU)
MACRO(wxCLOSE_BOX)
MACRO(wxMAXIMIZE_BOX)
MACRO(wxMINIMIZE_BOX)
MACRO(wxSTAY_ON_TOP)
MACRO(wxDIALOG_NO_PARENT)

// wxButton
MACRO(wxBU_LEFT)
MACRO(wxBU_TOP)
MACRO(wxBU_RIGHT)
MACRO(wxBU_BOTTOM)
MACRO(wxBU_EXACTFIT)
MACRO(wxBU_AUTODRAW)

// wxStaticText
MACRO(wxALIGN_LEFT)
MACRO(wxALIGN_CENTRE)
MACRO(wxALIGN_RIGHT)
MACRO(wxST_NO_AUTORESIZE)

// wxTextCtrl
MACRO(wxTE_MULTILINE)
MACRO(wxTE_READONLY)
MACRO(wxTE_RICH)
MACRO(wxTE_AUTO_URL)
MACRO(wxTE_CAPITALIZE)
MACRO(wxTE_CENTRE)
MACRO(wxTE_CHARWRAP)
MACRO(wxTE_DONTWRAP)
MACRO(wxTE_LEFT)
MACRO(wxTE_NOHIDESEL)
MACRO(wxTE_PASSWORD)
MACRO(wxTE_PROCESS_ENTER)
MACRO(wxTE_PROCESS_TAB)
MACRO(wxTE_RICH2)
MACRO(wxTE_RIGHT)
MACRO(wxTE_WORDWRAP)

// wxStaticLine
MACRO(wxLI_HORIZONTAL)
MACRO(wxLI_VERTICAL)

// wxListCtrl
MACRO(wxLC_LIST)
MACRO(wxLC_REPORT)
MACRO(wxLC_VIRTUAL)
MACRO(wxLC_ICON)
MACRO(wxLC_SMALL_ICON)
MACRO(wxLC_ALIGN_TOP)
MACRO(wxLC_ALIGN_LEFT)
MACRO(wxLC_AUTOARRANGE)
MACRO(wxLC_EDIT_LABELS)
MACRO(wxLC_NO_SORT_HEADER)
MACRO(wxLC_NO_HEADER)
MACRO(wxLC_SINGLE_SEL)
MACRO(wxLC_SORT_ASCENDING)
MACRO(wxLC_SORT_DESCENDING)
MACRO(wxLC_HRULES)
MACRO(wxLC_VRULES)

// wxListBox
MACRO(wxLB_SINGLE)
MACRO(wxLB_MULTIPLE)
MACRO(wxLB_EXTENDED)
MACRO(wxLB_HSCROLL)
MACRO(wxLB_ALWAYS_SB)
MACRO(wxLB_NEEDED_SB)
MACRO(wxLB_SORT)

// wxRadioBox
MACRO(wxRA_SPECIFY_ROWS)
MACRO(wxRA_SPECIFY_COLS)
MACRO(wxRA_USE_CHECKBOX)

// wxRadioButton
MACRO(wxRB_GROUP)
MACRO(wxRB_SINGLE)
MACRO(wxRB_USE_CHECKBOX)

// wxStatusBar
MACRO(wxST_SIZEGRIP)

// wxMenuBar
MACRO(wxMB_DOCKABLE)

// wxMenuItem & wxTool
MACRO(wxITEM_NORMAL)
MACRO(wxITEM_CHECK)
MACRO(wxITEM_RADIO)

// wxToolBar
MACRO(wxTB_FLAT)
MACRO(wxTB_DOCKABLE)
MACRO(wxTB_HORIZONTAL)
MACRO(wxTB_VERTICAL)
MACRO(wxTB_TEXT)
MACRO(wxTB_NOICONS)
MACRO(wxTB_NODIVIDER)
MACRO(wxTB_NOALIGN)
MACRO(wxTB_HORZ_LAYOUT)
MACRO(wxTB_HORZ_TEXT)

// wxSlider
MACRO(wxSL_AUTOTICKS)
MACRO(wxSL_BOTTOM)
MACRO(wxSL_HORIZONTAL)
MACRO(wxSL_INVERSE)
MACRO(wxSL_LABELS)
MACRO(wxSL_LEFT)
MACRO(wxSL_RIGHT)
MACRO(wxSL_SELRANGE)
MACRO(wxSL_TOP)
MACRO(wxSL_VERTICAL)
MACRO(wxSL_BOTH)

// wxComboBox
MACRO(wxCB_DROPDOWN)
MACRO(wxCB_READONLY)
MACRO(wxCB_SIMPLE)
MACRO(wxCB_SORT)

// wxCheckBox
MACRO(wxCHK_2STATE)
MACRO(wxCHK_3STATE)
MACRO(wxCHK_ALLOW_3RD_STATE_FOR_USER)

// wxGauge
MACRO(wxGA_HORIZONTAL)
MACRO(wxGA_SMOOTH)
MACRO(wxGA_VERTICAL)

//wxDialog
MACRO(wxBOTH)
SYNONYMOUS(1,wxBOTH)

//wxAnimationCtrl
MACRO(wxAC_DEFAULT_STYLE)
MACRO(wxAC_NO_AUTORESIZE)

END_LIBRARY()
