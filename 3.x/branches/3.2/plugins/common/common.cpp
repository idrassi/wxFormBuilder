///////////////////////////////////////////////////////////////////////////////
//
// wxFormBuilder - A Visual Dialog Editor for wxWidgets.
// Copyright (C) 2005 José Antonio Hurtado
//
// This program is free software; you can redistribute it and/or
// modify it under the terms of the GNU General Public License
// as published by the Free Software Foundation; either version 2
// of the License, or (at your option) any later version.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with this program; if not, write to the Free Software
// Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA  02111-1307, USA.
//
// Written by
//   José Antonio Hurtado - joseantonio.hurtado@gmail.com
//   Juan Antonio Ortega  - jortegalalmolda@gmail.com
//
///////////////////////////////////////////////////////////////////////////////

#include <component.h>
#include <plugin.h>
#include <xrcconv.h>
#include <ticpp.h>

#include <wx/statline.h>
#include <wx/listctrl.h>
#include <wx/radiobox.h>
#include <wx/bmpbuttn.h>
#include <wx/animate.h>

///////////////////////////////////////////////////////////////////////////////
// Custom status bar class for windows to prevent the status bar gripper from
// moving the entire wxFB window
#if defined(__WIN32__) && wxUSE_NATIVE_STATUSBAR
class wxIndependentStatusBar : public wxStatusBar
{
public:
	wxIndependentStatusBar( wxWindow *parent, wxWindowID id = wxID_ANY, long style = wxST_SIZEGRIP, const wxString& name = wxStatusBarNameStr )
	:
	wxStatusBar( parent, id, style, name )
	{
	}

	// override this virtual function to prevent the status bar from moving the main frame
	virtual WXLRESULT MSWWindowProc(WXUINT nMsg, WXWPARAM wParam, WXLPARAM lParam)
	{
		return wxStatusBarBase::MSWWindowProc(nMsg, wParam, lParam);
	}
};
#else
typedef wxStatusBar wxIndependentStatusBar;
#endif

class wxLeftDownRedirect : public wxEvtHandler
{
private:
	wxWindow* m_window;
	IManager* m_manager;

	void OnLeftDown( wxMouseEvent& )
	{
		m_manager->SelectObject( m_window );
	}

public:
	wxLeftDownRedirect( wxWindow* win, IManager* manager )
	:
	m_window( win ),
	m_manager( manager )
	{

	}
	DECLARE_EVENT_TABLE()
};

BEGIN_EVENT_TABLE( wxLeftDownRedirect, wxEvtHandler )
	EVT_LEFT_DOWN(wxLeftDownRedirect::OnLeftDown)
END_EVENT_TABLE()

///////////////////////////////////////////////////////////////////////////////
/**
Event handler for events generated by controls in this plugin
*/
class ComponentEvtHandler : public wxEvtHandler
{
private:
	wxWindow* m_window;
	IManager* m_manager;

public:
	ComponentEvtHandler( wxWindow* win, IManager* manager )
	:
	m_window( win ),
	m_manager( manager )
	{
	}

protected:
	void OnText( wxCommandEvent& event );
	void OnChecked( wxCommandEvent& event );
	void OnChoice( wxCommandEvent& event );
	void OnTool( wxCommandEvent& event );

	DECLARE_EVENT_TABLE()
};

BEGIN_EVENT_TABLE( ComponentEvtHandler, wxEvtHandler )
	EVT_TEXT( wxID_ANY, ComponentEvtHandler::OnText )
	EVT_CHECKBOX( wxID_ANY, ComponentEvtHandler::OnChecked )
	EVT_CHOICE( wxID_ANY, ComponentEvtHandler::OnChoice )

	// Tools do not get click events, so this will help select them
	EVT_TOOL( wxID_ANY, ComponentEvtHandler::OnTool )
END_EVENT_TABLE()

///////////////////////////////////////////////////////////////////////////////
// FORMS
///////////////////////////////////////////////////////////////////////////////

// TO-DO: The "Form" type component should be drawn in the designer, so that,
//        for instance, a dark panel could be drawn for a wxFrame (N.B. ??)
class FrameFormComponent : public ComponentBase
{
public:
	wxObject* Create( IObject* /*obj*/, wxObject *parent )
	{
		wxPanel *panel = new wxPanel((wxWindow *)parent, -1);
									panel->SetBackgroundColour(wxColour(50,50,50));
		return panel;
	}

	ticpp::Element* ExportToXrc( IObject *obj )
	{
		ObjectToXrcFilter xrc( obj, "wxFrame", obj->GetPropertyAsString("name") );
		xrc.AddWindowProperties();
		xrc.AddProperty( "title", "title", XRC_TYPE_TEXT );
		if ( !obj->IsNull("center") )
		{
			xrc.AddPropertyValue( "centered", "1" );
		}
		return xrc.GetXrcObject();
	}

	ticpp::Element* ImportFromXrc( ticpp::Element* xrcObj )
	{
		XrcToXfbFilter filter( xrcObj, "Frame" );
		filter.AddWindowProperties();
		filter.AddProperty( "title", "title", XRC_TYPE_TEXT );
		filter.AddProperty( "centered", "center", XRC_TYPE_BITLIST );
		return filter.GetXfbObject();
	}
};

class PanelFormComponent : public ComponentBase
{
public:
	wxObject* Create( IObject* /*obj*/, wxObject *parent )
	{
		wxPanel *panel = new wxPanel( (wxWindow *)parent, -1 );
		return panel;
	}

	ticpp::Element* ExportToXrc( IObject *obj )
	{
		ObjectToXrcFilter xrc( obj, "wxPanel", obj->GetPropertyAsString("name") );
		xrc.AddWindowProperties();
		return xrc.GetXrcObject();
	}

	ticpp::Element* ImportFromXrc( ticpp::Element* xrcObj )
	{
		XrcToXfbFilter filter( xrcObj, "Panel" );
		filter.AddWindowProperties();
		return filter.GetXfbObject();
	}
};

class DialogFormComponent : public ComponentBase
{
public:
	wxObject* Create( IObject* /*obj*/, wxObject *parent )
	{
		wxPanel *panel = new wxPanel( (wxWindow *)parent, -1 );
		return panel;
	}

	ticpp::Element* ExportToXrc( IObject *obj )
	{
		ObjectToXrcFilter xrc( obj, "wxDialog", obj->GetPropertyAsString("name") );
		xrc.AddWindowProperties();
		xrc.AddProperty( "title", "title", XRC_TYPE_TEXT );
		if ( !obj->IsNull("center") )
		{
			xrc.AddPropertyValue( "centered", "1" );
		}
		return xrc.GetXrcObject();
	}

	ticpp::Element* ImportFromXrc( ticpp::Element* xrcObj )
	{
		XrcToXfbFilter filter( xrcObj, "Dialog" );
		filter.AddWindowProperties();
		filter.AddProperty( "title", "title", XRC_TYPE_TEXT );
		filter.AddProperty( "centered", "center", XRC_TYPE_BITLIST );
		return filter.GetXfbObject();
	}
};

class WizardFormComponent : public ComponentBase
{
public:
	wxObject* Create( IObject* /*obj*/, wxObject *parent )
	{
		wxPanel *panel = new wxPanel( (wxWindow *)parent, -1 );
		return panel;
	}

	ticpp::Element* ExportToXrc( IObject *obj )
	{
		ObjectToXrcFilter xrc( obj, "wxWizard", obj->GetPropertyAsString("name") );
		xrc.AddWindowProperties();
		xrc.AddProperty( "title", "title", XRC_TYPE_TEXT );
		if ( !obj->IsNull("center") )
		{
			xrc.AddPropertyValue( "centered", "1" );
		}
    if ( !obj->IsNull("bitmap") )
		{
			xrc.AddProperty( "bitmap", "bitmap", XRC_TYPE_BITMAP );
		}
		return xrc.GetXrcObject();
	}

	ticpp::Element* ImportFromXrc( ticpp::Element* xrcObj )
	{
		XrcToXfbFilter filter( xrcObj, "Wizard" );
		filter.AddWindowProperties();
		filter.AddProperty( "title", "title", XRC_TYPE_TEXT );
		filter.AddProperty( "centered", "center", XRC_TYPE_BITLIST );
		filter.AddProperty( "bitmap", "bitmap", XRC_TYPE_BITMAP );
		return filter.GetXfbObject();
	}
};

class WizardPageComponent : public ComponentBase
{
public:
	wxObject* Create( IObject* /*obj*/, wxObject *parent )
	{
		wxPanel* panel = new wxPanel( (wxWindow *)parent, -1 );
		return panel;
	}

	ticpp::Element* ExportToXrc( IObject *obj )
	{
    ObjectToXrcFilter xrc( obj, "wxWizardPage" );
		xrc.AddProperty( "page_name", "name", XRC_TYPE_TEXT );
    if ( !obj->IsNull("bitmap") )
		{
			xrc.AddProperty( "bitmap", "bitmap", XRC_TYPE_BITMAP );
		}
		return xrc.GetXrcObject();
	}

	ticpp::Element* ImportFromXrc( ticpp::Element* xrcObj )
	{
    XrcToXfbFilter filter( xrcObj, "wizardpage" );
		filter.AddWindowProperties();
		filter.AddProperty( "name", "page_name", XRC_TYPE_TEXT );
		filter.AddProperty( "bitmap", "bitmap", XRC_TYPE_BITMAP );
		return filter.GetXfbObject();
	}
};

class MenuBarFormComponent : public ComponentBase
{
public:

	wxObject* Create( IObject *obj, wxObject* /*parent*/ )
	{
		wxMenuBar *mb = new wxMenuBar(	obj->GetPropertyAsInteger("style") |
										obj->GetPropertyAsInteger("window_style") );
		return mb;
	}

	ticpp::Element* ExportToXrc( IObject *obj )
	{
		ObjectToXrcFilter xrc( obj, "wxMenuBar", obj->GetPropertyAsString("name") );
		xrc.AddProperty( "label", "label",XRC_TYPE_TEXT );
		return xrc.GetXrcObject();
	}

	ticpp::Element* ImportFromXrc( ticpp::Element* xrcObj )
	{
		XrcToXfbFilter filter( xrcObj, "MenuBar" );
		filter.AddProperty( "label", "label", XRC_TYPE_TEXT );
		return filter.GetXfbObject();
	}
};

class ToolBarFormComponent : public ComponentBase
{
public:
	wxObject* Create( IObject *obj, wxObject *parent )
	{
		wxToolBar *tb = new wxToolBar( (wxWindow*)parent, -1,
										obj->GetPropertyAsPoint("pos"),
										obj->GetPropertyAsSize("size"),
										obj->GetPropertyAsInteger("style") |
										obj->GetPropertyAsInteger("window_style") |
										wxTB_NOALIGN | wxTB_NODIVIDER | wxNO_BORDER );
		if ( !obj->IsNull("bitmapsize") )
		{
			tb->SetToolBitmapSize( obj->GetPropertyAsSize("bitmapsize") );
		}
		if ( !obj->IsNull("margins") )
		{
			wxSize margins( obj->GetPropertyAsSize("margins") );
			tb->SetMargins( margins.GetWidth(), margins.GetHeight() );
		}
		if ( !obj->IsNull("packing") )
		{
			tb->SetToolPacking( obj->GetPropertyAsInteger("packing") );
		}
		if ( !obj->IsNull("separation") )
		{
			tb->SetToolSeparation(obj->GetPropertyAsInteger("separation") );
		}
		tb->PushEventHandler( new ComponentEvtHandler( tb, GetManager() ) );
		return tb;
	}

	void OnCreated( wxObject* wxobject, wxWindow* /*wxparent*/ )
	{
		wxToolBar* tb = wxDynamicCast( wxobject, wxToolBar );
		if ( NULL == tb )
		{
			// very very strange
			return;
		}
		size_t count = GetManager()->GetChildCount( wxobject );
		for ( size_t i = 0; i < count; ++i )
		{
			wxObject* child = GetManager()->GetChild( wxobject, i );
			IObject* childObj = GetManager()->GetIObject( child );
			if ( "tool" == childObj->GetClassName() )
			{
				tb->AddTool(wxID_ANY,
							childObj->GetPropertyAsString("label"),
							childObj->GetPropertyAsBitmap("bitmap"),
							wxNullBitmap,
							(wxItemKind)childObj->GetPropertyAsInteger("kind"),
							childObj->GetPropertyAsString("help"),
							wxEmptyString,
							child );
			}
			else if ( "toolSeparator" == childObj->GetClassName() )
			{
				tb->AddSeparator();
			}
			else
			{
				wxControl* control = wxDynamicCast( child, wxControl );
				if ( NULL != control )
				{
					tb->AddControl( control );
				}
			}
		}
		tb->Realize();
	}

	ticpp::Element* ExportToXrc( IObject *obj )
	{
		ObjectToXrcFilter xrc( obj, "wxToolBar", obj->GetPropertyAsString("name") );
		xrc.AddWindowProperties();
		xrc.AddProperty( "bitmapsize", "bitmapsize", XRC_TYPE_SIZE );
		xrc.AddProperty( "margins", "margins", XRC_TYPE_SIZE );
		xrc.AddProperty( "packing", "packing", XRC_TYPE_INTEGER );
		xrc.AddProperty( "separation", "separation", XRC_TYPE_INTEGER );
		return xrc.GetXrcObject();
	}

	ticpp::Element* ImportFromXrc( ticpp::Element* xrcObj )
	{
		XrcToXfbFilter filter( xrcObj, "ToolBar" );
		filter.AddWindowProperties();
		filter.AddProperty( "bitmapsize", "bitmapsize", XRC_TYPE_SIZE );
		filter.AddProperty( "margins", "margins", XRC_TYPE_SIZE );
		filter.AddProperty( "packing", "packing", XRC_TYPE_INTEGER );
		filter.AddProperty( "separation", "separation", XRC_TYPE_INTEGER );
		return filter.GetXfbObject();
	}
};

///////////////////////////////////////////////////////////////////////////////
// WIDGETS
///////////////////////////////////////////////////////////////////////////////

class ButtonComponent : public ComponentBase
{
public:
	wxObject* Create( IObject *obj, wxObject *parent )
	{
		wxButton* button = new wxButton((wxWindow*)parent, -1,
										obj->GetPropertyAsString("label"),
										obj->GetPropertyAsPoint("pos"),
										obj->GetPropertyAsSize("size"),
										obj->GetPropertyAsInteger("style") |
										obj->GetPropertyAsInteger("window_style") );

		if ( obj->GetPropertyAsInteger("default") != 0 )
		{
			button->SetDefault();
		}
		return button;
	}

	ticpp::Element* ExportToXrc( IObject *obj )
	{
		ObjectToXrcFilter xrc( obj, "wxButton", obj->GetPropertyAsString("name") );
		xrc.AddWindowProperties();
		xrc.AddProperty( "label", "label", XRC_TYPE_TEXT );
		xrc.AddProperty( "default", "default", XRC_TYPE_BOOL );
		return xrc.GetXrcObject();
	}

	ticpp::Element* ImportFromXrc( ticpp::Element* xrcObj )
	{
		XrcToXfbFilter filter( xrcObj, "wxButton" );
		filter.AddWindowProperties();
		filter.AddProperty( "label", "label", XRC_TYPE_TEXT );
		filter.AddProperty( "default", "default", XRC_TYPE_BOOL );
		return filter.GetXfbObject();
	}
};

class BitmapButtonComponent : public ComponentBase
{
public:
	wxObject* Create( IObject *obj, wxObject *parent )
	{
		wxBitmapButton* button = new wxBitmapButton((wxWindow*)parent, -1,
													obj->GetPropertyAsBitmap("bitmap"),
													obj->GetPropertyAsPoint("pos"),
													obj->GetPropertyAsSize("size"),
													obj->GetPropertyAsInteger("style") |
													obj->GetPropertyAsInteger("window_style") );
		if ( obj->GetPropertyAsInteger("default") != 0 )
		{
			button->SetDefault();
		}
		if ( !obj->IsNull("disabled") )
		{
			button->SetBitmapDisabled( obj->GetPropertyAsBitmap("disabled") );
		}
		if ( !obj->IsNull("selected") )
		{
			button->SetBitmapSelected( obj->GetPropertyAsBitmap("selected") );
		}
		if ( !obj->IsNull("focus") )
		{
			button->SetBitmapFocus( obj->GetPropertyAsBitmap("focus") );
		}
		if ( !obj->IsNull("hover") )
		{
			button->SetBitmapHover( obj->GetPropertyAsBitmap("hover") );
		}
		return button;
	}

	ticpp::Element* ExportToXrc( IObject *obj )
	{
		ObjectToXrcFilter xrc( obj, "wxBitmapButton", obj->GetPropertyAsString("name") );
		xrc.AddWindowProperties();
		xrc.AddProperty("bitmap","bitmap", XRC_TYPE_BITMAP );
		if ( !obj->IsNull("disabled") )
		{
			xrc.AddProperty( "disabled", "disabled", XRC_TYPE_BITMAP );
		}
		if ( !obj->IsNull("selected") )
		{
			xrc.AddProperty( "selected", "selected", XRC_TYPE_BITMAP );
		}
		if ( !obj->IsNull("focus") )
		{
			xrc.AddProperty( "focus", "focus", XRC_TYPE_BITMAP );
		}
		if ( !obj->IsNull("hover") )
		{
			xrc.AddProperty( "hover", "hover", XRC_TYPE_BITMAP );
		}
		xrc.AddProperty( "default", "default", XRC_TYPE_BOOL );
		return xrc.GetXrcObject();
	}

	ticpp::Element* ImportFromXrc( ticpp::Element* xrcObj )
	{
		XrcToXfbFilter filter( xrcObj, "wxBitmapButton" );
		filter.AddWindowProperties();
		filter.AddProperty( "bitmap", "bitmap", XRC_TYPE_BITMAP );
		filter.AddProperty( "disabled", "disabled", XRC_TYPE_BITMAP );
		filter.AddProperty( "selected", "selected", XRC_TYPE_BITMAP );
		filter.AddProperty( "focus", "focus", XRC_TYPE_BITMAP );
		filter.AddProperty( "hover", "hover", XRC_TYPE_BITMAP );
		filter.AddProperty( "default", "default", XRC_TYPE_BOOL );
		return filter.GetXfbObject();
	}
};

class TextCtrlComponent : public ComponentBase
{
public:
	wxObject* Create( IObject *obj, wxObject *parent )
	{
		wxTextCtrl* tc = new wxTextCtrl((wxWindow *)parent, -1,
										obj->GetPropertyAsString("value"),
										obj->GetPropertyAsPoint("pos"),
										obj->GetPropertyAsSize("size"),
										obj->GetPropertyAsInteger("style") |
										obj->GetPropertyAsInteger("window_style") );
		if ( !obj->IsNull("maxlength") )
		{
			tc->SetMaxLength( obj->GetPropertyAsInteger("maxlength") );
		}
		tc->PushEventHandler( new ComponentEvtHandler( tc, GetManager() ) );
		return tc;
	}

	ticpp::Element* ExportToXrc( IObject *obj )
	{
		ObjectToXrcFilter xrc( obj, "wxTextCtrl", obj->GetPropertyAsString("name") );
		xrc.AddWindowProperties();
		xrc.AddProperty( "value", "value", XRC_TYPE_TEXT );
        if ( !obj->IsNull("maxlength") )
		{
            xrc.AddProperty( "maxlength", "maxlength", XRC_TYPE_INTEGER );
		}
		return xrc.GetXrcObject();
	}

	ticpp::Element* ImportFromXrc( ticpp::Element* xrcObj )
	{
		XrcToXfbFilter filter( xrcObj, "wxTextCtrl" );
		filter.AddWindowProperties();
		filter.AddProperty( "value", "value", XRC_TYPE_TEXT );
        filter.AddProperty( "maxlength", "maxlength", XRC_TYPE_INTEGER );
		return filter.GetXfbObject();
	}
};

void ComponentEvtHandler::OnText( wxCommandEvent& )
{
	wxTextCtrl* tc = wxDynamicCast( m_window, wxTextCtrl );
	if ( tc != NULL )
	{
		m_manager->ModifyProperty( m_window, "value", tc->GetValue() );
		tc->SetInsertionPointEnd();
		tc->SetFocus();
	}
}

class StaticTextComponent : public ComponentBase
{
public:
	wxObject* Create( IObject *obj, wxObject *parent )
	{
		wxStaticText* st = new wxStaticText((wxWindow *)parent, -1,
											obj->GetPropertyAsString("label"),
											obj->GetPropertyAsPoint("pos"),
											obj->GetPropertyAsSize("size"),
											obj->GetPropertyAsInteger("style") |
											obj->GetPropertyAsInteger("window_style") );
		st->Wrap( obj->GetPropertyAsInteger("wrap") );
		return st;
	}

	ticpp::Element* ExportToXrc( IObject *obj )
	{
		wxString name = obj->GetPropertyAsString("name");
		ObjectToXrcFilter xrc( obj, "wxStaticText", name );
		xrc.AddWindowProperties();
		xrc.AddProperty( "label", "label", XRC_TYPE_TEXT );
		return xrc.GetXrcObject();
	}

	ticpp::Element* ImportFromXrc( ticpp::Element* xrcObj )
	{
		XrcToXfbFilter filter( xrcObj, "wxStaticText" );
		filter.AddWindowProperties();
		filter.AddProperty( "label", "label", XRC_TYPE_TEXT );
		return filter.GetXfbObject();
	}
};

class ComboBoxComponent : public ComponentBase
{
public:
	wxObject* Create( IObject *obj, wxObject *parent )
	{
		wxComboBox *combo = new wxComboBox((wxWindow *)parent, -1,
											obj->GetPropertyAsString("value"),
											obj->GetPropertyAsPoint("pos"),
											obj->GetPropertyAsSize("size"),
											0, NULL,
											obj->GetPropertyAsInteger("style") |
											obj->GetPropertyAsInteger("window_style") );
		// Choices
		wxArrayString choices = obj->GetPropertyAsArrayString("choices");
		for ( unsigned int i=0; i<choices.Count(); i++ )
		{
			combo->Append( choices[i] );
		}
		return combo;
	}

	ticpp::Element* ExportToXrc( IObject *obj )
	{
		ObjectToXrcFilter xrc( obj, "wxComboBox", obj->GetPropertyAsString("name") );
		xrc.AddWindowProperties();
		xrc.AddProperty( "value", "value", XRC_TYPE_TEXT );
		xrc.AddProperty( "choices", "content", XRC_TYPE_STRINGLIST );
		return xrc.GetXrcObject();
	}

	ticpp::Element* ImportFromXrc( ticpp::Element* xrcObj )
	{
		XrcToXfbFilter filter( xrcObj, "wxComboBox" );
		filter.AddWindowProperties();
		filter.AddProperty( "value", "value", XRC_TYPE_TEXT );
		filter.AddProperty( "content", "choices", XRC_TYPE_STRINGLIST );
		return filter.GetXfbObject();
	}
};

class CheckBoxComponent : public ComponentBase
{
public:
	wxObject* Create( IObject *obj, wxObject *parent )
	{
		wxCheckBox *res = new wxCheckBox((wxWindow *)parent, -1,
										obj->GetPropertyAsString("label"),
										obj->GetPropertyAsPoint("pos"),
										obj->GetPropertyAsSize("size"),
										obj->GetPropertyAsInteger("window_style") |
										obj->GetPropertyAsInteger("style") );

        res->SetValue( obj->GetPropertyAsInteger("checked") != 0 );
        res->PushEventHandler( new ComponentEvtHandler( res, GetManager() ) );
        return res;
	}

	ticpp::Element* ExportToXrc( IObject *obj )
	{
		ObjectToXrcFilter xrc( obj, "wxCheckBox", obj->GetPropertyAsString("name") );
		xrc.AddWindowProperties();
		xrc.AddProperty( "label", "label", XRC_TYPE_TEXT );
		xrc.AddProperty( "checked", "checked", XRC_TYPE_BOOL );
		return xrc.GetXrcObject();
	}

	ticpp::Element* ImportFromXrc( ticpp::Element* xrcObj )
	{
		XrcToXfbFilter filter( xrcObj, "wxCheckBox" );
		filter.AddWindowProperties();
		filter.AddProperty( "label", "label", XRC_TYPE_TEXT );
		filter.AddProperty( "checked", "checked", XRC_TYPE_BOOL );
		return filter.GetXfbObject();
	}
};

void ComponentEvtHandler::OnChecked( wxCommandEvent& )
{
	wxCheckBox* cb = wxDynamicCast( m_window, wxCheckBox );
	if ( cb != NULL )
	{
		wxString cbValue;
		cbValue.Printf( "%i", cb->GetValue() );
		m_manager->ModifyProperty( m_window, "checked", cbValue );
		cb->SetFocus();
	}
}

class StaticBitmapComponent : public ComponentBase
{
public:
	wxObject* Create( IObject *obj, wxObject *parent )
	{
		return new wxStaticBitmap( (wxWindow *)parent, -1,
									obj->GetPropertyAsBitmap("bitmap"),
									obj->GetPropertyAsPoint("pos"),
									obj->GetPropertyAsSize("size"),
									obj->GetPropertyAsInteger("window_style") );
	}

	ticpp::Element* ExportToXrc( IObject *obj )
	{
		ObjectToXrcFilter xrc( obj,  "wxStaticBitmap", obj->GetPropertyAsString("name") );
		xrc.AddWindowProperties();
		xrc.AddProperty( "bitmap", "bitmap", XRC_TYPE_BITMAP );
		return xrc.GetXrcObject();
	}

	ticpp::Element* ImportFromXrc( ticpp::Element* xrcObj )
	{
		XrcToXfbFilter filter( xrcObj, "wxStaticBitmap" );
		filter.AddWindowProperties();
		filter.AddProperty( "bitmap", "bitmap", XRC_TYPE_BITMAP );
		return filter.GetXfbObject();
	}
};

class XpmStaticBitmapComponent : public StaticBitmapComponent
{
};

class StaticLineComponent : public ComponentBase
{
public:
	wxObject* Create( IObject *obj, wxObject *parent )
	{
		return new wxStaticLine((wxWindow *)parent, -1,
								obj->GetPropertyAsPoint("pos"),
								obj->GetPropertyAsSize("size"),
								obj->GetPropertyAsInteger("style") |
								obj->GetPropertyAsInteger("window_style") );
	}

	ticpp::Element* ExportToXrc( IObject *obj )
	{
		ObjectToXrcFilter xrc( obj, "wxStaticLine", obj->GetPropertyAsString("name") );
		xrc.AddWindowProperties();
		return xrc.GetXrcObject();
	}

	ticpp::Element* ImportFromXrc( ticpp::Element* xrcObj )
	{
		XrcToXfbFilter filter( xrcObj, "wxStaticLine" );
		filter.AddWindowProperties();
		return filter.GetXfbObject();
	}
};

class ListCtrlComponent : public ComponentBase
{
public:
	wxObject* Create( IObject *obj, wxObject *parent )
	{
		wxListCtrl *lc = new wxListCtrl((wxWindow*)parent, -1,
										obj->GetPropertyAsPoint("pos"),
										obj->GetPropertyAsSize("size"),
										( 	obj->GetPropertyAsInteger("style") |
											obj->GetPropertyAsInteger("window_style") ) & ~wxLC_VIRTUAL );
		// Refilling
		int i,j;
		wxString buf;
		if ( (lc->GetWindowStyle() & wxLC_REPORT) != 0 )
		{
			for ( i=0; i<4; i++ )
			{
				buf.Printf( "Label %d", i );
				lc->InsertColumn( i, buf, wxLIST_FORMAT_LEFT, 80 );
			}
		}
		for ( j=0; j<10; j++ )
		{
			long temp;
			buf.Printf(_( "Cell (0,%d)"), j );
			temp = lc->InsertItem( j, buf );
			if ( (lc->GetWindowStyle() & wxLC_REPORT) != 0 )
			{
				for ( i=1; i<4; i++)
				{
					buf.Printf(_( "Cell (%d,%d)"), i, j );
					lc->SetItem( temp, i, buf );
				}
			}
		}
		return lc;
	}

	ticpp::Element* ExportToXrc( IObject *obj )
	{
		ObjectToXrcFilter xrc( obj, "wxListCtrl", obj->GetPropertyAsString("name") );
		xrc.AddWindowProperties();
		return xrc.GetXrcObject();
	}

	ticpp::Element* ImportFromXrc( ticpp::Element* xrcObj )
	{
		XrcToXfbFilter filter( xrcObj, "wxListCtrl" );
		filter.AddWindowProperties();
		return filter.GetXfbObject();
	}
};

class ListBoxComponent : public ComponentBase
{
public:
	wxObject* Create( IObject *obj, wxObject *parent )
	{
		wxListBox *listbox = new wxListBox((wxWindow*)parent, -1,
											obj->GetPropertyAsPoint("pos"),
											obj->GetPropertyAsSize("size"),
											0, NULL,
											obj->GetPropertyAsInteger("style") |
											obj->GetPropertyAsInteger("window_style") );
		// Choices
		wxArrayString choices = obj->GetPropertyAsArrayString("choices");
		for ( unsigned int i=0; i<choices.Count(); i++ )
		{
			listbox->Append(choices[i]);
		}
		return listbox;
	}

	ticpp::Element* ExportToXrc( IObject *obj )
	{
		ObjectToXrcFilter xrc( obj, "wxListBox", obj->GetPropertyAsString("name") );
		xrc.AddWindowProperties();
		xrc.AddProperty( "choices", "content", XRC_TYPE_STRINGLIST );
		return xrc.GetXrcObject();
	}

	ticpp::Element* ImportFromXrc( ticpp::Element* xrcObj )
	{
		XrcToXfbFilter filter( xrcObj, "wxListBox" );
		filter.AddWindowProperties();
		filter.AddProperty( "content", "choices", XRC_TYPE_STRINGLIST );
		return filter.GetXfbObject();
	}
};

class RadioBoxComponent : public ComponentBase, public wxEvtHandler
{
public:
	wxObject* Create( IObject *obj, wxObject *parent )
	{
		wxArrayString choices = obj->GetPropertyAsArrayString("choices");
		int count = choices.Count();
		if ( 0 == count )
		{
		    choices.Add( _("wxRadioBox must have at least one choice") );
		    count = 1;
		}
		int majorDim = obj->GetPropertyAsInteger("majorDimension");
		if (majorDim < 1)
		{
			wxLogWarning(_("majorDimension must be greater than zero."));
			majorDim = 1;
		}

		wxRadioBox *radiobox = new wxRadioBox( (wxWindow*)parent, -1,
												obj->GetPropertyAsString("label"),
												obj->GetPropertyAsPoint("pos"),
												obj->GetPropertyAsSize("size"),
												choices, majorDim,
												obj->GetPropertyAsInteger("style") |
												obj->GetPropertyAsInteger("window_style") );

		int selection = obj->GetPropertyAsInteger("selection");
		if ( selection < count )
		{
			radiobox->SetSelection( selection );
		}
		radiobox->Connect( 	wxEVT_COMMAND_RADIOBOX_SELECTED,
							wxCommandEventHandler( RadioBoxComponent::OnRadioBox ), NULL, this );
		return radiobox;
	}

	void OnRadioBox( wxCommandEvent& event )
	{
		wxRadioBox* window = dynamic_cast< wxRadioBox* >( event.GetEventObject() );
		if ( 0 != window )
		{
			wxString value;
			value.Printf( "%i", window->GetSelection() );
			GetManager()->ModifyProperty( window, "selection", value );
			window->SetFocus();
			GetManager()->SelectObject( window );
		}
	}

	void Cleanup( wxObject* obj )
	{
		wxRadioBox* window = dynamic_cast< wxRadioBox* >( obj );
		if ( 0 != window )
		{
			window->Disconnect( wxEVT_COMMAND_RADIOBOX_SELECTED,
								wxCommandEventHandler( RadioBoxComponent::OnRadioBox ), NULL, this );
		}
		ComponentBase::Cleanup( obj );
	}

	ticpp::Element* ExportToXrc( IObject *obj )
	{
		ObjectToXrcFilter xrc( obj, "wxRadioBox", obj->GetPropertyAsString("name") );
		xrc.AddWindowProperties();
		xrc.AddProperty( "label", "label", XRC_TYPE_TEXT );
		xrc.AddProperty( "selection", "selection", XRC_TYPE_INTEGER );
		xrc.AddProperty( "choices", "content", XRC_TYPE_STRINGLIST );
		xrc.AddProperty( "majorDimension", "dimension", XRC_TYPE_INTEGER );
		return xrc.GetXrcObject();
	}

	ticpp::Element* ImportFromXrc( ticpp::Element* xrcObj )
	{
		XrcToXfbFilter filter( xrcObj, "wxRadioBox" );
		filter.AddWindowProperties();
		filter.AddProperty( "label", "label", XRC_TYPE_TEXT );
		filter.AddProperty( "selection", "selection", XRC_TYPE_INTEGER );
		filter.AddProperty( "content", "choices", XRC_TYPE_STRINGLIST );
		filter.AddProperty( "dimension", "majorDimension", XRC_TYPE_INTEGER );
		return filter.GetXfbObject();
	}
};

class RadioButtonComponent : public ComponentBase
{
public:
	wxObject* Create( IObject *obj, wxObject *parent )
	{
		wxRadioButton *rb = new wxRadioButton( (wxWindow *)parent, -1,
												obj->GetPropertyAsString("label"),
												obj->GetPropertyAsPoint("pos"),
												obj->GetPropertyAsSize("size"),
												obj->GetPropertyAsInteger("style") |
												obj->GetPropertyAsInteger("window_style") );

		rb->SetValue( ( obj->GetPropertyAsInteger("value") != 0 ) );
		return rb;
	}

	ticpp::Element* ExportToXrc( IObject *obj )
	{
		ObjectToXrcFilter xrc( obj, "wxRadioButton", obj->GetPropertyAsString("name") );
		xrc.AddWindowProperties();
		xrc.AddProperty( "label", "label", XRC_TYPE_TEXT );
		xrc.AddProperty( "value", "value", XRC_TYPE_BOOL );
		return xrc.GetXrcObject();
	}

	ticpp::Element* ImportFromXrc( ticpp::Element* xrcObj )
	{
		XrcToXfbFilter filter( xrcObj, "wxRadioButton" );
		filter.AddWindowProperties();
		filter.AddProperty( "label", "label", XRC_TYPE_TEXT );
		filter.AddProperty( "value", "value", XRC_TYPE_BOOL );
		return filter.GetXfbObject();
	}
};

class StatusBarComponent : public ComponentBase
{
public:
	wxObject* Create( IObject *obj, wxObject *parent )
	{
		wxStatusBar *sb = new wxIndependentStatusBar((wxWindow*)parent, -1,
													obj->GetPropertyAsInteger("style") |
													obj->GetPropertyAsInteger("window_style") );

		sb->SetFieldsCount( obj->GetPropertyAsInteger("fields") );

#ifndef __WXMSW__
		sb->PushEventHandler( new wxLeftDownRedirect( sb, GetManager() ) );
#endif
		return sb;
	}

	ticpp::Element* ExportToXrc( IObject *obj )
	{
		ObjectToXrcFilter xrc( obj, "wxStatusBar", obj->GetPropertyAsString("name") );
		xrc.AddWindowProperties();
		xrc.AddProperty( "fields", "fields",XRC_TYPE_INTEGER );
		return xrc.GetXrcObject();
	}

	ticpp::Element* ImportFromXrc( ticpp::Element* xrcObj )
	{
		XrcToXfbFilter filter( xrcObj, "wxStatusBar" );
		filter.AddWindowProperties();
		filter.AddProperty( "fields", "fields", XRC_TYPE_INTEGER );
		return filter.GetXfbObject();
	}
};

class MenuBarComponent : public ComponentBase
{
public:
	wxObject* Create( IObject *obj, wxObject* /*parent*/ )
	{
		wxMenuBar *mb = new wxMenuBar(	obj->GetPropertyAsInteger("style") |
										obj->GetPropertyAsInteger("window_style") );
		return mb;
	}

	ticpp::Element* ExportToXrc( IObject *obj )
	{
		ObjectToXrcFilter xrc( obj, "wxMenuBar", obj->GetPropertyAsString("name") );
		xrc.AddProperty( "label", "label", XRC_TYPE_TEXT );
		return xrc.GetXrcObject();
	}

	ticpp::Element* ImportFromXrc( ticpp::Element* xrcObj )
	{
		XrcToXfbFilter filter( xrcObj, "wxMenuBar" );
		filter.AddProperty( "label", "label", XRC_TYPE_TEXT );
		return filter.GetXfbObject();
	}
};

class MenuComponent : public ComponentBase
{
public:
	ticpp::Element* ExportToXrc( IObject *obj )
	{
		ObjectToXrcFilter xrc( obj, "wxMenu", obj->GetPropertyAsString("name") );
		xrc.AddProperty( "label", "label", XRC_TYPE_TEXT );
		return xrc.GetXrcObject();
	}

	ticpp::Element* ImportFromXrc( ticpp::Element* xrcObj )
	{
		XrcToXfbFilter filter( xrcObj, "wxMenu" );
		filter.AddProperty( "label", "label", XRC_TYPE_TEXT );
		return filter.GetXfbObject();
	}
};

class SubMenuComponent : public ComponentBase
{
public:
	ticpp::Element* ExportToXrc( IObject *obj )
	{
		ObjectToXrcFilter xrc( obj, "wxMenu", obj->GetPropertyAsString("name") );
		xrc.AddProperty( "label", "label", XRC_TYPE_TEXT );
		return xrc.GetXrcObject();
	}

	ticpp::Element* ImportFromXrc( ticpp::Element* xrcObj )
	{
		XrcToXfbFilter filter( xrcObj, "submenu" );
		filter.AddProperty( "label", "label", XRC_TYPE_TEXT );
		return filter.GetXfbObject();
	}
};

class MenuItemComponent : public ComponentBase
{
public:
	ticpp::Element* ExportToXrc( IObject *obj )
	{
		ObjectToXrcFilter xrc( obj, "wxMenuItem", obj->GetPropertyAsString("name") );
		wxString shortcut = obj->GetPropertyAsString("shortcut");
		wxString label;
		if ( shortcut.IsEmpty() )
		{
			label = obj->GetPropertyAsString("label");
		}
		else
		{
			label = obj->GetPropertyAsString("label") + "\t" + shortcut;
		}
		xrc.AddPropertyValue( "label", label, true );
		xrc.AddProperty( "help", "help", XRC_TYPE_TEXT );

	    if ( !obj->IsNull("bitmap") )
		{
	      xrc.AddProperty( "bitmap", "bitmap", XRC_TYPE_BITMAP );
		}
		int kind = obj->GetPropertyAsInteger("kind");

		if ( obj->GetPropertyAsInteger("checked") && ( kind == wxITEM_RADIO || kind == wxITEM_CHECK ) )
		{
			xrc.AddProperty( "checked", "checked", XRC_TYPE_BOOL );
		}

		if ( obj->GetPropertyAsInteger("enabled") == 0 )
		{
			xrc.AddProperty( "enabled", "enabled", XRC_TYPE_BOOL );
		}
		switch (kind)
		{
			case wxITEM_CHECK: xrc.AddPropertyValue( "checkable", "1" ); break;
			case wxITEM_RADIO: xrc.AddPropertyValue( "radio", "1" ); break;
		}
		return xrc.GetXrcObject();
	}

	ticpp::Element* ImportFromXrc( ticpp::Element* xrcObj )
	{
		XrcToXfbFilter filter( xrcObj, "wxMenuItem");
		try
		{
			ticpp::Element *labelElement = xrcObj->FirstChildElement("label");
			wxString label( labelElement->GetText().c_str(), wxConvUTF8 );
			wxString shortcut;
			int pos = label.Find( "\\t" );
			if ( pos >= 0 )
			{
				shortcut = label.Mid( pos + 2 );
				label = label.Left( pos );
			}
			filter.AddPropertyValue( "label", label, true );
			filter.AddPropertyValue( "shortcut", shortcut );
		}
		catch( ticpp::Exception& )
		{
		}
		filter.AddProperty( "help", "help", XRC_TYPE_TEXT );
		filter.AddProperty( "bitmap", "bitmap", XRC_TYPE_BITMAP );
		return filter.GetXfbObject();
	}
};

class SeparatorComponent : public ComponentBase
{
public:
	ticpp::Element* ExportToXrc( IObject *obj )
	{
		ObjectToXrcFilter xrc( obj, "separator" );
		return xrc.GetXrcObject();
	}

	ticpp::Element* ImportFromXrc( ticpp::Element* xrcObj )
	{
		XrcToXfbFilter filter( xrcObj, "separator" );
		return filter.GetXfbObject();
	}
};

class ToolBarComponent : public ComponentBase
{
public:
	wxObject* Create(IObject *obj, wxObject *parent)
	{
		wxToolBar *tb = new wxToolBar( (wxWindow*)parent, -1,
										obj->GetPropertyAsPoint("pos"),
										obj->GetPropertyAsSize("size"),
										obj->GetPropertyAsInteger("style") |
										obj->GetPropertyAsInteger("window_style") |
										wxTB_NOALIGN | wxTB_NODIVIDER | wxNO_BORDER );
		if ( !obj->IsNull("bitmapsize") )
		{
			tb->SetToolBitmapSize( obj->GetPropertyAsSize("bitmapsize") );
		}
		if ( !obj->IsNull("margins") )
		{
			wxSize margins( obj->GetPropertyAsSize("margins") );
			tb->SetMargins( margins.GetWidth(), margins.GetHeight() );
		}
		if ( !obj->IsNull("packing") )
		{
			tb->SetToolPacking( obj->GetPropertyAsInteger("packing") );
		}
		if ( !obj->IsNull("separation") )
		{
			tb->SetToolSeparation( obj->GetPropertyAsInteger("separation") );
		}
		tb->PushEventHandler( new ComponentEvtHandler( tb, GetManager() ) );
		return tb;
	}

	void OnCreated( wxObject* wxobject, wxWindow* /*wxparent*/ )
	{
		wxToolBar* tb = wxDynamicCast( wxobject, wxToolBar );
		if ( NULL == tb )
		{
			// very very strange
			return;
		}

		size_t count = GetManager()->GetChildCount( wxobject );
		for ( size_t i = 0; i < count; ++i )
		{
			wxObject* child = GetManager()->GetChild( wxobject, i );
			IObject* childObj = GetManager()->GetIObject( child );
			if ("tool" == childObj->GetClassName() )
			{
				tb->AddTool(wxID_ANY,
							childObj->GetPropertyAsString("label"),
							childObj->GetPropertyAsBitmap("bitmap"),
							wxNullBitmap,
							(wxItemKind)childObj->GetPropertyAsInteger("kind"),
							childObj->GetPropertyAsString("help"),
							wxEmptyString, child );
			}
			else if ( "toolSeparator" == childObj->GetClassName() )
			{
				tb->AddSeparator();
			}
			else
			{
				wxControl* control = wxDynamicCast( child, wxControl );
				if ( NULL != control )
				{
					tb->AddControl( control );
				}
			}
		}
		tb->Realize();
	}

	ticpp::Element* ExportToXrc( IObject *obj )
	{
		ObjectToXrcFilter xrc( obj, "wxToolBar", obj->GetPropertyAsString("name") );
		xrc.AddWindowProperties();
		xrc.AddProperty( "bitmapsize", "bitmapsize", XRC_TYPE_SIZE );
		xrc.AddProperty( "margins", "margins", XRC_TYPE_SIZE );
		xrc.AddProperty( "packing", "packing", XRC_TYPE_INTEGER );
		xrc.AddProperty( "separation", "separation", XRC_TYPE_INTEGER );
		return xrc.GetXrcObject();
	}

	ticpp::Element* ImportFromXrc( ticpp::Element* xrcObj )
	{
		XrcToXfbFilter filter( xrcObj, "wxToolBar" );
		filter.AddWindowProperties();
		filter.AddProperty( "bitmapsize", "bitmapsize", XRC_TYPE_SIZE );
		filter.AddProperty( "margins", "margins", XRC_TYPE_SIZE );
		filter.AddProperty( "packing", "packing", XRC_TYPE_INTEGER );
		filter.AddProperty( "separation", "separation", XRC_TYPE_INTEGER );
		return filter.GetXfbObject();
	}
};

void ComponentEvtHandler::OnTool( wxCommandEvent& event )
{
	wxToolBar* tb = wxDynamicCast( event.GetEventObject(), wxToolBar );
	if ( NULL == tb )
	{
		// very very strange
		return;
	}

	wxObject* wxobject = tb->GetToolClientData( event.GetId() );
	if ( NULL != wxobject )
	{
		m_manager->SelectObject( wxobject );
	}
}

class ToolComponent : public ComponentBase
{
public:
	ticpp::Element* ExportToXrc( IObject *obj )
	{
		ObjectToXrcFilter xrc( obj, "tool", obj->GetPropertyAsString("name") );
		xrc.AddProperty( "label", "label", XRC_TYPE_TEXT );
		xrc.AddProperty( "tooltip", "tooltip", XRC_TYPE_TEXT );
		xrc.AddProperty( "statusbar", "longhelp", XRC_TYPE_TEXT );
		xrc.AddProperty( "bitmap", "bitmap", XRC_TYPE_BITMAP );

		wxItemKind kind = (wxItemKind)obj->GetPropertyAsInteger("kind");
		if ( wxITEM_CHECK == kind )
		{
			xrc.AddPropertyValue( "toggle", "1" );
		}
		else if ( wxITEM_RADIO == kind )
		{
			xrc.AddPropertyValue( "radio", "1" );
		}
		return xrc.GetXrcObject();
	}

	ticpp::Element* ImportFromXrc( ticpp::Element* xrcObj )
	{
		XrcToXfbFilter filter( xrcObj, "tool" );
		filter.AddProperty( "longhelp", "statusbar", XRC_TYPE_TEXT );
		filter.AddProperty( "tooltip", "tooltip", XRC_TYPE_TEXT );
		filter.AddProperty( "label", "label", XRC_TYPE_TEXT );
		filter.AddProperty( "bitmap", "bitmap", XRC_TYPE_BITMAP );
		bool gotToggle = false;
		bool gotRadio = false;
		ticpp::Element* toggle = xrcObj->FirstChildElement( "toggle", false );
		if ( toggle )
		{
			toggle->GetTextOrDefault( &gotToggle, false );
			if ( gotToggle )
			{
				filter.AddPropertyValue( "kind", "wxITEM_CHECK" );
			}
		}
		if ( !gotToggle )
		{
			ticpp::Element* radio = xrcObj->FirstChildElement( "radio", false );
			if ( radio )
			{
				radio->GetTextOrDefault( &gotRadio, false );
				if ( gotRadio )
				{
					filter.AddPropertyValue( "kind", "wxITEM_RADIO" );
				}
			}
		}
		if ( !(gotToggle || gotRadio) )
		{
			filter.AddPropertyValue( "kind", "wxITEM_NORMAL" );
		}
		return filter.GetXfbObject();
	}
};

class ToolSeparatorComponent : public ComponentBase
{
public:
	ticpp::Element* ExportToXrc( IObject *obj )
	{
		ObjectToXrcFilter xrc( obj, "separator" );
		return xrc.GetXrcObject();
	}

	ticpp::Element* ImportFromXrc( ticpp::Element* xrcObj )
	{
		XrcToXfbFilter filter( xrcObj, "toolSeparator" );
		return filter.GetXfbObject();
	}
};

class ChoiceComponent : public ComponentBase
{
public:
	wxObject* Create( IObject *obj, wxObject *parent )
	{
		wxArrayString choices = obj->GetPropertyAsArrayString("choices");
		wxString *strings = new wxString[choices.Count()];
		for ( unsigned int i=0; i < choices.Count(); i++ )
		{
			strings[i] = choices[i];
		}
		wxChoice *choice = new wxChoice((wxWindow*)parent, -1,
										obj->GetPropertyAsPoint("pos"),
										obj->GetPropertyAsSize("size"),
										(int)choices.Count(), strings,
										obj->GetPropertyAsInteger("window_style") );

		choice->SetSelection(obj->GetPropertyAsInteger("selection"));
		delete []strings;
		choice->PushEventHandler( new ComponentEvtHandler( choice, GetManager() ) );
		return choice;
	}

	ticpp::Element* ExportToXrc( IObject *obj )
	{
		ObjectToXrcFilter xrc(obj, "wxChoice", obj->GetPropertyAsString("name") );
		xrc.AddWindowProperties();
		xrc.AddProperty( "selection", "selection", XRC_TYPE_INTEGER );
		xrc.AddProperty( "choices", "content", XRC_TYPE_STRINGLIST );
		return xrc.GetXrcObject();
	}

	ticpp::Element* ImportFromXrc( ticpp::Element* xrcObj )
	{
		XrcToXfbFilter filter( xrcObj, "wxChoice" );
		filter.AddWindowProperties();
		filter.AddProperty( "selection", "selection", XRC_TYPE_INTEGER );
		filter.AddProperty( "content", "choices", XRC_TYPE_STRINGLIST );
		return filter.GetXfbObject();
	}
};

void ComponentEvtHandler::OnChoice( wxCommandEvent& )
{
	wxChoice* window = wxDynamicCast( m_window, wxChoice );
	if ( window != NULL )
	{
		wxString value;
		value.Printf( "%i", window->GetSelection() );
		m_manager->ModifyProperty( m_window, "selection", value );
		window->SetFocus();
	}
}

class SliderComponent : public ComponentBase
{
public:
	wxObject* Create( IObject *obj, wxObject *parent )
	{
		return new wxSlider((wxWindow *)parent, -1,
							obj->GetPropertyAsInteger("value"),
							obj->GetPropertyAsInteger("minValue"),
							obj->GetPropertyAsInteger("maxValue"),
							obj->GetPropertyAsPoint("pos"),
							obj->GetPropertyAsSize("size"),
							obj->GetPropertyAsInteger("style") |
							obj->GetPropertyAsInteger("window_style") );
	}

	ticpp::Element* ExportToXrc( IObject *obj )
	{
		ObjectToXrcFilter xrc( obj, "wxSlider", obj->GetPropertyAsString("name") );
		xrc.AddWindowProperties();
		xrc.AddProperty( "value", "value", XRC_TYPE_INTEGER );
		xrc.AddProperty( "minValue", "min", XRC_TYPE_INTEGER );
		xrc.AddProperty( "maxValue", "max", XRC_TYPE_INTEGER );
		return xrc.GetXrcObject();
	}

	ticpp::Element* ImportFromXrc( ticpp::Element* xrcObj )
	{
		XrcToXfbFilter filter( xrcObj, "wxSlider" );
		filter.AddWindowProperties();
		filter.AddProperty( "value", "value", XRC_TYPE_INTEGER );
		filter.AddProperty( "min", "minValue", XRC_TYPE_INTEGER );
		filter.AddProperty( "max", "maxValue", XRC_TYPE_INTEGER );
		return filter.GetXfbObject();
	}
};

class GaugeComponent : public ComponentBase
{
public:
	wxObject* Create(IObject *obj, wxObject *parent)
	{
		wxGauge *gauge = new wxGauge(	(wxWindow *)parent, -1,
										obj->GetPropertyAsInteger("range"),
										obj->GetPropertyAsPoint("pos"),
										obj->GetPropertyAsSize("size"),
										obj->GetPropertyAsInteger("style") |
										obj->GetPropertyAsInteger("window_style") );

		gauge->SetValue(obj->GetPropertyAsInteger("value"));
		return gauge;
	}

	ticpp::Element* ExportToXrc( IObject *obj )
	{
		ObjectToXrcFilter xrc( obj, "wxGauge", obj->GetPropertyAsString("name") );
		xrc.AddWindowProperties();
		xrc.AddProperty( "range", "range", XRC_TYPE_INTEGER );
		xrc.AddProperty("value", "value", XRC_TYPE_INTEGER );
		return xrc.GetXrcObject();
	}

	ticpp::Element* ImportFromXrc( ticpp::Element* xrcObj )
	{
		XrcToXfbFilter filter(xrcObj, "wxGauge" );
		filter.AddWindowProperties();
		filter.AddProperty( "range", "range", XRC_TYPE_INTEGER );
		filter.AddProperty( "value", "value", XRC_TYPE_INTEGER );
		return filter.GetXfbObject();
	}
};

class AnimCtrlComponent : public ComponentBase
{
public:
	wxObject* Create( IObject *obj, wxObject *parent )
	{
		wxAnimationCtrl* ac = new wxAnimationCtrl( (wxWindow *)parent, wxID_ANY, wxNullAnimation,
													obj->GetPropertyAsPoint("pos"),
													obj->GetPropertyAsSize("size"),
													obj->GetPropertyAsInteger("style") |
													obj->GetPropertyAsInteger("window_style") );
		if ( !obj->IsNull("animation") )
		{
			if( ac->LoadFile( obj->GetPropertyAsString("animation") ) )
			{
				if ( !obj->IsNull("play") && ( obj->GetPropertyAsInteger("play") == 1 ) )
				{
					ac->Play();
				}
				else
				{
					ac->Stop();
				}
			}
		}
		if ( !obj->IsNull("inactive_bitmap") )
		{
			wxBitmap bmp = obj->GetPropertyAsBitmap("inactive_bitmap");
			if( bmp.IsOk() )
			{
				ac->SetInactiveBitmap( bmp );
			}
			else
			{
				ac->SetInactiveBitmap( wxNullBitmap );
			}
		}
		ac->PushEventHandler( new ComponentEvtHandler( ac, GetManager() ) );
		return ac;
	}

	ticpp::Element* ExportToXrc( IObject *obj )
	{
		ObjectToXrcFilter xrc( obj, "wxAnimationCtrl", obj->GetPropertyAsString("name") );
		xrc.AddWindowProperties();
		xrc.AddProperty( "animation", "animation", XRC_TYPE_TEXT );
		return xrc.GetXrcObject();
	}

	ticpp::Element* ImportFromXrc( ticpp::Element* xrcObj )
	{
		XrcToXfbFilter filter( xrcObj, "wxAnimation" );
		filter.AddWindowProperties();
		filter.AddProperty( "animation", "animation", XRC_TYPE_TEXT );
		return filter.GetXfbObject();
	}
};

///////////////////////////////////////////////////////////////////////////////

BEGIN_LIBRARY()

// forms aren't considered as windows !
ABSTRACT_COMPONENT( "Frame", FrameFormComponent )
ABSTRACT_COMPONENT( "Panel", PanelFormComponent )
ABSTRACT_COMPONENT( "Dialog", DialogFormComponent )
ABSTRACT_COMPONENT( "MenuBar", MenuBarFormComponent )
ABSTRACT_COMPONENT( "ToolBar", ToolBarFormComponent )
ABSTRACT_COMPONENT( "Wizard", WizardFormComponent ) // MACRO(wxWIZARD_EX_HELPBUTTON)
ABSTRACT_COMPONENT( "wizardpage", WizardPageComponent )
WINDOW_COMPONENT( "wxButton", ButtonComponent )
WINDOW_COMPONENT( "wxBitmapButton", BitmapButtonComponent )
WINDOW_COMPONENT( "wxTextCtrl", TextCtrlComponent )
WINDOW_COMPONENT( "wxStaticText", StaticTextComponent )
WINDOW_COMPONENT( "wxComboBox", ComboBoxComponent )
WINDOW_COMPONENT( "wxListBox", ListBoxComponent )
WINDOW_COMPONENT( "wxRadioBox", RadioBoxComponent )
WINDOW_COMPONENT( "wxRadioButton", RadioButtonComponent )
WINDOW_COMPONENT( "wxCheckBox", CheckBoxComponent )
WINDOW_COMPONENT( "wxStaticBitmap", StaticBitmapComponent )
WINDOW_COMPONENT( "wxStaticLine", StaticLineComponent )
WINDOW_COMPONENT( "wxMenuBar", MenuBarComponent )
ABSTRACT_COMPONENT( "wxMenu", MenuComponent )
ABSTRACT_COMPONENT( "submenu", SubMenuComponent )
ABSTRACT_COMPONENT( "wxMenuItem", MenuItemComponent )
ABSTRACT_COMPONENT( "separator", SeparatorComponent )
WINDOW_COMPONENT( "wxListCtrl", ListCtrlComponent )
WINDOW_COMPONENT( "wxStatusBar", StatusBarComponent )
WINDOW_COMPONENT( "wxToolBar", ToolBarComponent )
ABSTRACT_COMPONENT( "tool", ToolComponent )
ABSTRACT_COMPONENT( "toolSeparator", ToolSeparatorComponent )
WINDOW_COMPONENT( "wxChoice", ChoiceComponent )
WINDOW_COMPONENT( "wxSlider", SliderComponent )
WINDOW_COMPONENT( "wxGauge", GaugeComponent )
WINDOW_COMPONENT( "wxAnimationCtrl", AnimCtrlComponent )

// wxWindow style macros
MACRO(wxSIMPLE_BORDER)
MACRO(wxDOUBLE_BORDER)
MACRO(wxSUNKEN_BORDER)
MACRO(wxRAISED_BORDER)
MACRO(wxSTATIC_BORDER)
MACRO(wxNO_BORDER)
MACRO(wxTRANSPARENT_WINDOW)
MACRO(wxTAB_TRAVERSAL)
MACRO(wxWANTS_CHARS)
MACRO(wxVSCROLL)
MACRO(wxHSCROLL)
MACRO(wxALWAYS_SHOW_SB)
MACRO(wxCLIP_CHILDREN)
MACRO(wxFULL_REPAINT_ON_RESIZE)
MACRO(wxWS_EX_VALIDATE_RECURSIVELY)
MACRO(wxWS_EX_BLOCK_EVENTS)
MACRO(wxWS_EX_TRANSIENT)
MACRO(wxWS_EX_PROCESS_IDLE)
MACRO(wxWS_EX_PROCESS_UI_UPDATES)

// wxFrame style macros
MACRO(wxDEFAULT_FRAME_STYLE)
MACRO(wxICONIZE)
MACRO(wxCAPTION)
MACRO(wxMINIMIZE)
MACRO(wxMINIMIZE_BOX)
MACRO(wxMAXIMIZE)
MACRO(wxMAXIMIZE_BOX)
MACRO(wxCLOSE_BOX)
MACRO(wxSTAY_ON_TOP)
MACRO(wxSYSTEM_MENU)
MACRO(wxRESIZE_BORDER)
MACRO(wxFRAME_TOOL_WINDOW)
MACRO(wxFRAME_NO_TASKBAR)
MACRO(wxFRAME_FLOAT_ON_PARENT)
MACRO(wxFRAME_SHAPED)
MACRO(wxFRAME_EX_CONTEXTHELP)
MACRO(wxFRAME_EX_METAL)

// wxDialog style macros
MACRO(wxCAPTION)
MACRO(wxDEFAULT_DIALOG_STYLE)
MACRO(wxRESIZE_BORDER)
MACRO(wxSYSTEM_MENU)
MACRO(wxCLOSE_BOX)
MACRO(wxMAXIMIZE_BOX)
MACRO(wxMINIMIZE_BOX)
MACRO(wxSTAY_ON_TOP)
MACRO(wxDIALOG_NO_PARENT)

// wxButton
MACRO(wxBU_LEFT)
MACRO(wxBU_TOP)
MACRO(wxBU_RIGHT)
MACRO(wxBU_BOTTOM)
MACRO(wxBU_EXACTFIT)
MACRO(wxBU_AUTODRAW)

// wxStaticText
MACRO(wxALIGN_LEFT)
MACRO(wxALIGN_CENTRE)
MACRO(wxALIGN_RIGHT)
MACRO(wxST_NO_AUTORESIZE)

// wxTextCtrl
MACRO(wxTE_MULTILINE)
MACRO(wxTE_READONLY)
MACRO(wxTE_RICH)
MACRO(wxTE_AUTO_URL)
MACRO(wxTE_CAPITALIZE)
MACRO(wxTE_CENTRE)
MACRO(wxTE_CHARWRAP)
MACRO(wxTE_DONTWRAP)
MACRO(wxTE_LEFT)
MACRO(wxTE_NOHIDESEL)
MACRO(wxTE_PASSWORD)
MACRO(wxTE_PROCESS_ENTER)
MACRO(wxTE_PROCESS_TAB)
MACRO(wxTE_RICH2)
MACRO(wxTE_RIGHT)
MACRO(wxTE_WORDWRAP)

// wxStaticLine
MACRO(wxLI_HORIZONTAL)
MACRO(wxLI_VERTICAL)

// wxListCtrl
MACRO(wxLC_LIST)
MACRO(wxLC_REPORT)
MACRO(wxLC_VIRTUAL)
MACRO(wxLC_ICON)
MACRO(wxLC_SMALL_ICON)
MACRO(wxLC_ALIGN_TOP)
MACRO(wxLC_ALIGN_LEFT)
MACRO(wxLC_AUTOARRANGE)
MACRO(wxLC_EDIT_LABELS)
MACRO(wxLC_NO_SORT_HEADER)
MACRO(wxLC_NO_HEADER)
MACRO(wxLC_SINGLE_SEL)
MACRO(wxLC_SORT_ASCENDING)
MACRO(wxLC_SORT_DESCENDING)
MACRO(wxLC_HRULES)
MACRO(wxLC_VRULES)

// wxListBox
MACRO(wxLB_SINGLE)
MACRO(wxLB_MULTIPLE)
MACRO(wxLB_EXTENDED)
MACRO(wxLB_HSCROLL)
MACRO(wxLB_ALWAYS_SB)
MACRO(wxLB_NEEDED_SB)
MACRO(wxLB_SORT)

// wxRadioBox
MACRO(wxRA_SPECIFY_ROWS)
MACRO(wxRA_SPECIFY_COLS)
MACRO(wxRA_USE_CHECKBOX)

// wxRadioButton
MACRO(wxRB_GROUP)
MACRO(wxRB_SINGLE)
MACRO(wxRB_USE_CHECKBOX)

// wxStatusBar
MACRO(wxST_SIZEGRIP)

// wxMenuBar
MACRO(wxMB_DOCKABLE)

// wxMenuItem
MACRO(wxITEM_NORMAL)
MACRO(wxITEM_CHECK)
MACRO(wxITEM_RADIO)

// wxToolBar
MACRO(wxTB_FLAT)
MACRO(wxTB_DOCKABLE)
MACRO(wxTB_HORIZONTAL)
MACRO(wxTB_VERTICAL)
MACRO(wxTB_TEXT)
MACRO(wxTB_NOICONS)
MACRO(wxTB_NODIVIDER)
MACRO(wxTB_NOALIGN)
MACRO(wxTB_HORZ_LAYOUT)
MACRO(wxTB_HORZ_TEXT)

// wxTool
MACRO(wxITEM_NORMAL)
MACRO(wxITEM_CHECK)
MACRO(wxITEM_RADIO)

// wxSlider
MACRO(wxSL_AUTOTICKS)
MACRO(wxSL_BOTTOM)
MACRO(wxSL_HORIZONTAL)
MACRO(wxSL_INVERSE)
MACRO(wxSL_LABELS)
MACRO(wxSL_LEFT)
MACRO(wxSL_RIGHT)
MACRO(wxSL_SELRANGE)
MACRO(wxSL_TOP)
MACRO(wxSL_VERTICAL)
MACRO(wxSL_BOTH)

// wxComboBox
MACRO(wxCB_DROPDOWN)
MACRO(wxCB_READONLY)
MACRO(wxCB_SIMPLE)
MACRO(wxCB_SORT)

// wxCheckBox
MACRO(wxCHK_2STATE)
MACRO(wxCHK_3STATE)
MACRO(wxCHK_ALLOW_3RD_STATE_FOR_USER)

// wxGauge
MACRO(wxGA_HORIZONTAL)
MACRO(wxGA_SMOOTH)
MACRO(wxGA_VERTICAL)

//wxDialog
MACRO(wxBOTH)
SYNONYMOUS(1,wxBOTH)

//wxAnimationCtrl
MACRO(wxAC_DEFAULT_STYLE)
MACRO(wxAC_NO_AUTORESIZE)

END_LIBRARY()
