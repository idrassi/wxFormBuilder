///////////////////////////////////////////////////////////////////////////////
//
// wxFormBuilder - A Visual Dialog Editor for wxWidgets.
// Copyright (C) 2005 José Antonio Hurtado
//
// This program is free software; you can redistribute it and/or
// modify it under the terms of the GNU General Public License
// as published by the Free Software Foundation; either version 2
// of the License, or (at your option) any later version.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with this program; if not, write to the Free Software
// Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA  02111-1307, USA.
//
// Written by José Antonio Hurtado - joseantonio.hurtado@hispalinux.es
//
///////////////////////////////////////////////////////////////////////////////

// -*- C++ -*- generated by wxGlade 0.3.5.1 on Tue Dec 28 20:50:56 2004
// To-Do reimplementar sin usar wxGlade
#include "guirad.h"

#define wxFIXED_MINSIZE wxADJUST_MINSIZE


ObjectTreeGUI::ObjectTreeGUI(wxWindow* parent, int id, const wxPoint& pos, const wxSize& size, long style):
    wxPanel(parent, id, pos, size, wxTAB_TRAVERSAL)
{
    // begin wxGlade: ObjectTreeGUI::ObjectTreeGUI
//    m_txtSelected = new wxTextCtrl(this, -1, wxT(""));

  
    m_tcObjects = new wxTreeCtrl(this, -1, wxDefaultPosition, wxDefaultSize, wxTR_HAS_BUTTONS|wxTR_LINES_AT_ROOT|wxTR_DEFAULT_STYLE|wxSIMPLE_BORDER);

    set_properties();
    do_layout();
    // end wxGlade
}


void ObjectTreeGUI::set_properties()
{
    // begin wxGlade: ObjectTreeGUI::set_properties
    // end wxGlade
}


void ObjectTreeGUI::do_layout()
{
    // begin wxGlade: ObjectTreeGUI::do_layout
    wxBoxSizer* sizer_1 = new wxBoxSizer(wxVERTICAL);
//    wxBoxSizer* sizer_2 = new wxBoxSizer(wxHORIZONTAL);
//    wxStaticText* label_selected = new wxStaticText(this, -1, wxT("Selected:"));
//    sizer_2->Add(label_selected, 0, wxALIGN_CENTER_VERTICAL|wxFIXED_MINSIZE, 0);
//    sizer_2->Add(m_txtSelected, 1, wxFIXED_MINSIZE, 0);
//    sizer_1->Add(sizer_2, 0, wxEXPAND, 0);
    sizer_1->Add(m_tcObjects, 1, wxEXPAND, 0);
    SetAutoLayout(true);
    SetSizer(sizer_1);
    sizer_1->Fit(this);
    sizer_1->SetSizeHints(this);
    // end wxGlade
}








MyPanel::MyPanel(wxWindow* parent, int id, const wxPoint& pos, const wxSize& size, long style):
    wxPanel(parent, id, pos, size, wxNO_BORDER|wxTAB_TRAVERSAL)
{
// content of this block not found: did you rename this class?
}


void MyPanel::set_properties()
{
// content of this block not found: did you rename this class?
}


void MyPanel::do_layout()
{
// content of this block not found: did you rename this class?
}




ObjectInspectorGUI::ObjectInspectorGUI(wxWindow* parent, int id, const wxPoint& pos, const wxSize& size, long style):
    wxPanel(parent, id, pos, size, wxTAB_TRAVERSAL|wxNO_BORDER	)
{
    // begin wxGlade: ObjectInspectorGUI::ObjectInspectorGUI
    notebook_1 = new wxNotebook(this, -1, wxDefaultPosition, wxDefaultSize, 0);
    notebook_1_pane_1 = new wxScrolledWindow(notebook_1, -1, wxDefaultPosition, wxDefaultSize, wxTAB_TRAVERSAL);
    label_2_copy = new wxStaticText(notebook_1_pane_1, -1, wxT("text"));
    text_ctrl_1_copy = new wxTextCtrl(notebook_1_pane_1, -1, wxT(""));
    label_3_copy = new wxStaticText(notebook_1_pane_1, -1, wxT("option"));
    const wxString combo_box_1_copy_choices[] = {
        
    };
    combo_box_1_copy = new wxComboBox(notebook_1_pane_1, -1, wxT(""), wxDefaultPosition, wxDefaultSize, 0, combo_box_1_copy_choices, wxCB_DROPDOWN);
    label_4_copy = new wxStaticText(notebook_1_pane_1, -1, wxT("bitlist"));
    const wxString list_box_1_copy_choices[] = {
        wxT("wxALL"),
        wxT("wxTOP"),
        wxT("wxBOTTOM"),
        wxT("wxLEFT"),
        wxT("wxPEPE"),
        wxT("wxHOLA")
    };
    list_box_1_copy = new wxListBox(notebook_1_pane_1, -1, wxDefaultPosition, wxDefaultSize, 6, list_box_1_copy_choices, wxLB_MULTIPLE);
    label_5 = new wxStaticText(notebook_1_pane_1, -1, wxT("macro"));
    text_ctrl_2 = new wxTextCtrl(notebook_1_pane_1, -1, wxT(""));
    notebook_1_pane_2 = new wxPanel(notebook_1, -1);

    set_properties();
    do_layout();
    // end wxGlade
}


void ObjectInspectorGUI::set_properties()
{
    // begin wxGlade: ObjectInspectorGUI::set_properties
    combo_box_1_copy->SetSelection(-1);
    list_box_1_copy->SetSelection(0);
    notebook_1_pane_1->SetScrollRate(10, 10);
    // end wxGlade
}


void ObjectInspectorGUI::do_layout()
{
    // begin wxGlade: ObjectInspectorGUI::do_layout
    wxBoxSizer* sizer_5 = new wxBoxSizer(wxVERTICAL);
    wxFlexGridSizer* grid_sizer_1 = new wxFlexGridSizer(3, 2, 0, 0);
    grid_sizer_1->Add(label_2_copy, 0, wxALL|wxFIXED_MINSIZE, 5);
    grid_sizer_1->Add(text_ctrl_1_copy, 0, wxALL|wxEXPAND|wxFIXED_MINSIZE, 5);
    grid_sizer_1->Add(label_3_copy, 0, wxALL|wxFIXED_MINSIZE, 5);
    grid_sizer_1->Add(combo_box_1_copy, 0, wxALL|wxEXPAND|wxFIXED_MINSIZE, 5);
    grid_sizer_1->Add(label_4_copy, 0, wxALL|wxFIXED_MINSIZE, 5);
    grid_sizer_1->Add(list_box_1_copy, 0, wxALL|wxEXPAND|wxFIXED_MINSIZE, 5);
    grid_sizer_1->Add(label_5, 0, wxALL|wxFIXED_MINSIZE, 5);
    grid_sizer_1->Add(text_ctrl_2, 0, wxALL|wxEXPAND|wxFIXED_MINSIZE, 5);
    notebook_1_pane_1->SetAutoLayout(true);
    notebook_1_pane_1->SetSizer(grid_sizer_1);
    grid_sizer_1->Fit(notebook_1_pane_1);
    grid_sizer_1->SetSizeHints(notebook_1_pane_1);
    grid_sizer_1->AddGrowableCol(1);
    notebook_1->AddPage(notebook_1_pane_1, wxT("Object"));
    notebook_1->AddPage(notebook_1_pane_2, wxT("Layout"));
    //sizer_5->Add(new wxNotebookSizer(notebook_1), 1, wxEXPAND, 0);
    sizer_5->Add(notebook_1, 1, wxEXPAND, 0);
    SetAutoLayout(true);
    SetSizer(sizer_5);
    sizer_5->Fit(this);
    sizer_5->SetSizeHints(this);
    // end wxGlade
}









CodeEditorGUI::CodeEditorGUI(wxWindow* parent, int id, const wxString& title, const wxPoint& pos, const wxSize& size, long style):
    wxFrame(parent, id, title, pos, size, wxDEFAULT_FRAME_STYLE)
{
    // begin wxGlade: CodeEditorGUI::CodeEditorGUI
    notebook_2 = new wxNotebook(this, -1, wxDefaultPosition, wxDefaultSize, 0);
    notebook_2_pane_2 = new wxPanel(notebook_2, -1);
    notebook_2_pane_1 = new wxPanel(notebook_2, -1);
    frame_1_statusbar = CreateStatusBar(1, 0);
    frame_1_menubar = new wxMenuBar();
    SetMenuBar(frame_1_menubar);
    wxMenu* Code = new wxMenu();
    Code->Append(ID_CPP, wxT("C++"), wxT(""), wxITEM_NORMAL);
    frame_1_menubar->Append(Code, wxT("Code"));
    m_txtHeader = new wxTextCtrl(notebook_2_pane_1, -1, wxT(""), wxDefaultPosition, wxDefaultSize, wxTE_MULTILINE|wxTE_DONTWRAP	);
    m_txtSource = new wxTextCtrl(notebook_2_pane_2, -1, wxT(""), wxDefaultPosition, wxDefaultSize, wxTE_MULTILINE|wxTE_DONTWRAP	);

    set_properties();
    do_layout();
    // end wxGlade
}


void CodeEditorGUI::set_properties()
{
    // begin wxGlade: CodeEditorGUI::set_properties
    SetTitle(wxT("Code Editor"));
    int frame_1_statusbar_widths[] = { -1 };
    frame_1_statusbar->SetStatusWidths(1, frame_1_statusbar_widths);
    const wxString frame_1_statusbar_fields[] = {
        wxT("")
    };
    for(int i = 0; i < frame_1_statusbar->GetFieldsCount(); ++i) {
        frame_1_statusbar->SetStatusText(frame_1_statusbar_fields[i], i);
    }
    // end wxGlade
}


void CodeEditorGUI::do_layout()
{
    // begin wxGlade: CodeEditorGUI::do_layout
    wxBoxSizer* sizer_6 = new wxBoxSizer(wxVERTICAL);
    wxBoxSizer* sizer_8 = new wxBoxSizer(wxHORIZONTAL);
    wxBoxSizer* sizer_7 = new wxBoxSizer(wxHORIZONTAL);
    sizer_7->Add(m_txtHeader, 1, wxALL|wxEXPAND, 5);
    notebook_2_pane_1->SetAutoLayout(true);
    notebook_2_pane_1->SetSizer(sizer_7);
    sizer_7->Fit(notebook_2_pane_1);
    sizer_7->SetSizeHints(notebook_2_pane_1);
    sizer_8->Add(m_txtSource, 1, wxALL|wxEXPAND, 5);
    notebook_2_pane_2->SetAutoLayout(true);
    notebook_2_pane_2->SetSizer(sizer_8);
    sizer_8->Fit(notebook_2_pane_2);
    sizer_8->SetSizeHints(notebook_2_pane_2);
    notebook_2->AddPage(notebook_2_pane_1, wxT("Header"));
    notebook_2->AddPage(notebook_2_pane_2, wxT("Source"));
    //sizer_6->Add(new wxNotebookSizer(notebook_2), 1, wxEXPAND, 0);
    sizer_6->Add(notebook_2, 1, wxEXPAND, 0);
    SetAutoLayout(true);
    SetSizer(sizer_6);
    sizer_6->Fit(this);
    sizer_6->SetSizeHints(this);
    Layout();
    // end wxGlade
}

